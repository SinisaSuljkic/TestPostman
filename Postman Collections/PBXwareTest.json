{
	"info": {
		"_postman_id": "c2ce761b-9949-4a98-92c9-348fde6b270f",
		"name": "PBXwareAPI_Doc",
		"description": "# Abstract\n\nThis document can be used as a reference guide when using PBXware API.  \nItâ€™s purpose is to help developers write 3rd party software to interact with PBXware.\n\n# Protocol\n\nPBXware API works by sending and receiving either _POST_ or _GET_  \nrequests via [HTTP](http://en.wikipedia.org/wiki/HTTP) protocol.\n\n# Authentication\n\nFor authentication purposes an unique _API key_ is used.\n\n_API key_, by default, is not set. You can set one in _Admin Settings_: _API key_.  \nMinimum key size is **10** random characters. One can also generate random key  \nin the interface itself.\n\nImportant\n\nYou must make sure _API key_ is kept secret as it expose rather critical  \nfunctionalities to 3rd parties (e.g. Delete functionality).\n\n# Requests\n\nBoth the _API key_ and all other necessary arguments are sent as part of _HTTP GET_ or  \n_HTTP POST_ request. Sample request follows:\n\n```\nGET /?apikey=my.secret.apikey&action=pbxware.did.list HTTP/1.0\nHost: pbxware.local\nUser-Agent: Mozilla/5.0\n\n ```\n\n# Responses\n\nResponse from above sample request, by default, comes in [JSON](http://www.json.org/) format.  \nClicking on the _JSON URL_ will give you more information on _JSON_ and how to use it as part of  \nyour application.\n\nOne can customize response by sending `apiformat` argument as part of the request.\n\n# Supported response formats\n\nFollowing response formats are supported by the PBXware API:\n\nResponse formats`json`\n\nJSON\n\n`php`\n\nPHP (serialized)\n\n# Testing\n\nTo test API, you can use some of the CLI tools such as:\n\n- [curl](http://curl.haxx.se)\n- [httpie](https://github.com/jkbr/httpie)\n- [curlish](http://packages.python.org/curlish/)\n    \n\nExample for httpie:\n\n``` html\nhttp -b \"http://pbx.local/?apikey=my.secret.key&action=pbxware.ext.list\"\n\n ```\n\n# Handling errors\n\nIn case response message contains `error` key, all further  \noperations **must** be aborted on the application side. Example:\n\n```\n{\n    \"error\": \"Invalid API key.\"\n}\n\n ```",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Dashboard",
			"item": [
				{
					"name": "Ext_Online",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ff083beb-928c-4f7c-9006-3e7f90c87907",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the response contains the expected fields",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('type', 'Extensions Online');",
									"        pm.expect(responseBody).to.have.property('count');",
									"",
									"        // Print the number of online extensions",
									"        console.log(\"Number of online extensions is \" + responseBody.count);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "01da5d7c-42e7-4cac-a845-f863ada3cb90",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.dashboard.ext_online&server={{Srv/Tenant-ID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.dashboard.ext_online",
									"description": "Display number of Extensions Online"
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Filter extensions by tenant/server."
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Services",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d8168572-d81d-47e6-b201-7a4c9283eb99",
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    var failedServices = [];",
									"    var allRunning = true;",
									"",
									"    // Check each service status in the response",
									"    for (var serviceName in responseBody) {",
									"        if (responseBody.hasOwnProperty(serviceName)) {",
									"            var serviceStatus = responseBody[serviceName];",
									"            if (serviceStatus !== \"running\") {",
									"                failedServices.push(serviceName);",
									"                allRunning = false;",
									"            }",
									"        }",
									"    }",
									"",
									"    if (allRunning) {",
									"        console.log(\"All services are in running state\");",
									"        pm.test('All Services Running', function () {",
									"            pm.expect(true).to.be.true; // Mark the request as pass",
									"        });",
									"    } else {",
									"        console.error(\"Test Failed: Some services are not in running state\");",
									"        console.error(\"Failed Services:\", failedServices);",
									"        pm.test('Services Status', function () {",
									"            pm.expect.fail(\"Some services are not in running state\");",
									"        });",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c296ecde-855b-4336-8e24-382706f25469",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.dashboard.services",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.dashboard.services",
									"description": "Show PBXware services"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SIP_Registrations",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "652d894f-f9f8-4bcb-be53-7c89af8de226",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Validate the 'SIP Registrations' object\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData[\"SIP Registrations\"]).to.exist.and.to.be.an('object');",
									"});",
									"",
									"pm.test(\"Check the value of success in SIP Registrations\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData['SIP Registrations']).to.exist;",
									"    const { success } = responseData['SIP Registrations'];",
									"    console.log({success});",
									"    const { failed } = responseData['SIP Registrations'];",
									"    console.log({failed});",
									"    const { lagged } = responseData['SIP Registrations'];",
									"    console.log({lagged});",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7b18fd71-4140-4192-986a-4c1305ab5287",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.dashboard.sip_registrations&server={{Srv/Tenant-ID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.dashboard.sip_registrations",
									"description": "Show information of SIP registrations"
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Filter extensions by tenant/server"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Calls Overview",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "750e26d7-b660-418f-ae4b-759226bb862d",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the response contains the expected fields",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('now');",
									"        pm.expect(responseBody).to.have.property('last hour');",
									"        pm.expect(responseBody).to.have.property('today');",
									"        pm.expect(responseBody).to.have.property('answared calls');",
									"        pm.expect(responseBody.now).to.be.a('number');",
									"        pm.expect(responseBody['last hour']).to.be.a('number');",
									"        pm.expect(responseBody.today).to.be.a('number');",
									"        pm.expect(responseBody['answared calls']).to.be.a('number');",
									"    });",
									"",
									"    // Print the names and values of all fields in the response",
									"    console.log(\"Response Details:\");",
									"    for (var key in responseBody) {",
									"        if (responseBody.hasOwnProperty(key)) {",
									"            console.log(key + \": \" + responseBody[key]);",
									"        }",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "06170fc5-78dc-4b9c-9249-2cb1a31eca11",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.dashboard.calls&server={{Srv/Tenant-ID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.dashboard.calls",
									"description": "Calls Overview."
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Filter extensions by tenant/server"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Glocom Editions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1a1067a8-6fcc-4987-ad5b-770d521e8f7e",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the response contains the expected fields",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('office');",
									"        pm.expect(responseBody).to.have.property('business');",
									"        pm.expect(responseBody).to.have.property('agent');",
									"        pm.expect(responseBody).to.have.property('supervisor');",
									"        pm.expect(responseBody).to.have.property('ios');",
									"        pm.expect(responseBody).to.have.property('android');",
									"        pm.expect(responseBody.office).to.be.a('number');",
									"        pm.expect(responseBody.business).to.be.a('number');",
									"        pm.expect(responseBody.agent).to.be.a('number');",
									"        pm.expect(responseBody.supervisor).to.be.a('number');",
									"        pm.expect(responseBody.ios).to.be.a('number');",
									"        pm.expect(responseBody.android).to.be.a('number');",
									"    });",
									"",
									"    // Print the names and values of all fields in the response",
									"    console.log(\"Response Details:\");",
									"    for (var key in responseBody) {",
									"        if (responseBody.hasOwnProperty(key)) {",
									"            console.log(key + \": \" + responseBody[key]);",
									"        }",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4622005c-ff86-4522-9991-35a3a1489a42",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.dashboard.glocom_editions&server={{Srv/Tenant-ID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.dashboard.glocom_editions",
									"description": "Display information on apps registered to PBXware and the editions"
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Filter extensions by tenant/server."
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Glocom Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a5cc7c79-542e-4152-93f8-961952e29b7b",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the response contains the expected field",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('glocom_users');",
									"        pm.expect(responseBody.glocom_users).to.be.a('number');",
									"    });",
									"",
									"    // Print the name and value of the field in the response",
									"    console.log(\"Response Details:\");",
									"    console.log(\"glocom_users: \" + responseBody.glocom_users);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "659d28d6-e59c-43fe-9961-ad5bf639f614",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.dashboard.glocom_users&server={{Srv/Tenant-ID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.dashboard.glocom_users",
									"description": "Display number of logged GloCOM users."
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Filter extensions by tenant/server"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Licensing",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a6d33d13-d014-4123-afc3-a9be9940338d",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the response contains the expected fields",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('ext');",
									"        pm.expect(responseBody).to.have.property('ivr');",
									"        pm.expect(responseBody).to.have.property('queue');",
									"        pm.expect(responseBody).to.have.property('conference');",
									"        pm.expect(responseBody.ext).to.have.property('inuse');",
									"        pm.expect(responseBody.ext).to.have.property('max');",
									"        pm.expect(responseBody.ivr).to.have.property('inuse');",
									"        pm.expect(responseBody.ivr).to.have.property('max');",
									"        pm.expect(responseBody.queue).to.have.property('inuse');",
									"        pm.expect(responseBody.queue).to.have.property('max');",
									"        pm.expect(responseBody.conference).to.have.property('inuse');",
									"        pm.expect(responseBody.conference).to.have.property('max');",
									"",
									"        // Additional validation (optional)",
									"        pm.expect(responseBody.ext.inuse).to.be.a('number');",
									"        pm.expect(responseBody.ext.max).to.be.a('number');",
									"        pm.expect(responseBody.ivr.inuse).to.be.a('number');",
									"        pm.expect(responseBody.ivr.max).to.be.a('number');",
									"        pm.expect(responseBody.queue.inuse).to.be.a('number');",
									"        pm.expect(responseBody.queue.max).to.be.a('number');",
									"        pm.expect(responseBody.conference.inuse).to.be.a('number');",
									"        pm.expect(responseBody.conference.max).to.be.a('number');",
									"    });",
									"",
									"    // Print the names and values of all fields in the response",
									"    console.log(\"Response Details:\");",
									"    for (var key in responseBody) {",
									"        if (responseBody.hasOwnProperty(key)) {",
									"            console.log(key + \":\", responseBody[key]);",
									"        }",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e4ca2ca1-8a71-4f21-8045-0e0e5117565f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.dashboard.licensing&server={{Srv/Tenant-ID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.dashboard.licensing",
									"description": "Display the percentage usage information of PBXware license for Extensions, IVRs, Queues, and Conferences"
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Filter extensions by tenant/server"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Disk Usage",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f97ccd80-4a19-4e49-9ce2-dad1ab4b20c3",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the response contains the expected field",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('inuse');",
									"        pm.expect(responseBody.inuse).to.be.a('string');",
									"",
									"        // Check if the disk usage percentage is within a valid range (0-100%)",
									"        var diskUsagePercentage = parseInt(responseBody.inuse);",
									"        pm.expect(diskUsagePercentage).to.be.within(0, 100);",
									"    });",
									"",
									"    // Print the disk usage percentage value from the response",
									"    console.log(\"Disk Usage: \" + responseBody.inuse);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "eb06e705-78e1-4bf4-aaf8-2ff889753239",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.dashboard.disk_usage",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.dashboard.disk_usage",
									"description": "Display information on current PBXware hard disk usage"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CPU",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a29259f5-4e3f-499b-a802-92bfb477e3e9",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the response contains the expected field",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('inuse');",
									"        pm.expect(responseBody.inuse).to.be.a('string');",
									"",
									"        // Check if the CPU usage percentage is within a valid range (0-100%)",
									"        var cpuUsagePercentage = parseInt(responseBody.inuse);",
									"        pm.expect(cpuUsagePercentage).to.be.within(0, 100);",
									"    });",
									"",
									"    // Print the CPU usage percentage value from the response",
									"    console.log(\"CPU Usage: \" + responseBody.inuse);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4ec5c630-553f-4985-92c6-7721d856669f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.dashboard.cpu",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.dashboard.cpu",
									"description": "Display information on CPU usage on the PBXware server"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Memory",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a29259f5-4e3f-499b-a802-92bfb477e3e9",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the response contains the expected field",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('inuse');",
									"        pm.expect(responseBody.inuse).to.be.a('string');",
									"",
									"        // Check if the memory usage percentage is within a valid range (0-100%)",
									"        var memoryUsagePercentage = parseInt(responseBody.inuse);",
									"        pm.expect(memoryUsagePercentage).to.be.within(0, 100);",
									"    });",
									"",
									"    // Print the memory usage percentage value from the response",
									"    console.log(\"Memory Usage: \" + responseBody.inuse);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "62fee5cf-0a51-439e-bf78-7b04ddec30c7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.dashboard.memory",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.dashboard.memory",
									"description": "Display information on PBXware memory usage"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "17080d05-02da-48f4-9ab7-b0468145a800",
			"description": "# Dashboard\n\nSupported Methods:\n\n`ext_online` - Display number of Extensions Online\n\n`services` - Display PBXware services\n\n`sip_registrations` - Display information for SIP registration\n\n`calls` - Calls Overview\n\n`glocom_editions` - Display information on apps registered to PBXware and the editions\n\n`glocom_users` - Display number of logged GloCOM users\n\n`licensing` - Display the percentage usage information of PBXware license\n\n`disk_usage` - Display information on current PBXware hard disk usage\n\n`cpu` - Display information on CPU usage on the PBXware server\n\n`memory` - Display information on PBXware memory usage"
		},
		{
			"name": "Extensions",
			"item": [
				{
					"name": "Add Extensions",
					"item": [
						{
							"name": "Add Extensions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5f77875f-510a-4f53-a62b-f484d80eb387",
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if the response contains the expected fields",
											"    pm.test('Response Validation', function () {",
											"        pm.expect(responseBody).to.be.an('object');",
											"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
											"        pm.expect(responseBody).to.have.property('id').that.is.a('string');",
											"        pm.expect(responseBody).to.have.property('ext').that.is.a('number');",
											"    });",
											"",
											"    // Print the success message and extension ID from the response",
											"    console.log(responseBody.success);",
											"    console.log(\"Extension ID:\", responseBody.id);",
											"",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8cab2d8f-f0ff-40f4-9282-18ee17d4ea14",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "dc55ee51-d8d3-40ad-85cf-71e65eaee8a4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.add&server={{tenantID}}&name={{name}}&email={{email}}&ext={{extension}}&location=2&ua=50&secret={{secret}}&pin={{pin}}&prot=sip&status=1&incominglimit=2&outgoinglimit=2&voicemail=1",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}",
											"description": "API Key"
										},
										{
											"key": "action",
											"value": "pbxware.ext.add",
											"description": "Action"
										},
										{
											"key": "server",
											"value": "{{tenantID}}",
											"description": "Tenant/Server ID (Required)"
										},
										{
											"key": "name",
											"value": "{{name}}",
											"description": "Full Name (Required) (Regex: /^[[:alnum:][:punct:][:space:]]+$/)"
										},
										{
											"key": "email",
											"value": "{{email}}",
											"description": "E-mail (Required) (Regex: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]+$/)"
										},
										{
											"key": "ext",
											"value": "{{extension}}",
											"description": "Extension number. (Regex: /^\\\\d{3}$/)"
										},
										{
											"key": "location",
											"value": "2",
											"description": "Location (Local=1, Remote=2) (Required)"
										},
										{
											"key": "ua",
											"value": "50",
											"description": "User Agent Device ID (number only) (Required) (50 is for Generic SIP)"
										},
										{
											"key": "secret",
											"value": "{{secret}}",
											"description": "Password (Required). (Regex: /^[a-zA-Z0-9%\\\\$\\\\*!@\\\\_\\\\-]+$/)"
										},
										{
											"key": "pin",
											"value": "{{pin}}",
											"description": "PIN (Required). (Regex: /^\\\\d{4,4}$/)"
										},
										{
											"key": "prot",
											"value": "sip",
											"description": "Protocol ('sip' and 'iax' only!) (Required)"
										},
										{
											"key": "status",
											"value": "1",
											"description": "Status (Active=1, Not Active=0, Suspended=2) (Required)"
										},
										{
											"key": "incominglimit",
											"value": "2",
											"description": "Incoming limit (Required). (Regex: /^\\\\d{1,4}$/)"
										},
										{
											"key": "outgoinglimit",
											"value": "2",
											"description": "Outgoing limit (Required). (Regex: /^\\\\d{1,4}$/)"
										},
										{
											"key": "voicemail",
											"value": "1",
											"description": "Voicemail (Yes=1, No=0) (Required)"
										},
										{
											"key": "title",
											"value": "",
											"description": "Title. (Regex: /^.{1,60}$/)",
											"disabled": true
										},
										{
											"key": "uad_sipheaders",
											"value": "",
											"type": "text",
											"description": "Check for UAD SIP Headers. (Regex: /[\\\\w\\\\-,]+/)",
											"disabled": true
										},
										{
											"key": "label",
											"value": "",
											"type": "text",
											"description": "Label. (Regex: /^.{1,60}$/)",
											"disabled": true
										},
										{
											"key": "user_location",
											"value": "",
											"type": "text",
											"description": "User Location. (Regex: /^.{1,60}$/)",
											"disabled": true
										},
										{
											"key": "user_language",
											"value": "",
											"type": "text",
											"description": "User lenguage. (Regex: /^.{1,60}$/)",
											"disabled": true
										},
										{
											"key": "authname",
											"value": "",
											"type": "text",
											"description": "Authentification name. (Regex: /^\\\\w+$/)",
											"disabled": true
										},
										{
											"key": "auth",
											"value": "",
											"type": "text",
											"description": "(Regex: /^(\\\\S+)(:\\\\S+)?@\\\\S+$/)",
											"disabled": true
										},
										{
											"key": "billing",
											"value": "",
											"type": "text",
											"description": "Call Rating (Yes=1, No=0) (deprecated and will be soon replaced with call_rating)",
											"disabled": true
										},
										{
											"key": "call_rating",
											"value": "",
											"type": "text",
											"description": "Call Rating (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "creditlimit",
											"value": "",
											"type": "text",
											"description": "Credit limit (number, 12 digits max, required if Billing=1)",
											"disabled": true
										},
										{
											"key": "reminderbalance",
											"value": "",
											"type": "text",
											"description": "Reminder balance (number, 5 digits max, required if Billing=1)",
											"disabled": true
										},
										{
											"key": "service_plan",
											"value": "",
											"type": "text",
											"description": "Service Plan ID (required if Billing=1)",
											"disabled": true
										},
										{
											"key": "nat",
											"value": "",
											"type": "text",
											"description": "NAT (Yes=1, No=0, Never=2)",
											"disabled": true
										},
										{
											"key": "canreinvite",
											"value": "",
											"type": "text",
											"description": "SIP Re-INVITE support (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "qualify",
											"value": "",
											"type": "text",
											"description": "Qualify (4 digits max)",
											"disabled": true
										},
										{
											"key": "ringtime",
											"value": "",
											"description": "Ring time seconds (2 digits max). (Regex: /^\\\\d{0,2}$/)",
											"disabled": true
										},
										{
											"key": "incoming_dialoptions",
											"value": "",
											"type": "text",
											"description": "(Regex: /^[0tTr]+$/)",
											"disabled": true
										},
										{
											"key": "outgoing_dialoptions",
											"value": "",
											"type": "text",
											"description": "(Regex: /^[tTr]+$/)",
											"disabled": true
										},
										{
											"key": "autoprovisiong",
											"value": "",
											"type": "text",
											"description": "Auto provisioning (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "dhcp",
											"value": "",
											"type": "text",
											"description": "DHCP (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "staticip",
											"value": "",
											"type": "text",
											"description": "Provisioning Static IP address. (Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)",
											"disabled": true
										},
										{
											"key": "netmask",
											"value": "",
											"type": "text",
											"description": "Provisioning netmask. (Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)",
											"disabled": true
										},
										{
											"key": "gateway",
											"value": "",
											"type": "text",
											"description": "Provisioning gateway. (Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)",
											"disabled": true
										},
										{
											"key": "dns1",
											"value": "",
											"type": "text",
											"description": "Provisioning DNS 1. (Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)",
											"disabled": true
										},
										{
											"key": "dns2",
											"value": "",
											"type": "text",
											"description": "Provisioning DNS 2. (Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)",
											"disabled": true
										},
										{
											"key": "macaddress",
											"value": "",
											"type": "text",
											"description": "User Agent device MAC address. (Regex: /^[0-9a-fA-F]{12}$/)",
											"disabled": true
										},
										{
											"key": "voicemail_timezone",
											"value": "",
											"type": "text",
											"description": "Voicemail timezone (Germany, USAâ€¦â€‹). (Regex: /^[\\\\w\\\\s]+$/)",
											"disabled": true
										},
										{
											"key": "vm_greeting_message",
											"value": "",
											"type": "text",
											"description": "Voicemail Greeting Message (Unavailable=0, Busy=1, None=2)",
											"disabled": true
										},
										{
											"key": "setcallerid",
											"value": "",
											"type": "text",
											"description": "Set CallerID (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "acodecs",
											"value": "",
											"type": "text",
											"description": "Allowed codecs separated with :: ulaw:alaw:g723.1:g726:g729:gsm:ilbc:speex:lpc10:h261:h263:h263p",
											"disabled": true
										},
										{
											"key": "page",
											"value": "",
											"type": "text",
											"description": "Speakerphone paging header, one of following values are valid:\n(empty) - Custom Header\n2 - Aastra 480i 9112i 9133i\n4 - Polycomâ€™s Default\n5 - Sipura\n6 - Snom phones",
											"disabled": true
										},
										{
											"key": "page_custom",
											"value": "",
											"type": "text",
											"description": "Custom page header (text). (Regex: /^[\\\\w\\\\s]+$/)",
											"disabled": true
										},
										{
											"key": "recordcalls",
											"value": "",
											"type": "text",
											"description": "Record calls (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "recordsilent",
											"value": "",
											"type": "text",
											"description": "Silent recording (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "vmailsend",
											"value": "",
											"type": "text",
											"description": "Send E-mail (hints) (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "vmailattach",
											"value": "",
											"type": "text",
											"description": "Attach (hints) (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "vmaildelete",
											"value": "",
											"type": "text",
											"description": "Delete After E-mailing (hints) (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "acc_slave",
											"value": "1",
											"type": "text",
											"description": "Slave (hints) (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "slave_accountcode",
											"value": "",
											"type": "text",
											"description": "Master Account Code. (Regex: /^\\\\d{3}$/)",
											"disabled": true
										},
										{
											"key": "send_email",
											"value": "",
											"type": "text",
											"description": "Send E-mail with account details (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "service_plan_date",
											"value": "",
											"type": "text",
											"description": "Service Plan Date (dd-mm-YYYY)",
											"disabled": true
										},
										{
											"key": "limitenable",
											"value": "",
											"type": "text",
											"description": "Enable Limits (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "limittype",
											"value": "",
											"type": "text",
											"description": "Limit Type (Daily, Monthly)",
											"disabled": true
										},
										{
											"key": "softlimit",
											"value": "",
											"type": "text",
											"description": "Soft Limit (number, 5 digits max)",
											"disabled": true
										},
										{
											"key": "hardlimit",
											"value": "",
											"type": "text",
											"description": "Hard Limit (number, 5 digits max)",
											"disabled": true
										},
										{
											"key": "notification_email",
											"value": "",
											"type": "text",
											"description": "(Regex: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]+$/)",
											"disabled": true
										},
										{
											"key": "pbd_pin",
											"value": "",
											"type": "text",
											"description": "PIN Based Device PIN (number, 5 digits)",
											"disabled": true
										},
										{
											"key": "cf_billing_disable",
											"value": "",
											"type": "text",
											"description": "(deprecated and will be soon replaced with cf_call_rating_disable)",
											"disabled": true
										},
										{
											"key": "cf_call_rating_disable",
											"value": "",
											"type": "text",
											"description": "Disable Call Rating for Call Forwarding. (Regex: /^(1|0|2)$/)",
											"disabled": true
										},
										{
											"key": "webrtc",
											"value": "",
											"description": "(Regex: /^(1|0|2)$/)",
											"disabled": true
										},
										{
											"key": "defaultip",
											"value": "",
											"type": "text",
											"description": "(Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)",
											"disabled": true
										},
										{
											"key": "max_contacts",
											"value": "",
											"type": "text",
											"description": "(Regex: /^\\\\d{1,2}$/)",
											"disabled": true
										},
										{
											"key": "encryption",
											"value": "",
											"type": "text",
											"description": "Encryption (yes,offer)",
											"disabled": true
										},
										{
											"key": "directrtpsetup",
											"value": "",
											"type": "text",
											"description": "Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "callingpres",
											"value": "",
											"type": "text",
											"description": "CallerID Presentation. (Regex: /^(allowed_not_screened|allowed_passed_screen|allowed_failed_screen|allowed|prohib_not_screened|prohib_passed_screen|prohib_failed_screen|prohib|unavailable)$/)",
											"disabled": true
										},
										{
											"key": "cid_anon",
											"value": "",
											"type": "text",
											"description": "Hide CallerID for Anonymous calls. Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "ringtoneforlocalcalls",
											"value": "",
											"type": "text",
											"description": "(Regex: /^[a-zA-Z0-9._-]+$/)",
											"disabled": true
										},
										{
											"key": "ringtonefortransferredcalls",
											"value": "",
											"type": "text",
											"description": "(Regex: /^[a-zA-Z0-9._-]+$/)",
											"disabled": true
										},
										{
											"key": "cidmatchdid",
											"value": "",
											"type": "text",
											"description": "Only Allow Trunk CallerID within DID range. Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "dropanonymous",
											"value": "",
											"type": "text",
											"description": "Drop Anonymous calls: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "trustrpid",
											"value": "",
											"type": "text",
											"description": "Trust Remote-Party-ID: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "sendrpid",
											"value": "",
											"type": "text",
											"description": "Send Remote-Party-ID. (Regex: /^(rpid|pai)$/)",
											"disabled": true
										},
										{
											"key": "trust_id_outbound",
											"value": "",
											"type": "text",
											"description": "Send Caller ID in RPID for Anonymous calls: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "rpid_connectedline",
											"value": "",
											"type": "text",
											"description": "Connected Line Updates: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "rpid_update",
											"value": "",
											"type": "text",
											"description": "RPID with SIP UPDATE: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "pai_header",
											"value": "",
											"type": "text",
											"description": "(Regex: /^\\\\w{1,64}$/)",
											"disabled": true
										},
										{
											"key": "callgroup",
											"value": "",
											"type": "text",
											"description": "(Regex: /^([0-9]|[1-5][0-9]|6[0-3])(,([0-9]|[1-5][0-9]|6[0-3]))*$/)",
											"disabled": true
										},
										{
											"key": "pickupgroup",
											"value": "",
											"type": "text",
											"description": "(Regex: /^([0-9]|[1-5][0-9]|6[0-3])(,([0-9]|[1-5][0-9]|6[0-3]))*$/)",
											"disabled": true
										},
										{
											"key": "primary_trunk",
											"value": "",
											"type": "text",
											"description": "(Regex: /^[[:alnum:][:punct:][:space:]]+$/)",
											"disabled": true
										},
										{
											"key": "secondary_trunk",
											"value": "",
											"type": "text",
											"description": "(Regex: /^[[:alnum:][:punct:][:space:]]+$/)",
											"disabled": true
										},
										{
											"key": "tertiary_trunk",
											"value": "",
											"type": "text",
											"description": "(Regex: /^[[:alnum:][:punct:][:space:]]+$/)",
											"disabled": true
										},
										{
											"key": "primary_emerg_trunk",
											"value": "",
											"type": "text",
											"description": "(Regex: /^[[:alnum:][:punct:][:space:]]+$/)",
											"disabled": true
										},
										{
											"key": "secondary_emerg_trunk",
											"value": "",
											"type": "text",
											"description": "(Regex: /^[[:alnum:][:punct:][:space:]]+$/)",
											"disabled": true
										},
										{
											"key": "tertiary_emerg_trunk",
											"value": "",
											"type": "text",
											"description": "(Regex: /^[[:alnum:][:punct:][:space:]]+$/)",
											"disabled": true
										},
										{
											"key": "busylevel",
											"value": "",
											"type": "text",
											"description": "(Regex: /^\\\\d{1,2}$/)",
											"disabled": true
										},
										{
											"key": "limit_notify_play_sound",
											"value": "",
											"type": "text",
											"description": "Play sound on exceeded limit: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "limit_notify_send_email",
											"value": "",
											"type": "text",
											"description": "Send e-mail on exceeded limit: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "busyvoicemail",
											"value": "",
											"type": "text",
											"description": "Greeting-Mode: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "mailboxes",
											"value": "",
											"type": "text",
											"description": "MWI extensions (comma separated). (Regex: /^[0-9,]+$/)",
											"disabled": true
										},
										{
											"key": "vmailpager",
											"value": "",
											"type": "text",
											"description": "(Regex: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]+$/)",
											"disabled": true
										},
										{
											"key": "vmailskipinst",
											"value": "",
											"type": "text",
											"description": "Skip Instructions: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "vmailsaycid",
											"value": "",
											"type": "text",
											"description": "Say CallerID: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "vmailreview",
											"value": "",
											"type": "text",
											"description": "Allow Review mode: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "vmailoperator",
											"value": "",
											"type": "text",
											"description": "Allow Operator: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "vmailenvelope",
											"value": "",
											"description": "Play Envelope message: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "vmailhidefromdir",
											"value": "",
											"type": "text",
											"description": "Hide from directory: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "videosupport",
											"value": "",
											"type": "text",
											"description": "Video Support: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "autoframing",
											"value": "",
											"type": "text",
											"description": "Auto-Framing (RTP Packetization): Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "vmaildelay",
											"value": "",
											"type": "text",
											"description": "Voicemail Delay in sec. (Regex: /^[0-9]+$/)",
											"disabled": true
										},
										{
											"key": "vmailopext",
											"value": "",
											"type": "text",
											"description": "Operator Extension. (Regex: /^[0-9]+$/)",
											"disabled": true
										},
										{
											"key": "vmailnrings",
											"value": "",
											"type": "text",
											"description": "Rings to answer. (Regex: /^\\\\d{1,3}$/)",
											"disabled": true
										},
										{
											"key": "force_codec",
											"value": "",
											"type": "text",
											"description": "Force codec on outbound trunk channel (ulaw, alaw, g722, opus, g723.1, g726, g726aal2, g729, gsm, ilbc, speex, speex16, speex32)",
											"disabled": true
										},
										{
											"key": "hd_logout_time",
											"value": "",
											"type": "text",
											"description": "Automatic Logout (Hot Desking). (Regex: /^\\\\d$/)",
											"disabled": true
										},
										{
											"key": "record_beep_ext",
											"value": "",
											"type": "text",
											"description": "Play Periodic Beep in sec. (Regex: /^\\\\d{1,3}$/)",
											"disabled": true
										},
										{
											"key": "pbd_pin",
											"value": "",
											"type": "text",
											"description": "Pin Based Dialing Pin (Must be enabled in license). (Regex: /^\\\\d{1,5}$/)",
											"disabled": true
										},
										{
											"key": "areacode",
											"value": "",
											"type": "text",
											"description": "(Regex: /^\\\\d{1,3}$/)",
											"disabled": true
										},
										{
											"key": "busylevel_incoming",
											"value": "",
											"type": "text",
											"description": "Apply Busy Level for Incoming Calls (Yes=1, No=0, Not Set=2)",
											"disabled": true
										},
										{
											"key": "jbimpl",
											"value": "",
											"type": "text",
											"description": "Jitter Buffer (inherit, disabled, fixed, adaptive)",
											"disabled": true
										},
										{
											"key": "jbmaxsize",
											"value": "",
											"type": "text",
											"description": "Max length (ms). (Regex: /^\\\\d{1,4}$/)",
											"disabled": true
										},
										{
											"key": "jbresyncthreshold",
											"value": "",
											"type": "text",
											"description": "Re-sync threshold. (Regex: /^\\\\d{1,5}$/)",
											"disabled": true
										},
										{
											"key": "jbtargetextra",
											"value": "",
											"type": "text",
											"description": "Target extra: (Regex: /^\\\\d{1,4}$/)",
											"disabled": true
										},
										{
											"key": "show_in_dir",
											"value": "",
											"description": "Show In Directory (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "show_in_app",
											"value": "",
											"type": "text",
											"description": "Show in Desktop/Mobile App (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "additional_config",
											"value": "",
											"type": "text",
											"description": "Additional config. (Regex: /[\\\\s\\\\S]/)",
											"disabled": true
										},
										{
											"key": "ua_autoprov",
											"value": "",
											"type": "text",
											"description": "UAD Auto Provisioning Template. (Regex: /[\\\\s\\\\S]/)",
											"disabled": true
										},
										{
											"key": "vmailskippin",
											"value": "",
											"description": "(Yes=1, No=0, Not Set=2)",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "b9bcaaf4-563c-4b9f-b6aa-bf69c1a0b9db",
					"description": "Add Extension"
				},
				{
					"name": "Editing Extensions",
					"item": [
						{
							"name": "Editing Extensions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5f77875f-510a-4f53-a62b-f484d80eb387",
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if the response contains the expected fields",
											"    pm.test('Response Validation', function () {",
											"        pm.expect(responseBody).to.be.an('object');",
											"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
											"        pm.expect(responseBody).to.have.property('id').that.is.a('string');",
											"        pm.expect(responseBody).to.have.property('ext').that.is.a('number');",
											"    });",
											"",
											"    // Print the success message and extension ID from the response",
											"    console.log(responseBody.success);",
											"    console.log(\"Extension ID:\", responseBody.id);",
											"",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8cab2d8f-f0ff-40f4-9282-18ee17d4ea14",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "92bd5360-62c1-4016-a4ff-7de96ded318e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.edit&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}",
											"description": "API Key"
										},
										{
											"key": "action",
											"value": "pbxware.ext.edit"
										},
										{
											"key": "server",
											"value": "{{Srv/Tenant-ID}}",
											"description": "Tenant/Server ID (Required)"
										},
										{
											"key": "id",
											"value": "{{ExtensionIDs}}",
											"description": "Extension IDs (Required) (Use CSV file ExtensionIDs.csv to edit multiple extensions)"
										},
										{
											"key": "name",
											"value": "{{name}}",
											"description": "Full Name (Regex: /^[[:alnum:][:punct:][:space:]]+$/)",
											"disabled": true
										},
										{
											"key": "email",
											"value": "{{email}}",
											"description": "E-mail (Regex: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]+$/)",
											"disabled": true
										},
										{
											"key": "ext",
											"value": "{{extension}}",
											"description": "Extension number. (Regex: /^\\\\d{3}$/)",
											"disabled": true
										},
										{
											"key": "location",
											"value": "",
											"description": "Location (Local=1, Remote=2)",
											"disabled": true
										},
										{
											"key": "ua",
											"value": "",
											"description": "User Agent Device ID (number only) (50 is for Generic SIP)",
											"disabled": true
										},
										{
											"key": "secret",
											"value": "{{secret}}",
											"description": "Password. (Regex: /^[a-zA-Z0-9%\\\\$\\\\*!@\\\\_\\\\-]+$/)",
											"disabled": true
										},
										{
											"key": "pin",
											"value": "{{pin}}",
											"description": "PIN. (Regex: /^\\\\d{4,4}$/)",
											"disabled": true
										},
										{
											"key": "prot",
											"value": "",
											"description": "Protocol ('sip' and 'iax' only!)",
											"disabled": true
										},
										{
											"key": "status",
											"value": "",
											"description": "Status (Active=1, Not Active=0, Suspended=2)",
											"disabled": true
										},
										{
											"key": "incominglimit",
											"value": "",
											"description": "Incoming limit. (Regex: /^\\\\d{1,4}$/)",
											"disabled": true
										},
										{
											"key": "outgoinglimit",
											"value": "",
											"description": "Outgoing limit. (Regex: /^\\\\d{1,4}$/)",
											"disabled": true
										},
										{
											"key": "voicemail",
											"value": "",
											"description": "Voicemail (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "title",
											"value": "",
											"description": "Title. (Regex: /^.{1,60}$/)",
											"disabled": true
										},
										{
											"key": "uad_sipheaders",
											"value": "",
											"type": "text",
											"description": "Check for UAD SIP Headers. (Regex: /[\\\\w\\\\-,]+/)",
											"disabled": true
										},
										{
											"key": "label",
											"value": "",
											"type": "text",
											"description": "Label. (Regex: /^.{1,60}$/)",
											"disabled": true
										},
										{
											"key": "user_location",
											"value": "",
											"type": "text",
											"description": "User Location. (Regex: /^.{1,60}$/)",
											"disabled": true
										},
										{
											"key": "user_language",
											"value": "",
											"type": "text",
											"description": "User lenguage. (Regex: /^.{1,60}$/)",
											"disabled": true
										},
										{
											"key": "authname",
											"value": "",
											"type": "text",
											"description": "Authentification name. (Regex: /^\\\\w+$/)",
											"disabled": true
										},
										{
											"key": "auth",
											"value": "",
											"type": "text",
											"description": "(Regex: /^(\\\\S+)(:\\\\S+)?@\\\\S+$/)",
											"disabled": true
										},
										{
											"key": "billing",
											"value": "",
											"type": "text",
											"description": "Call Rating (Yes=1, No=0) (deprecated and will be soon replaced with call_rating)",
											"disabled": true
										},
										{
											"key": "call_rating",
											"value": "",
											"type": "text",
											"description": "Call Rating (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "creditlimit",
											"value": "",
											"type": "text",
											"description": "Credit limit (number, 12 digits max, required if Billing/Call_Rating=1)",
											"disabled": true
										},
										{
											"key": "reminderbalance",
											"value": "",
											"type": "text",
											"description": "Reminder balance (number, 5 digits max, required if Billing/Call_Rating=1)",
											"disabled": true
										},
										{
											"key": "service_plan",
											"value": "",
											"type": "text",
											"description": "Service Plan ID (required if Billing/Call_Rating=1)",
											"disabled": true
										},
										{
											"key": "nat",
											"value": "",
											"type": "text",
											"description": "NAT (Yes=1, No=0, Never=2)",
											"disabled": true
										},
										{
											"key": "canreinvite",
											"value": "",
											"type": "text",
											"description": "SIP Re-INVITE support (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "qualify",
											"value": "",
											"type": "text",
											"description": "Qualify (4 digits max)",
											"disabled": true
										},
										{
											"key": "ringtime",
											"value": "",
											"description": "Ring time seconds (2 digits max). (Regex: /^\\\\d{0,2}$/)",
											"disabled": true
										},
										{
											"key": "incoming_dialoptions",
											"value": "",
											"type": "text",
											"description": "(Regex: /^[0tTr]+$/)",
											"disabled": true
										},
										{
											"key": "outgoing_dialoptions",
											"value": "",
											"type": "text",
											"description": "(Regex: /^[tTr]+$/)",
											"disabled": true
										},
										{
											"key": "autoprovisiong",
											"value": "",
											"type": "text",
											"description": "Auto provisioning (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "dhcp",
											"value": "",
											"type": "text",
											"description": "DHCP (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "staticip",
											"value": "",
											"type": "text",
											"description": "Provisioning Static IP address. (Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)",
											"disabled": true
										},
										{
											"key": "netmask",
											"value": "",
											"type": "text",
											"description": "Provisioning netmask. (Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)",
											"disabled": true
										},
										{
											"key": "gateway",
											"value": "",
											"type": "text",
											"description": "Provisioning gateway. (Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)",
											"disabled": true
										},
										{
											"key": "dns1",
											"value": "",
											"type": "text",
											"description": "Provisioning DNS 1. (Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)",
											"disabled": true
										},
										{
											"key": "dns2",
											"value": "",
											"type": "text",
											"description": "Provisioning DNS 2. (Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)",
											"disabled": true
										},
										{
											"key": "macaddress",
											"value": "",
											"type": "text",
											"description": "User Agent device MAC address. (Regex: /^[0-9a-fA-F]{12}$/)",
											"disabled": true
										},
										{
											"key": "voicemail_timezone",
											"value": "",
											"type": "text",
											"description": "Voicemail timezone (Germany, USAâ€¦â€‹). (Regex: /^[\\\\w\\\\s]+$/)",
											"disabled": true
										},
										{
											"key": "vm_greeting_message",
											"value": "",
											"type": "text",
											"description": "Voicemail Greeting Message (Unavailable=0, Busy=1, None=2)",
											"disabled": true
										},
										{
											"key": "setcallerid",
											"value": "",
											"type": "text",
											"description": "Set CallerID (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "acodecs",
											"value": "",
											"type": "text",
											"description": "Allowed codecs separated with :: ulaw:alaw:g723.1:g726:g729:gsm:ilbc:speex:lpc10:h261:h263:h263p",
											"disabled": true
										},
										{
											"key": "page",
											"value": "",
											"type": "text",
											"description": "Speakerphone paging header, one of following values are valid:\n(empty) - Custom Header\n2 - Aastra 480i 9112i 9133i\n4 - Polycomâ€™s Default\n5 - Sipura\n6 - Snom phones",
											"disabled": true
										},
										{
											"key": "page_custom",
											"value": "",
											"type": "text",
											"description": "Custom page header (text). (Regex: /^[\\\\w\\\\s]+$/)",
											"disabled": true
										},
										{
											"key": "recordcalls",
											"value": "",
											"type": "text",
											"description": "Record calls (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "recordsilent",
											"value": "",
											"type": "text",
											"description": "Silent recording (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "vmailsend",
											"value": "",
											"type": "text",
											"description": "Send E-mail (hints) (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "vmailattach",
											"value": "",
											"type": "text",
											"description": "Attach (hints) (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "vmaildelete",
											"value": "",
											"type": "text",
											"description": "Delete After E-mailing (hints) (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "acc_slave",
											"value": "",
											"type": "text",
											"description": "Slave (hints) (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "slave_accountcode",
											"value": "",
											"type": "text",
											"description": "Master Account Code. (Regex: /^\\\\d{3}$/)",
											"disabled": true
										},
										{
											"key": "send_email",
											"value": "",
											"type": "text",
											"description": "Send E-mail with account details (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "service_plan_date",
											"value": "",
											"type": "text",
											"description": "Service Plan Date (dd-mm-YYYY)",
											"disabled": true
										},
										{
											"key": "limitenable",
											"value": "",
											"type": "text",
											"description": "Enable Limits (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "limittype",
											"value": "",
											"type": "text",
											"description": "Limit Type (Daily, Monthly)",
											"disabled": true
										},
										{
											"key": "softlimit",
											"value": "",
											"type": "text",
											"description": "Soft Limit (number, 5 digits max)",
											"disabled": true
										},
										{
											"key": "hardlimit",
											"value": "",
											"type": "text",
											"description": "Hard Limit (number, 5 digits max)",
											"disabled": true
										},
										{
											"key": "notification_email",
											"value": "",
											"type": "text",
											"description": "(Regex: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]+$/)",
											"disabled": true
										},
										{
											"key": "pbd_pin",
											"value": "",
											"type": "text",
											"description": "PIN Based Device PIN (number, 5 digits)",
											"disabled": true
										},
										{
											"key": "cf_billing_disable",
											"value": "",
											"type": "text",
											"description": "(deprecated and will be soon replaced with cf_call_rating_disable)",
											"disabled": true
										},
										{
											"key": "cf_call_rating_disable",
											"value": "",
											"type": "text",
											"description": "Disable Call Rating for Call Forwarding. (Regex: /^(1|0|2)$/)",
											"disabled": true
										},
										{
											"key": "webrtc",
											"value": "",
											"description": "(Regex: /^(1|0|2)$/)",
											"disabled": true
										},
										{
											"key": "defaultip",
											"value": "",
											"type": "text",
											"description": "(Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)",
											"disabled": true
										},
										{
											"key": "max_contacts",
											"value": "",
											"type": "text",
											"description": "(Regex: /^\\\\d{1,2}$/)",
											"disabled": true
										},
										{
											"key": "encryption",
											"value": "",
											"type": "text",
											"description": "Encryption (yes,offer)",
											"disabled": true
										},
										{
											"key": "directrtpsetup",
											"value": "",
											"type": "text",
											"description": "Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "callingpres",
											"value": "",
											"type": "text",
											"description": "CallerID Presentation. (Regex: /^(allowed_not_screened|allowed_passed_screen|allowed_failed_screen|allowed|prohib_not_screened|prohib_passed_screen|prohib_failed_screen|prohib|unavailable)$/)",
											"disabled": true
										},
										{
											"key": "cid_anon",
											"value": "",
											"type": "text",
											"description": "Hide CallerID for Anonymous calls. Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "ringtoneforlocalcalls",
											"value": "",
											"type": "text",
											"description": "(Regex: /^[a-zA-Z0-9._-]+$/)",
											"disabled": true
										},
										{
											"key": "ringtonefortransferredcalls",
											"value": "",
											"type": "text",
											"description": "(Regex: /^[a-zA-Z0-9._-]+$/)",
											"disabled": true
										},
										{
											"key": "cidmatchdid",
											"value": "",
											"type": "text",
											"description": "Only Allow Trunk CallerID within DID range. Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "dropanonymous",
											"value": "",
											"type": "text",
											"description": "Drop Anonymous calls: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "trustrpid",
											"value": "",
											"type": "text",
											"description": "Trust Remote-Party-ID: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "sendrpid",
											"value": "",
											"type": "text",
											"description": "Send Remote-Party-ID. (Regex: /^(rpid|pai)$/)",
											"disabled": true
										},
										{
											"key": "trust_id_outbound",
											"value": "",
											"type": "text",
											"description": "Send Caller ID in RPID for Anonymous calls: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "rpid_connectedline",
											"value": "",
											"type": "text",
											"description": "Connected Line Updates: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "rpid_update",
											"value": "",
											"type": "text",
											"description": "RPID with SIP UPDATE: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "pai_header",
											"value": "",
											"type": "text",
											"description": "(Regex: /^\\\\w{1,64}$/)",
											"disabled": true
										},
										{
											"key": "callgroup",
											"value": "",
											"type": "text",
											"description": "(Regex: /^([0-9]|[1-5][0-9]|6[0-3])(,([0-9]|[1-5][0-9]|6[0-3]))*$/)",
											"disabled": true
										},
										{
											"key": "pickupgroup",
											"value": "",
											"type": "text",
											"description": "(Regex: /^([0-9]|[1-5][0-9]|6[0-3])(,([0-9]|[1-5][0-9]|6[0-3]))*$/)",
											"disabled": true
										},
										{
											"key": "primary_trunk",
											"value": "",
											"type": "text",
											"description": "(Regex: /^[[:alnum:][:punct:][:space:]]+$/)",
											"disabled": true
										},
										{
											"key": "secondary_trunk",
											"value": "",
											"type": "text",
											"description": "(Regex: /^[[:alnum:][:punct:][:space:]]+$/)",
											"disabled": true
										},
										{
											"key": "tertiary_trunk",
											"value": "",
											"type": "text",
											"description": "(Regex: /^[[:alnum:][:punct:][:space:]]+$/)",
											"disabled": true
										},
										{
											"key": "primary_emerg_trunk",
											"value": "",
											"type": "text",
											"description": "(Regex: /^[[:alnum:][:punct:][:space:]]+$/)",
											"disabled": true
										},
										{
											"key": "secondary_emerg_trunk",
											"value": "",
											"type": "text",
											"description": "(Regex: /^[[:alnum:][:punct:][:space:]]+$/)",
											"disabled": true
										},
										{
											"key": "tertiary_emerg_trunk",
											"value": "",
											"type": "text",
											"description": "(Regex: /^[[:alnum:][:punct:][:space:]]+$/)",
											"disabled": true
										},
										{
											"key": "busylevel",
											"value": "",
											"type": "text",
											"description": "(Regex: /^\\\\d{1,2}$/)",
											"disabled": true
										},
										{
											"key": "limit_notify_play_sound",
											"value": "",
											"type": "text",
											"description": "Play sound on exceeded limit: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "limit_notify_send_email",
											"value": "",
											"type": "text",
											"description": "Send e-mail on exceeded limit: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "busyvoicemail",
											"value": "",
											"type": "text",
											"description": "Greeting-Mode: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "mailboxes",
											"value": "",
											"type": "text",
											"description": "MWI extensions (comma separated). (Regex: /^[0-9,]+$/)",
											"disabled": true
										},
										{
											"key": "vmailpager",
											"value": "",
											"type": "text",
											"description": "(Regex: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]+$/)",
											"disabled": true
										},
										{
											"key": "vmailskipinst",
											"value": "",
											"type": "text",
											"description": "Skip Instructions: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "vmailsaycid",
											"value": "",
											"type": "text",
											"description": "Say CallerID: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "vmailreview",
											"value": "",
											"type": "text",
											"description": "Allow Review mode: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "vmailoperator",
											"value": "",
											"type": "text",
											"description": "Allow Operator: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "vmailenvelope",
											"value": "",
											"description": "Play Envelope message: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "vmailhidefromdir",
											"value": "",
											"type": "text",
											"description": "Hide from directory: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "videosupport",
											"value": "",
											"type": "text",
											"description": "Video Support: Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "autoframing",
											"value": "",
											"type": "text",
											"description": "Auto-Framing (RTP Packetization): Yes=1, No=0, Not Set=2",
											"disabled": true
										},
										{
											"key": "vmaildelay",
											"value": "",
											"type": "text",
											"description": "Voicemail Delay in sec. (Regex: /^[0-9]+$/)",
											"disabled": true
										},
										{
											"key": "vmailopext",
											"value": "",
											"type": "text",
											"description": "Operator Extension. (Regex: /^[0-9]+$/)",
											"disabled": true
										},
										{
											"key": "vmailnrings",
											"value": "",
											"type": "text",
											"description": "Rings to answer. (Regex: /^\\\\d{1,3}$/)",
											"disabled": true
										},
										{
											"key": "force_codec",
											"value": "",
											"type": "text",
											"description": "Force codec on outbound trunk channel (ulaw, alaw, g722, opus, g723.1, g726, g726aal2, g729, gsm, ilbc, speex, speex16, speex32)",
											"disabled": true
										},
										{
											"key": "hd_logout_time",
											"value": "",
											"type": "text",
											"description": "Automatic Logout (Hot Desking). (Regex: /^\\\\d$/)",
											"disabled": true
										},
										{
											"key": "record_beep_ext",
											"value": "",
											"type": "text",
											"description": "Play Periodic Beep in sec. (Regex: /^\\\\d{1,3}$/)",
											"disabled": true
										},
										{
											"key": "areacode",
											"value": "",
											"type": "text",
											"description": "(Regex: /^\\\\d{1,3}$/)",
											"disabled": true
										},
										{
											"key": "busylevel_incoming",
											"value": "",
											"type": "text",
											"description": "Apply Busy Level for Incoming Calls (Yes=1, No=0, Not Set=2)",
											"disabled": true
										},
										{
											"key": "jbimpl",
											"value": "",
											"type": "text",
											"description": "Jitter Buffer (inherit, disabled, fixed, adaptive)",
											"disabled": true
										},
										{
											"key": "jbmaxsize",
											"value": "",
											"type": "text",
											"description": "Max length (ms). (Regex: /^\\\\d{1,4}$/)",
											"disabled": true
										},
										{
											"key": "jbresyncthreshold",
											"value": "",
											"type": "text",
											"description": "Re-sync threshold. (Regex: /^\\\\d{1,5}$/)",
											"disabled": true
										},
										{
											"key": "jbtargetextra",
											"value": "",
											"type": "text",
											"description": "Target extra: (Regex: /^\\\\d{1,4}$/)",
											"disabled": true
										},
										{
											"key": "show_in_dir",
											"value": "",
											"description": "Show In Directory (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "show_in_app",
											"value": "",
											"type": "text",
											"description": "Show in Desktop/Mobile App (Yes=1, No=0)",
											"disabled": true
										},
										{
											"key": "additional_config",
											"value": "",
											"type": "text",
											"description": "Additional config. (Regex: /[\\\\s\\\\S]/)",
											"disabled": true
										},
										{
											"key": "ua_autoprov",
											"value": "",
											"type": "text",
											"description": "UAD Auto Provisioning Template. (Regex: /[\\\\s\\\\S]/)",
											"disabled": true
										},
										{
											"key": "vmailskippin",
											"value": "",
											"description": "(Yes=1, No=0, Not Set=2)",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "1d515a40-7bba-4410-964b-e1208edf020e",
					"description": "Edit Extension"
				},
				{
					"name": "Deleting Extensions",
					"item": [
						{
							"name": "Deleting Extensions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "53db2792-b63b-46ce-b85f-868e556ac52d",
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Validate success response",
											"    pm.test('Success Response Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
											"    });",
											"",
											"    // Print the success message",
											"    console.log(\"Success: \" + responseBody.success);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2d40fa69-2e6b-4211-9b8e-26fcc8aa39a9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.delete&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.delete"
										},
										{
											"key": "server",
											"value": "{{Srv/Tenant-ID}}",
											"description": "Server or Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtensionIDs}}",
											"description": "IDs of extension that we want to delete. For more extensions just run folder wirh CSV file."
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "72238d9b-c0d4-41e3-8acc-66054b4af598",
					"description": "Delete Extension"
				},
				{
					"name": "Credit/Debit Balance",
					"item": [
						{
							"name": "Credit/Debit Balance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8ac6738a-bfa8-42a6-8c03-4a3a2fe0c803",
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Validate success response",
											"    pm.test('Success Response Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
											"    });",
											"",
											"    // Print the success message",
											"    console.log(\"Success: \" + responseBody.success);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "4e625278-9238-4a26-aae5-b63b73fea9ca",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.balance&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&mode=&amount=&notes=&refno=",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.balance"
										},
										{
											"key": "server",
											"value": "{{Srv/Tenant-ID}}",
											"description": "Tenant or server ID"
										},
										{
											"key": "id",
											"value": "{{ExtensionIDs}}",
											"description": "Extension ID, or list of IDs from CSV file"
										},
										{
											"key": "ext",
											"value": "{{extension}}",
											"description": "Note: You cannot supply id and ext at the same time!",
											"type": "text",
											"disabled": true
										},
										{
											"key": "mode",
											"value": "",
											"description": "Either \"credit\" or \"debit\""
										},
										{
											"key": "amount",
											"value": "",
											"description": "Amount to credit/debit onto balance (Regex: /^([0-9]+|[0-9]+\\\\.[0-9]+)$/)"
										},
										{
											"key": "notes",
											"value": "",
											"description": "Notes in regards to this update. (Regex: /^.+$/)"
										},
										{
											"key": "refno",
											"value": "",
											"description": "Reference Number (Regex: /^.+$/)"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "edb512ed-41f2-45e2-85f6-d4ebecaf3dc2",
					"description": "Credit/Debit Balance"
				},
				{
					"name": "Enhanced Services",
					"item": [
						{
							"name": "Enhanced Services",
							"id": "fb0dc837-bac0-4b53-9139-faa15c75f50a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callerid.configuration&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.callerid.configuration"
										},
										{
											"key": "server",
											"value": "{{Srv/Tenant-ID}}",
											"type": "text"
										},
										{
											"key": "id",
											"value": "{{ExtensionIDs}}",
											"type": "text"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "0c350656-718c-40bc-8e89-282253870537",
					"description": "Extension Enhanced Services"
				},
				{
					"name": "Reset Inclusive Minutes",
					"item": [
						{
							"name": "Reset Inclusive Minutes",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "36950011-9d4a-4d31-8e20-fbd3ce3a251d",
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Validate the success response",
											"    pm.test('Response Validation', function () {",
											"        pm.expect(responseBody).to.be.an('object');",
											"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
											"        // Print the success message",
											"        console.log('Success:', responseBody.success);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a287a503-3cb3-4093-8958-349e7f97a0b2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.reset_inclusive_minutes&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.reset_inclusive_minutes",
											"description": "Reset Inclusive Minutes"
										},
										{
											"key": "server",
											"value": "{{Srv/Tenant-ID}}",
											"description": "Server/Tenant ID (Required). If PBXware is not running in Tenant Mode, Tenant ID should be set to 1.",
											"type": "text"
										},
										{
											"key": "id",
											"value": "{{ExtensionIDs}}",
											"description": "Extension ID. Use CSV files for list of extensions.",
											"type": "text"
										},
										{
											"key": "ext",
											"value": "{{extension}}",
											"description": "Extension number. Note: You cannot supply id and ext at the same time!",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "b3817fc6-faa2-429d-82b0-1cd69a2594bd",
					"description": "Reset Inclusive Minutes"
				},
				{
					"name": "Delete Voicemail",
					"item": [
						{
							"name": "Voicemail Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1e8511e6-dee7-4ab5-b2e2-94192907b4e7",
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Validate the success response",
											"    pm.test('Response Validation', function () {",
											"        pm.expect(responseBody).to.be.an('object');",
											"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
											"        // Print the success message",
											"        console.log('Success:', responseBody.success);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "6b9709d1-ad3f-4479-b960-1fc8126ab95f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.voicemail.delete&server={{Srv/Tenant-ID}}&ext={{extension}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.voicemail.delete",
											"description": "Delete extensions voicemail."
										},
										{
											"key": "server",
											"value": "{{Srv/Tenant-ID}}",
											"description": "Server/Tenant ID (Required). If PBXware is not running in Tenant Mode, Tenant ID should be set to 1."
										},
										{
											"key": "ext",
											"value": "{{extension}}",
											"description": "Extension number (Required)",
											"type": "text"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "6304c84c-4c29-404a-83f1-7ccc2629e212",
					"description": "Delete Extension Voicemails.\n\n**Warning** - This API call will delete ALL voicemails for the given extension!"
				},
				{
					"name": "Enhanced Services",
					"item": [
						{
							"name": "Caller ID",
							"item": [
								{
									"name": "Caller ID set",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "ccde3e43-c875-467f-80a9-d59f0ee15821",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callerid.set&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callerid.set"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "",
													"description": "Argument state can have one of these: yes or no."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Caller ID get",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c8e5a51-92d1-4126-941e-c0898a731d16",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "cd9c8802-92f8-4275-a522-4eebe704b84c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callerid.get&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callerid.get"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Caller ID set OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "0f6d7bc7-b7c0-4e4f-ad50-75b5034cdf11",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callerid.set_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=yes",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callerid.set_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "yes",
													"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Caller ID get OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c8e5a51-92d1-4126-941e-c0898a731d16",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "f8ea95a7-14c9-41cf-a763-e0ce02e2437a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callerid.get_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callerid.get_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Caller ID configuration",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the response structure",
													"    pm.test('Response Validation', function () {",
													"        pm.expect(responseBody).to.be.an('object');",
													"",
													"        // Validate the \"callerid\" field",
													"        pm.test('CallerID Field Validation', function () {",
													"            pm.expect(responseBody).to.have.property('callerid').that.is.a('string');",
													"        });",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "7975a4e9-6179-4700-b4b0-a0ffae4dfa12",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callerid.configuration&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callerid.configuration"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Caller ID Edit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the \"success\" field",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
													"        pm.expect(responseBody.success).to.include('Caller ID: ');",
													"    });",
													"",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "1ebc904d-f1f4-4e43-9316-5db37e17173d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callerid.edit&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&callerid=&emergencycid=",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callerid.edit"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "callerid",
													"value": "",
													"description": "Specify caller ID to be set. (Required)"
												},
												{
													"key": "emergencycid",
													"value": "",
													"description": "Emergency CallerID."
												},
												{
													"key": "anums",
													"value": "",
													"description": "Allowed list of CallerIDs. (Regex: /^(:|(([\\\\+]?[\\\\d\\\\s])+))+$/)",
													"disabled": true
												},
												{
													"key": "alabels",
													"value": "",
													"description": "Labels for Allowed list of CallerIDs. (Regex: /^(:|([\\\\+\\\\w\\\\s]+(\\\\s*<[\\\\+\\\\d]+>)?))+$/)",
													"type": "text",
													"disabled": true
												},
												{
													"key": "acodes",
													"value": "",
													"description": "Short Codes for Allowed list of CallerIDs. (Regex: /^(([\\\\d]?(:([\\\\d])?)+)|[\\\\d])$/)",
													"type": "text",
													"disabled": true
												},
												{
													"key": "trunks",
													"value": "",
													"description": "Specify list of trunk names separated by colon :. (Regex: /^(:|[a-zA-Z0-9_.-]+)+$/)",
													"type": "text",
													"disabled": true
												},
												{
													"key": "tcallerids",
													"value": "",
													"description": "Specify list of caller ids for specified trunks.. (Regex: /^(:|([\\\\+\\\\w\\\\s]+(\\\\s*<[\\\\+\\\\d]+>)?))+$/)",
													"type": "text",
													"disabled": true
												},
												{
													"key": "tprivacies",
													"value": "",
													"description": "Specify list of privacies separated by colon : (0 â‡’ anonymous, 1 â‡’ anonymous_id, 2 â‡’ anonymous_number, 3 â‡’ anonymous_number_id, 4 â‡’ none).",
													"type": "text",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "0886c7ac-22e9-4e74-95b1-d282a3f111aa"
						},
						{
							"name": "Call Filters & Blocking",
							"item": [
								{
									"name": "Call Filters & Blocking set",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "33115b9d-f36b-48bc-9812-ddbf9411706f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callfilters.set&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=yes",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callfilters.set"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "yes",
													"description": "Argument state can have one of these: yes or no."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Call Filters & Blocking get",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c8e5a51-92d1-4126-941e-c0898a731d16",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "745ec21c-dc60-4a23-b020-cff31f8d9e28",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callfilters.get&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callfilters.get"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Call Filters & Blocking set OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "8bd5c547-d04f-47a8-a668-2b8c6198c10d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callfilters.set_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=1",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callfilters.set_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "1",
													"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Call Filters & Blocking get OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c8e5a51-92d1-4126-941e-c0898a731d16",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "b208f642-12cb-46e9-8700-67285d26fb53",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callerid.get_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callerid.get_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Call Filters & Blocking configuration",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the \"callers,\" \"dtypes,\" and \"destinations\" fields",
													"    pm.test('Callers Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('callers').that.is.an('array');",
													"        responseBody.callers.forEach(function (caller) {",
													"            pm.expect(caller).to.be.a('string');",
													"        });",
													"    });",
													"",
													"    pm.test('Dtypes Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('dtypes').that.is.an('array');",
													"        responseBody.dtypes.forEach(function (dtype) {",
													"            pm.expect(dtype).to.be.a('string');",
													"        });",
													"    });",
													"",
													"    pm.test('Destinations Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('destinations').that.is.an('array');",
													"        responseBody.destinations.forEach(function (destination) {",
													"            pm.expect(destination).to.be.a('string');",
													"        });",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "bbc6bed6-5e52-46bb-8a9b-dd76f086f636",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callfilters.configuration&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callfilters.configuration"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Call Filters & Blocking Edit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the \"success\" and \"callfilters\" fields",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
													"        pm.expect(responseBody.success).to.equal('Call Filters & Blocking.'); // Adjust expected value if needed",
													"    });",
													"",
													"    pm.test('Call Filters Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('callfilters').that.is.a('string');",
													"        pm.expect(responseBody.callfilters).to.equal('OK'); // Adjust expected value if needed",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d4f32324-ada4-43a0-b3c2-646819272062",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callfilters.edit&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&callers=anonymous,&dtypes=not in service,&destinations=0,&telemarketer=1",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callfilters.edit",
													"description": "`callers`, `dtypes` and `destinations` lists must be same size or error will be returned, cause they define list of records required."
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "callers",
													"value": "anonymous,",
													"description": "List of caller numbers separated with comma ,. This list must start with anonymous value for anonymous callers. (Required) "
												},
												{
													"key": "dtypes",
													"value": "not in service,",
													"description": "Destination types list separated with comma ,. Following values are possible: call forward number|no answer|busy|voicemail|not in service (Required)"
												},
												{
													"key": "destinations",
													"value": "0,",
													"description": "List of destinations separated with comma ,. (numbers only) (Required)"
												},
												{
													"key": "telemarketer",
													"value": "1",
													"description": "Telemarketer block yes or no (1 or 0)"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "8c4ee661-4094-49c6-b433-c25387610295"
						},
						{
							"name": "Call Screening",
							"item": [
								{
									"name": "Call Screening set",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "427667aa-e566-425b-a2f8-4e4d9931a190",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callscreening.set&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=yes",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callscreening.set"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "yes",
													"description": "Argument state can have one of these: yes or no."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Call Screening get",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c8e5a51-92d1-4126-941e-c0898a731d16",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "2cb5614a-0418-4dbb-9313-90ab81af764b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callscreening.get&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callscreening.get"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Call Screening set OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "ad085838-c1a9-4310-94c4-bab43d063fe6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callscreening.set_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=1",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callscreening.set_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "1",
													"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Call Screening get OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c8e5a51-92d1-4126-941e-c0898a731d16",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "396f3e86-9bab-40f0-8f8e-9d01dd0a7fff",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callscreening.get_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callscreening.get_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Call Screening configuration",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the response structure",
													"    pm.test('Response Validation', function () {",
													"        // Check if timeout is a number",
													"        pm.expect(responseBody.timeout).to.be.a('string');",
													"        ",
													"        // Check if dopts, dtype, replacecid, preamble, greeting, pausebeforerec, recordlen, greetingwithname, lastd, and voicemail are strings",
													"        pm.expect(responseBody.dopts).to.be.a('string');",
													"        pm.expect(responseBody.dtype).to.be.a('string');",
													"        pm.expect(responseBody.replacecid).to.be.a('string');",
													"        pm.expect(responseBody.preamble).to.be.a('string');",
													"        pm.expect(responseBody.greeting).to.be.a('string');",
													"        pm.expect(responseBody.pausebeforerec).to.be.a('string');",
													"        pm.expect(responseBody.recordlen).to.be.a('string');",
													"        pm.expect(responseBody.greetingwithname).to.be.a('string');",
													"        pm.expect(responseBody.lastd).to.be.a('string');",
													"        pm.expect(responseBody.voicemail).to.be.a('string');",
													"",
													"        // Check if destionations and delays are arrays with the same length",
													"        pm.expect(responseBody.destinations).to.be.an('array');",
													"        pm.expect(responseBody.delays).to.be.an('array');",
													"        pm.expect(responseBody.destinations.length).to.eql(responseBody.delays.length);",
													"",
													"        // Check if suspends is either an empty string, an array, or an object",
													"        pm.expect(responseBody.suspends).to.satisfy((suspends) => {",
													"            return typeof suspends === 'string' || Array.isArray(suspends) || typeof suspends === 'object';",
													"        });",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "7d1b0497-d9f1-49ba-858e-688f24b67b91",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callscreening.configuration&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callscreening.configuration"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Call Screening Edit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the response structure",
													"    pm.test('Response Validation', function () {",
													"        // Check if success is a string",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"        ",
													"        // Check if callscreening is a string",
													"        pm.expect(responseBody.callscreening).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "0c3ffd75-04b5-4d87-8f29-38bc4364861c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callscreening.edit&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&destinations=422&delays=0&suspends=0&recordlen=30",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callscreening.edit",
													"description": "`callers`, `dtypes` and `destinations` lists must be same size or error will be returned, cause they define list of records required."
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "destinations",
													"value": "422",
													"description": "List of destinations separated with comma ,. (Required). (Regex: /^(,|\\\\d+)+$/)"
												},
												{
													"key": "delays",
													"value": "0",
													"description": "List of delays separated with comma ,. (Required). (Regex: /^(,|\\\\d+)+$/)"
												},
												{
													"key": "suspends",
													"value": "0",
													"description": "List of suspend values (0 or 1) separated with comma ,. (Required). (Regex: /^(,|0|1)+$/)"
												},
												{
													"key": "recordlen",
													"value": "30",
													"description": "Max recording length (sec). (Required). (Regex: /^\\\\d+$/)"
												},
												{
													"key": "timeout",
													"value": "15",
													"description": "Timeout in seconds.",
													"type": "text",
													"disabled": true
												},
												{
													"key": "dopts",
													"value": "Tr",
													"description": "Dial options (trT).",
													"type": "text",
													"disabled": true
												},
												{
													"key": "dtypes",
													"value": "1",
													"description": "Dial type, 0 or 1 (simultaneous or sequential).",
													"type": "text",
													"disabled": true
												},
												{
													"key": "replacecid",
													"value": "888999",
													"description": "Replace Caller ID. (Regex: /^\\\\d+$/)",
													"type": "text",
													"disabled": true
												},
												{
													"key": "preamble",
													"value": "1",
													"description": "Preamble. (Regex: /^\\\\d+$/)",
													"type": "text",
													"disabled": true
												},
												{
													"key": "greeting",
													"value": "Test",
													"description": "Greeting. (Regex: /^.+$/).",
													"type": "text",
													"disabled": true
												},
												{
													"key": "pausebeforerec",
													"value": "5",
													"description": "Pause before recording (sec). (Regex: /^([0-9]|10)$/)",
													"type": "text",
													"disabled": true
												},
												{
													"key": "greetingwithname",
													"value": "no",
													"description": "Greeting with name. (Regex: /^(yes|no)$/)",
													"type": "text",
													"disabled": true
												},
												{
													"key": "lastd",
													"value": "425",
													"description": "Last destination. (Regex: /^\\\\d+$/)",
													"type": "text",
													"disabled": true
												},
												{
													"key": "voicemail",
													"value": "1",
													"description": "Last destination is voicemail. (Regex: /^(0|1)$/)",
													"type": "text",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "67e4a6f2-5fe0-4733-8fa9-20902d01b2b1"
						},
						{
							"name": "Do Not Disturbe",
							"item": [
								{
									"name": "Do Not Disturb set",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "0bbb73fa-2392-4ca3-affc-7081a95de04f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.dnd.set&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=yes",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.dnd.set"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "yes",
													"description": "Argument state can have one of these: yes or no."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Do Not Disturb get",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c8e5a51-92d1-4126-941e-c0898a731d16",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "181b4072-96a4-4644-b603-87fafbc74a94",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.dnd.get&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.dnd.get"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Do Not Disturb set OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "188db38c-3e3b-489a-9001-bc036d9434cb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.dnd.set_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=1",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.dnd.set_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "1",
													"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Do Not Disturb get OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c8e5a51-92d1-4126-941e-c0898a731d16",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "a51a5d77-8d0a-4aff-acd3-f1f658bd4a82",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.dnd.get_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.dnd.get_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Do Not Disturb configuration",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the response structure",
													"    pm.test('Response Validation', function () {",
													"        // Check if dnd is a number",
													"        pm.expect(responseBody.dnd).to.be.a('string');",
													"        ",
													"        // Check if dst is a string",
													"        pm.expect(responseBody.dst).to.be.a('string');",
													"        ",
													"        // Check if dsttype is a string",
													"        pm.expect(responseBody.dsttype).to.be.a('string');",
													"        ",
													"        // Check if duration is either null or a number",
													"        pm.expect(responseBody.duration).to.satisfy(function (value) {",
													"            return value === null || typeof value === 'string';",
													"        });",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "b0efe3c2-0a09-4b96-81d5-0dc8f712c93c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.dnd.configuration&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.dnd.configuration"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Do Not Disturb Edit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the response structure",
													"    pm.test('Response Validation', function () {",
													"        // Check if success is a string",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"        ",
													"        // Check if dnd is a string",
													"        pm.expect(responseBody.dnd).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "6faee85f-c0f0-4410-8a5c-cf713b827f3d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.dnd.edit&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&dnd=2&dst=425&dsttype=voicemail&duration=1",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.dnd.edit",
													"description": "`callers`, `dtypes` and `destinations` lists must be same size or error will be returned, cause they define list of records required."
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "dnd",
													"value": "2",
													"description": "Set dnd temporary or not active (0, 1 or 2 for Not Active, Temporary and Permanent). (Regex: /^(0|1|2)$/)"
												},
												{
													"key": "dst",
													"value": "425",
													"description": "Destination value (numbers only). (Regex: /^\\\\d+$/)"
												},
												{
													"key": "dsttype",
													"value": "voicemail",
													"description": "Destination type voicemail or call forward. (Regex: /^(voicemail|call forward)$/)"
												},
												{
													"key": "duration",
													"value": "1",
													"description": "Duration in hours (numbers only)"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "b95e1b9d-f59d-49d3-8c60-981999d0244f"
						},
						{
							"name": "Call Pickup",
							"item": [
								{
									"name": "Call Pickup set",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "ca6f4162-b8e4-4e82-ad09-e0f48d4ddde6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callpickup.set&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=pin",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callpickup.set"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "pin",
													"description": "Argument state can have one of these: yes, no or pin."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Call Pickup get",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c8e5a51-92d1-4126-941e-c0898a731d16",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "2ac82840-4b7d-400b-b006-0652001086be",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callpickup.get&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callpickup.get"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Call Pickup set OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "3c225fb3-6da1-4c17-9469-564bd01a625b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callpickup.set_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=1",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callpickup.set_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "1",
													"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Call Pickup get OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c8e5a51-92d1-4126-941e-c0898a731d16",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "c95df799-278e-451e-8d2e-40190ba7071d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callpickup.get_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callpickup.get_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "5db9b566-1a59-4eac-ba83-5b66c3674000"
						},
						{
							"name": "Last Caller",
							"item": [
								{
									"name": "Last Caller set",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "141336f4-3eff-4d64-9e98-88af5f435784",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.lastcaller.set&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=pin",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.lastcaller.set"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "pin",
													"description": "Argument state can have one of these: yes, no or pin."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Last Caller get",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c8e5a51-92d1-4126-941e-c0898a731d16",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "54926143-9a79-4fb4-af35-4c068cdcc59d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.lastcaller.get&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.lastcaller.get"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Last Caller set OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "b25b3d59-ed32-4f1b-8572-052af5441d48",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.lastcaller.set_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=1",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.lastcaller.set_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "1",
													"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Last Caller get OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c8e5a51-92d1-4126-941e-c0898a731d16",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "259502d6-ec65-4129-bbd0-a242970ddc67",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.lastcaller.get_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.lastcaller.get_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "0dc2b1c5-dd27-4c49-8dbc-cdbd81339183"
						},
						{
							"name": "Call Forwarding",
							"item": [
								{
									"name": "Call Forwarding set",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "ff46c839-ed61-4b5a-9f0a-be2d9ca82446",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callfwd.set&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=pin",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callfwd.set"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "pin",
													"description": "Argument state can have one of these: yes, no or pin"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Call Forwarding get",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c8e5a51-92d1-4126-941e-c0898a731d16",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "cc6fb005-b293-4a89-b787-47e29f8b5731",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callfwd.get&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callfwd.get"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Call Forwarding set OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "606c327f-3a50-4952-bf7d-cd6a291877c2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callfwd.set_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=1",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callfwd.set_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "1",
													"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Call Forwarding get OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c8e5a51-92d1-4126-941e-c0898a731d16",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "dda84a2e-887a-47da-ad56-bce4c62e3a83",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callfwd.get_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callfwd.get_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Call Forwarding configuration",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the response structure",
													"    pm.test('Response Validation', function () {",
													"        // Check if enabled is a string",
													"        pm.expect(responseBody.enabled).to.be.a('string');",
													"        ",
													"        // Check if destinations is a string",
													"        pm.expect(responseBody.destinations).to.be.a('string');",
													"        ",
													"        // Check if timeouts is a string",
													"        pm.expect(responseBody.timeouts).to.be.a('string');",
													"        ",
													"        // Check if play is a number",
													"        pm.expect(responseBody.play).to.be.a('number');",
													"        ",
													"        // Check if cid is a number",
													"        pm.expect(responseBody.cid).to.be.a('number');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "a272ec00-0723-44e2-ab0a-395416514653",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callfwd.configuration&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callfwd.configuration"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Call Forwarding Edit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the response structure",
													"    pm.test('Response Validation', function () {",
													"        // Check if success is a string",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"        ",
													"        // Check if callfwd is a string",
													"        pm.expect(responseBody.callfwd).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "fc7738f9-ea2a-4a43-bfbb-2f743794eb88",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callfwd.edit&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&enabled=unconditional,busy,no answer&uncond_dests=422,423,424&busy_dests=424,425&noansw_dests=423&unavail_dests=424&uncond_timeouts=15&busy_timeouts=15&noansw_timeouts=15&unavail_timeouts=20&play=0&cid=1",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.callfwd.edit",
													"description": "`callers`, `dtypes` and `destinations` lists must be same size or error will be returned, cause they define list of records required."
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "enabled",
													"value": "unconditional,busy,no answer",
													"description": "Comma , separated list of enabled call forward conditions, Following values are accepted: unconditional|busy|no answer|line unavailable. (Regex: /^(,|\\\\d+)+$/)"
												},
												{
													"key": "uncond_dests",
													"value": "422,423,424",
													"description": "Comma , separated list of unconditional destinations. (Regex: /^(,|\\\\d+)+$/)"
												},
												{
													"key": "busy_dests",
													"value": "424,425",
													"description": "Comma , separated list of busy destinations. (Regex: /^(,|\\\\d+)+$/)"
												},
												{
													"key": "noansw_dests",
													"value": "423",
													"description": "Comma , separated list of no answer destinations. (Regex: /^(,|\\\\d+)+$/)"
												},
												{
													"key": "unavail_dests",
													"value": "424",
													"description": "Comma , separated list of unavailable destinations. (Regex: /^(,|\\\\d+)+$/)"
												},
												{
													"key": "uncond_timeouts",
													"value": "15",
													"description": "Comma , separated list of unconditional timeouts. (Regex: /^(,|\\\\d+)+$/)"
												},
												{
													"key": "busy_timeouts",
													"value": "15",
													"description": "Comma , separated list of busy timeouts. (Regex: /^(,|\\\\d+)+$/)"
												},
												{
													"key": "noansw_timeouts",
													"value": "15",
													"description": "Comma , separated list of no answer timeouts. (Regex: /^(,|\\\\d+)+$/)"
												},
												{
													"key": "unavail_timeouts",
													"value": "20",
													"description": "Comma , separated list of unavailable timeouts. (Regex: /^(,|\\\\d+)+$/)"
												},
												{
													"key": "play",
													"value": "0",
													"description": "Play enable disable 1 or 0. (Regex: /^(0|1)$/)"
												},
												{
													"key": "cid",
													"value": "1",
													"description": "Caller ID enable disable 1 or 0. (Regex: /^(0|1)$/)"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "9bfdb770-a754-4c84-9cac-6d1d0c9f4852"
						},
						{
							"name": "Follow Me",
							"item": [
								{
									"name": "Follow Me set",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "3b61f75b-b724-44b3-961b-3adf935b63cb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.followme.set&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=yes",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.followme.set"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "yes",
													"description": "Argument state can have one of these: yes, no."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Follow Me get",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c8e5a51-92d1-4126-941e-c0898a731d16",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "91665091-e055-495e-8fcf-2a1286058340",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.followme.get&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.followme.get"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Follow Me set OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "adfc13df-cb1c-4d4f-b0a2-10a89a06215d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.followme.set_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=1",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.followme.set_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "1",
													"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Follow Me get OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c8e5a51-92d1-4126-941e-c0898a731d16",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "24240d22-3c1b-4f94-8d2f-8b991bc2bdba",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.followme.get_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.followme.get_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Follow Me configuration",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the response structure",
													"    pm.test('Response Validation', function () {",
													"        // Check if destinations is an array",
													"        pm.expect(responseBody.destinations).to.be.an('array');",
													"        // Check if timeouts is an array",
													"        pm.expect(responseBody.timeouts).to.be.an('array');",
													"        // Check if dopts is a string",
													"        pm.expect(responseBody.dopts).to.be.a('string');",
													"        // Check if lastd is a string",
													"        pm.expect(responseBody.lastd).to.be.a('string');",
													"        // Check if voicemail is a string",
													"        pm.expect(responseBody.voicemail).to.be.a('string');",
													"        // Check if confirm_calls is a string",
													"        pm.expect(responseBody.confirm_calls).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "f382bc01-92dd-4dfc-bcc5-92938492a61b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.followme.configuration&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.followme.configuration"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Follow Me Edit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the response structure",
													"    pm.test('Response Validation', function () {",
													"        // Check if success is a string",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"        ",
													"        // Check if followme is a string",
													"        pm.expect(responseBody.followme).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "a726a2ad-bf06-4ee6-a7b7-fd8af8a6cf28",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.followme.edit&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&destinations=422,423&timeouts=10,15&dopts=Tr&lastd=425&voicemail=1&confirm_calls=0",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.followme.edit",
													"description": "`callers`, `dtypes` and `destinations` lists must be same size or error will be returned, cause they define list of records required."
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "destinations",
													"value": "422,423",
													"description": "Comma separated , list of destinations (Required). Regex: /^(,|\\\\d+)+$/)"
												},
												{
													"key": "timeouts",
													"value": "10,15",
													"description": "Comma separated , list of timeouts (Required). (Regex: /^(,|\\\\d+)+$/)"
												},
												{
													"key": "dopts",
													"value": "Tr",
													"description": "Dial options (trT). (Regex: /^[tTr]+$/)"
												},
												{
													"key": "lastd",
													"value": "425",
													"description": "Last destination. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "voicemail",
													"value": "1",
													"description": "Voicemail yes or no (1 or 0). (Regex: /^(0|1)$/)"
												},
												{
													"key": "confirm_calls",
													"value": "0",
													"description": "Voicemail yes or no (1 or 0). (Regex: /^(0|1)$/)"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "a5ff7d35-a5c6-4401-b0fc-3aaf283eaaf2"
						},
						{
							"name": "Instant Recording",
							"item": [
								{
									"name": "Instant Recording set",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "80073d6d-c4f3-4ec9-acef-843a513753d6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.instrecord.set&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=yes",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.instrecord.set"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "yes",
													"description": "Argument state can have one of these: yes, no."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Instant Recording get",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c8e5a51-92d1-4126-941e-c0898a731d16",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "56668953-64b6-4030-8a2d-81d76da9ddcd",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.instrecord.get&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.instrecord.get"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Instant Recording set OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "593f64bb-3218-41b9-af8f-ae2786ba0c4d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.instrecord.set_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=1",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.instrecord.set_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "1",
													"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Instant Recording get OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c8e5a51-92d1-4126-941e-c0898a731d16",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "718f82f4-cd91-4e7c-927b-6fdfc5cda329",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.instrecord.get_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.instrecord.get_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Instant Recording configuration",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the response structure",
													"    pm.test('Response Validation', function () {",
													"        // Check if silent is a string",
													"        pm.expect(responseBody.silent).to.be.a('string');",
													"        // Check if emailrec is a string",
													"        pm.expect(responseBody.emailrec).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "6e8910d6-4f19-4bab-9247-6607bba9fd1d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.instrecord.configuration&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.instrecord.configuration"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Instant Recording Edit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the response structure",
													"    pm.test('Response Validation', function () {",
													"        // Check if success is a string",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"        // Check if instrecord is a string",
													"        pm.expect(responseBody.instrecord).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "26c598c7-3d34-43b3-a36d-5b34357f29a4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.instrecord.edit&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&silent=0&emailrec=0",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.instrecord.edit",
													"description": "`callers`, `dtypes` and `destinations` lists must be same size or error will be returned, cause they define list of records required."
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "silent",
													"value": "0",
													"description": "Silent (0,1) (Required). (Regex: /^(0|1)$/)"
												},
												{
													"key": "emailrec",
													"value": "0",
													"description": "E-mail recording (0,1) (Required). (Regex: /^(0|1)$/)"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "b5fb65f3-310e-43f7-b32c-8441824ca9d9"
						},
						{
							"name": "Remote Access",
							"item": [
								{
									"name": "Remote Access set",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "f71cf36c-970e-44c6-b92c-90ad08fffc2e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.remoteaccess.set&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=yes",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.remoteaccess.set"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "yes",
													"description": "Argument state can have one of these: yes or no"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Remote Access get",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c8e5a51-92d1-4126-941e-c0898a731d16",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "7a217dec-9a20-4f69-a2a1-ecc39b16b341",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.remoteaccess.get&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.remoteaccess.get"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Remote Access set OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "503b4f9b-54a5-4a0a-bb30-3e4e36ad40aa",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.remoteaccess.set_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=1",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.remoteaccess.set_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "1",
													"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Remote Access get OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c8e5a51-92d1-4126-941e-c0898a731d16",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "0c62c4da-9f9a-424d-a7fe-9ef1eefd291d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.remoteaccess.get_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.remoteaccess.get_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Remote Access configuration",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the response structure",
													"    pm.test('Response Validation', function () {",
													"        pm.expect(responseBody).to.be.an('object');",
													"        pm.expect(responseBody).to.have.property('callerids').that.is.an('array');",
													"        pm.expect(responseBody).to.have.property('pins').that.is.an('array');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "e94a6d48-3457-4e6e-ada1-6fd185cabe7f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.remoteaccess.configuration&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.remoteaccess.configuration"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Remote Access Edit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the response structure",
													"    pm.test('Response Validation', function () {",
													"        pm.expect(responseBody).to.be.an('object');",
													"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
													"        pm.expect(responseBody).to.have.property('remoteaccess').that.is.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "835989b2-db1b-4a8f-8967-73038b30bb5d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.remoteaccess.edit&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&callerids=123456,789654&pins=0,1&requirepin=1&timeout=99999999&dopts=t",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.remoteaccess.edit",
													"description": "Fields callerids names and pins not correspond to each other."
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "callerids",
													"value": "123456,789654",
													"description": "Comma separated , list of Caller IDâ€™s (Required). (Regex: /^(,|\\\\d+)+$/)"
												},
												{
													"key": "pins",
													"value": "0,1",
													"description": "Comma separated , list of PINâ€™s - yes or no 1 or 0 (Required). (Regex: /^(,|0|1)+$/)"
												},
												{
													"key": "requirepin",
													"value": "1",
													"description": "Require Extension PIN 1 or 0 (Required). (Regex: /^(0|1)$/)"
												},
												{
													"key": "timeout",
													"value": "99999999",
													"description": "Timeout in seconds (Optional). (Regex: /^\\\\d+$/)"
												},
												{
													"key": "dopts",
													"value": "t",
													"description": "Dial options (tTr) (Optional). (Regex: /^[tTr]+$/)"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "53f877e3-4aa1-4214-960a-c08729fd51bc"
						},
						{
							"name": "Phone Callback",
							"item": [
								{
									"name": "Phone Callback set",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "18d235e4-cc97-49c3-aaac-590a368e4f3c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.phonecallback.set&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=yes",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.phonecallback.set"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "yes",
													"description": "Argument state can have one of these: yes, no or pin."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Phone Callback get",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c8e5a51-92d1-4126-941e-c0898a731d16",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "f3c53614-445a-462c-b9dd-acdaddf31592",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.phonecallback.get&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.phonecallback.get"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Phone Callback set OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "f84045cb-c5dd-46fd-ac45-19541be45833",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.phonecallback.set_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=1",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.phonecallback.set_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "1",
													"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Phone Callback get OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c8e5a51-92d1-4126-941e-c0898a731d16",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "aa905104-8372-485e-97bd-d6d0b30b83e1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.phonecallback.get_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.phonecallback.get_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Phone Callback configuration",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the response structure",
													"    pm.test('Response Validation', function () {",
													"        pm.expect(responseBody).to.be.an('object');",
													"        pm.expect(responseBody).to.have.property('callerids').that.is.an('array');",
													"        pm.expect(responseBody).to.have.property('numbers').that.is.an('array');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "ac7b0da5-36aa-4c7b-9a6b-7319e5be67d6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.phonecallback.configuration&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.phonecallback.configuration"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Phone Callback Edit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the response structure",
													"    pm.test('Response Validation', function () {",
													"        // Check if success is a string",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"        // Check if instrecord is a string",
													"        pm.expect(responseBody.instrecord).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "51c2cf10-dff2-4132-8119-274583c7030a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.phonecallback.edit&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&callerids=&numbers=",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.phonecallback.edit"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "callerids",
													"value": "",
													"description": "Comma separated , list of Caller IDâ€™s (Required)"
												},
												{
													"key": "numbers",
													"value": "",
													"description": "Comma separated , list of numbers (Required)"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "cdf1a15a-06cb-4cf2-bf3a-d52554288f31"
						},
						{
							"name": "Group Hunt",
							"item": [
								{
									"name": "Group Hunt set",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "69b72535-473c-406e-9ea4-33f827b4dc2d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.grouphunt.set&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=yes",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.grouphunt.set"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "yes",
													"description": "Argument state can have one of these: yes or no."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Group Hunt get",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c8e5a51-92d1-4126-941e-c0898a731d16",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "483a6246-2ea9-4600-8d25-1f453d6ea731",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.grouphunt.get&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.grouphunt.get"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Group Hunt set OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "0a79dc2c-1a3b-4c62-9777-c562d90e63a8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.grouphunt.set_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=1",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.grouphunt.set_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "1",
													"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Group Hunt get OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c8e5a51-92d1-4126-941e-c0898a731d16",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "9b54a2cb-3efb-4ac9-be8a-3c45878272e9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.grouphunt.get_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.grouphunt.get_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Group Hunt configuration",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the response structure",
													"    pm.test('Response Validation', function () {",
													"        pm.expect(responseBody).to.have.property('destinations').that.is.an('array');",
													"        pm.expect(responseBody).to.have.property('delays').that.is.an('array');",
													"        pm.expect(responseBody).to.have.property('suspends').that.satisfy(function(value) {",
													"            return Array.isArray(value) || typeof value === 'string';",
													"        });",
													"        pm.expect(responseBody).to.have.property('dopts').that.is.a('string');",
													"        pm.expect(responseBody).to.have.property('lastd').that.is.a('string');",
													"        pm.expect(responseBody).to.have.property('timeout').that.is.a('string');",
													"        pm.expect(responseBody).to.have.property('voicemail').that.is.a('string');",
													"        pm.expect(responseBody).to.have.property('confirmcalls').that.is.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "9544d91c-cdc8-4905-a2d2-ff3855479195",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.grouphunt.configuration&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.grouphunt.configuration"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Group Hunt Edit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the response structure",
													"    pm.test('Response Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
													"        pm.expect(responseBody).to.have.property('grouphunt').that.is.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "ba1bafed-7ec2-452d-b44a-97442ecbb39d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.grouphunt.edit&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&destinations=424,425&delays=10,20&suspends=1,0&timeout=20&dopts=t&lastd=425&voicemail=1&confirmcalls=0",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.grouphunt.edit",
													"description": "Fields destinations, delays and suspends lists must match in size"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "destinations",
													"value": "424,425",
													"description": "Comma separated , list of destinations (Required). (Regex: /^(,|\\\\d+)+$/)"
												},
												{
													"key": "delays",
													"value": "10,20",
													"description": "Comma separated , list of delays (Required). (Regex: /^(,|\\\\d+)+$/)"
												},
												{
													"key": "suspends",
													"value": "1,0",
													"description": "Comma separated , list of suspends (Required). (Regex: /^(,|\\\\d+)+$/)"
												},
												{
													"key": "timeout",
													"value": "20",
													"description": "Timeout in seconds. (Regex: /^\\\\d+$/)."
												},
												{
													"key": "dopts",
													"value": "t",
													"description": "Dial options (tTr). (Regex: /^[tTr]+$/)"
												},
												{
													"key": "lastd",
													"value": "425",
													"description": "Last destination. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "voicemail",
													"value": "1",
													"description": "Voicemail 1 or 0"
												},
												{
													"key": "confirmcalls",
													"value": "0",
													"description": "Confirm calls 1 or 0"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "80bcdc38-a380-4681-af4c-b42f63d3a395"
						},
						{
							"name": "Mobile Numbers",
							"item": [
								{
									"name": "Mobile Numbers set",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "c59b42c7-2bb5-47e1-98f1-e50b0f4bc4f1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.mobilenumbers.set&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=yes",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.mobilenumbers.set"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "yes",
													"description": "Argument state can have one of these: yes or no."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Mobile Numbers get",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c8e5a51-92d1-4126-941e-c0898a731d16",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d8ebba5c-05f0-475e-bdee-c37a74e56f1e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.mobilenumbers.get&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.mobilenumbers.get"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Mobile Numbers set OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "73727a69-0c30-4d98-a52a-a8728c456da5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.mobilenumbers.set_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=1",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.mobilenumbers.set_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "1",
													"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Mobile Numbers get OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c8e5a51-92d1-4126-941e-c0898a731d16",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "12ce387a-dba7-4f78-98ea-0e75be634a9c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.mobilenumbers.get_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.mobilenumbers.get_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Mobile Numbers configuration",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the response structure",
													"    pm.test('Response Validation', function () {",
													"        // Check if the response is an array or an object",
													"        pm.expect(responseBody).to.satisfy(function (body) {",
													"            return Array.isArray(body) || (typeof body === 'object' && 'mobiles' in body && 'labels' in body);",
													"        }, 'Response body should be an array or an object with \"mobiles\" and \"labels\" fields.');",
													"",
													"        // If the response is an object, check specific fields",
													"        if (typeof responseBody === 'object' && 'mobiles' in responseBody && 'labels' in responseBody) {",
													"            pm.expect(responseBody.mobiles).to.be.an('array'); // Check if numbers is an array",
													"            pm.expect(responseBody.labels).to.be.an('array'); // Check if labels is an array",
													"            // Add more property checks as needed",
													"        }",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "8ba58c7a-5aa8-4fb1-b5cb-e8139abd1417",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.mobilenumbers.configuration&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.mobilenumbers.configuration"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Mobile Numbers Edit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the response structure",
													"    pm.test('Response Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
													"        pm.expect(responseBody).to.have.property('mobilenumbers').that.is.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "a9fd4115-b7ee-46b2-88f5-b2f5cb7307d7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.mobilenumbers.edit&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&mobiles=21312312443345,12312323123&labels=Test,Test2",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.mobilenumbers.edit",
													"description": "\"Fields mobiles, labels and suspends lists must match in size.\""
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "mobiles",
													"value": "21312312443345,12312323123",
													"description": "Comma separated , list of mobile numbers (Required). (Regex: /^(,|\\\\d+)+$/)"
												},
												{
													"key": "labels",
													"value": "Test,Test2",
													"description": "Comma separated , list of labels (Required). (Regex: /^(,|([\\\\+\\\\w\\\\s]+(\\\\s*<[\\\\+\\\\d]+>)?))+$/)."
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "60958ba4-169a-4494-ad05-bf8997166d28"
						},
						{
							"name": "Speakerphone Page",
							"item": [
								{
									"name": "Speakerphone Page set",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "35ed902b-d6c2-431a-a5dd-5217c3cb5aaa",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.sppage.set&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=pin",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.sppage.set"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "pin",
													"description": "Argument state can have one of these: yes, no or pin."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Speakerphone Page get",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c8e5a51-92d1-4126-941e-c0898a731d16",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "b22be745-2e7f-4522-99fe-8d573cc73719",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.sppage.get&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.sppage.get"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Speakerphone Page set OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "ee57f6b8-9a60-4258-a5e7-f3fa9fc3943e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.sppage.set_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=1",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.sppage.set_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "1",
													"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Speakerphone Page get OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c8e5a51-92d1-4126-941e-c0898a731d16",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "edc610c4-4ebe-448b-b943-275055e8a522",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.sppage.get_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.sppage.get_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Speakerphone Page configuration",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the response structure",
													"    pm.test('Response Validation', function () {",
													"        pm.expect(responseBody).to.have.property('extensions').that.is.an('array');",
													"        pm.expect(responseBody.extensions).to.have.length.above(0);",
													"        pm.expect(responseBody).to.have.property('quiet').that.is.a('number');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "69a556ec-d283-4f94-b9b5-dcaf90bbd346",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.sppage.configuration&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.sppage.configuration"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Speakerphone Page Edit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the response structure",
													"    pm.test('Response Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
													"        pm.expect(responseBody).to.have.property('sppage').that.is.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "3fe7c47c-3f12-49bc-b252-2c08ae0282b8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.sppage.edit&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&extensions=422,423&quiet=0",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.sppage.edit",
													"description": "\"Fields mobiles, labels and suspends lists must match in size.\""
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "extensions",
													"value": "422,423",
													"description": "Comma separated , list of extensions. (Regex: /^(,|\\\\d+)+$/)"
												},
												{
													"key": "quiet",
													"value": "0",
													"description": "Quiet mode (1 or 0). (Regex: /^(0|1)$/"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "fb8973db-4936-4ccf-b4f8-c0ed6f5d38ff"
						},
						{
							"name": "BLF List",
							"item": [
								{
									"name": "BLF List set",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "1909f9ff-cc79-496f-afcf-d7c776e37af1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.blflist.set&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=yes",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.blflist.set"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "yes",
													"description": "Argument state can have one of these: yes or no."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "BLF List get",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c8e5a51-92d1-4126-941e-c0898a731d16",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "814637f7-7384-44e9-b537-b9baf0ae94a2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.blflist.get&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.blflist.get"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "BLF List set OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "ef12ff74-9c4d-4c5f-bccc-3c27e914509e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.blflist.set_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=1",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.blflist.set_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "1",
													"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "BLF List get OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c8e5a51-92d1-4126-941e-c0898a731d16",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "1e1efc7f-1396-4e01-a32f-67e1e3d7f1ea",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.blflist.get_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.blflist.get_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "BLF List configuration",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the response structure",
													"    pm.test('Response Validation', function () {",
													"        pm.expect(responseBody).to.have.property('exts').that.is.an('array');",
													"        pm.expect(responseBody).to.have.property('labels').that.is.an('array');",
													"        pm.expect(responseBody).to.have.property('functions').that.is.an('array');",
													"        pm.expect(responseBody).to.have.property('blfs').that.is.an('array');",
													"        pm.expect(responseBody).to.have.property('blf_start').that.is.a('number');",
													"        pm.expect(responseBody).to.have.property('blf_cleanup').that.is.a('number');",
													"        pm.expect(responseBody).to.have.property('cart_only').that.is.a('number');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "b147ea0f-b7d4-4e7d-923e-1e4703958675",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.blflist.configuration&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.blflist.configuration"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "BLF List Edit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the response structure",
													"    pm.test('Response Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
													"        pm.expect(responseBody).to.have.property('blflist').that.is.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "dfb74cdd-ee03-4c7f-ac44-cbef49daf02d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.blflist.edit&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&exts=421,423,424&labels=Ext421,&blfs=1,0,1&blf_start=1&blf_cleanup=0&cart_only=0&functions=1,0,1,2,3",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.blflist.edit",
													"description": "\"Fields mobiles, labels and suspends lists must match in size.\""
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "exts",
													"value": "421,423,424",
													"description": "Comma separated , list of extensions. (Regex: /^(,|\\\\d+)+$/)"
												},
												{
													"key": "labels",
													"value": "Ext421,",
													"description": "Comma separated , list of labels. (Regex: /^(,|([\\\\+\\\\w\\\\s]+(\\\\s*<[\\\\+\\\\d]+>)?))+$/)"
												},
												{
													"key": "blfs",
													"value": "1,0,1",
													"description": "Comma separated , list of BLFs. (Regex: /^[0-1](,[0-1])+$/)"
												},
												{
													"key": "blf_start",
													"value": "1",
													"description": "BLF start (number, 2 digits max). (Regex: /^\\\\d{1,2}$/"
												},
												{
													"key": "blf_cleanup",
													"value": "0",
													"description": "Clear unused (1 or 0). (Regex: /^[0-1]$/)"
												},
												{
													"key": "cart_only",
													"value": "0",
													"description": "Cart Only (1 or 0). (Regex: /^[0-1]$/"
												},
												{
													"key": "functions",
													"value": "1,0,1,2,3"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "10144c9c-6520-4bd8-9d88-3c8da6b7356b"
						},
						{
							"name": "Speed Dial",
							"item": [
								{
									"name": "Speed Dial set",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "696f6bdf-0257-457c-9071-21532fceeff0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.speeddial.set&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=yes",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.speeddial.set"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "yes",
													"description": "Argument state can have one of these: yes or no."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Speed Dial get",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c8e5a51-92d1-4126-941e-c0898a731d16",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "2acda83d-5a2c-4b6d-b9b2-172fe859e73b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.speeddial.get&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.speeddial.get"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Speed Dial set OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "74687a3c-7b42-4290-a518-fbe70ae0b6f9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.speeddial.set_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=1",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.speeddial.set_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "1",
													"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Speed Dial get OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c8e5a51-92d1-4126-941e-c0898a731d16",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "02c135c2-878d-44fa-a1a5-0b596a6eb83b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.speeddial.get_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.speeddial.get_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Speed Dial configuration",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the response structure",
													"    pm.test('Response Validation', function () {",
													"        pm.expect(responseBody).to.have.property('codes').that.is.an('array');",
													"        pm.expect(responseBody).to.have.property('names').that.is.an('array');",
													"        pm.expect(responseBody).to.have.property('destinations').that.is.an('array');",
													"",
													"        // Assuming all arrays have the same length",
													"        var arrayLength = responseBody.codes.length;",
													"",
													"        // Iterate through each item in the arrays",
													"        for (var i = 0; i < arrayLength; i++) {",
													"            pm.test(`Speed Dial Configuration ${i + 1}`, function () {",
													"                pm.expect(responseBody.codes[i]).to.be.a('string');",
													"                pm.expect(responseBody.names[i]).to.be.a('string');",
													"                pm.expect(responseBody.destinations[i]).to.be.a('string');",
													"            });",
													"        }",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "47dff120-2044-4df9-b76d-d185664293c0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.speeddial.configuration&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.speeddial.configuration"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Speed Dial Edit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the response structure",
													"    pm.test('Response Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
													"        pm.expect(responseBody).to.have.property('speeddial').that.is.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "ebb55749-00c3-4e6e-b35e-99a550b4e5bb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.speeddial.edit&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&codes=1,2,99999999&names=Ext451,Ext452,Ext453&destinations=38735450451,38735450452,38735450453",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.speeddial.edit",
													"description": "Fields destinations, delays and suspends lists must match in size"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "codes",
													"value": "1,2,99999999",
													"description": "Comma separated , list of codes (Required). (Regex: /^(,|\\\\d+)+$/)"
												},
												{
													"key": "names",
													"value": "Ext451,Ext452,Ext453",
													"description": "Comma separated , list of names (Required). (Regex: /^(,|[\\\\w\\\\s]+)+$/)"
												},
												{
													"key": "destinations",
													"value": "38735450451,38735450452,38735450453",
													"description": "Comma separated , list of destinations (Required). (Regex: /^(,|\\\\d+)+$/)"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "53aa757a-3452-48c9-86ce-001dcdad4e3c"
						},
						{
							"name": "Delete Recordings",
							"item": [
								{
									"name": "Delete Recordings set",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "a26fa891-1bf0-420f-bc41-c17de12bc583",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.delrecordings.set&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=yes",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.delrecordings.set"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "yes",
													"description": "Argument state can have one of these: yes or no."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Recordings get",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c8e5a51-92d1-4126-941e-c0898a731d16",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "e669c36e-5948-4e21-9893-be89d2cfe0dd",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.delrecordings.get&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.delrecordings.get"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Recordings set OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d1eaa117-874a-43f5-a049-55fa48a6d5ba",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.delrecordings.set_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=1",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.delrecordings.set_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "1",
													"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Recordings get OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c8e5a51-92d1-4126-941e-c0898a731d16",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "76747206-7844-428a-86e2-fb3770012a29",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.delrecordings.get_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.delrecordings.get_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "ee58ad7a-dc73-4a0e-8e49-e172aadaa666"
						},
						{
							"name": "Listen to Recordings",
							"item": [
								{
									"name": "Listen to Recordings set",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "505e17da-a009-498a-b27d-796da8a350cb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.listenrecordings.set&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=yes",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.listenrecordings.set"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "yes",
													"description": "Argument state can have one of these: yes or no."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Listen to Recordings get",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c8e5a51-92d1-4126-941e-c0898a731d16",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "61cd50e5-be27-4de3-a324-a2e8582ad79c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.listenrecordings.get&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.listenrecordings.get"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Listen to Recordings set OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "cef06b5f-5ab1-48d0-956b-fe930be5ea34",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.listenrecordings.set_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=1",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.listenrecordings.set_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "1",
													"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Listen to Recordings get OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c8e5a51-92d1-4126-941e-c0898a731d16",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "5e15f2ab-9cbb-4b90-8d95-970a6919f2f4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.listenrecordings.get_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.listenrecordings.get_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "c01b7cc5-c667-493f-be9a-c5cde106a73f"
						},
						{
							"name": "System Operation Times",
							"item": [
								{
									"name": "System Operation Times set",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "135e2974-94af-45bc-b4bd-0df54f19c43d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.operationtimes.set&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=yes",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.operationtimes.set"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "yes",
													"description": "Argument state can have one of these: yes or no."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "System Operation Times get",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c8e5a51-92d1-4126-941e-c0898a731d16",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "ac39d8ab-ea18-4f7f-8337-2111c78f78f0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.operationtimes.get&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.operationtimes.get"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "System Operation Times set OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "68800bd5-ed15-4291-8c9c-2fd365c38061",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.operationtimes.set_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=1",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.operationtimes.set_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "1",
													"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "System Operation Times get OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c8e5a51-92d1-4126-941e-c0898a731d16",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "1dd2c6b3-2c51-4364-9f1e-3f913f638059",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.operationtimes.get_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.operationtimes.get_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "1ddd6c33-ef20-4f0d-95cc-8a6b9c2b406e"
						},
						{
							"name": "Extension Operation Times",
							"item": [
								{
									"name": "Extension Operation Times set",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "c04d9497-1da5-4f87-89db-f309748e0a6b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.extoperationtimes.set&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=yes",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.extoperationtimes.set"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "yes",
													"description": "Argument state can have one of these: yes or no."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Extension Operation Times get",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c8e5a51-92d1-4126-941e-c0898a731d16",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "38a287b8-3993-496b-a94d-9508ed017330",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.extoperationtimes.get&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.extoperationtimes.get"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Extension Operation Times set OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "a61a1fc9-a1af-457c-b498-a484ffce67c3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.extoperationtimes.set_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=1",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.extoperationtimes.set_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "1",
													"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Extension Operation Times get OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c8e5a51-92d1-4126-941e-c0898a731d16",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "29708fc7-086b-42a4-baba-ddf9d9b23fc1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.extoperationtimes.get_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.extoperationtimes.get_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Extension Operation Times configuration Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the response structure",
													"    pm.test('Response Validation', function () {",
													"        pm.expect(responseBody).to.have.property('codes').that.is.an('array');",
													"        pm.expect(responseBody).to.have.property('names').that.is.an('array');",
													"        pm.expect(responseBody).to.have.property('destinations').that.is.an('array');",
													"",
													"        // Assuming all arrays have the same length",
													"        var arrayLength = responseBody.codes.length;",
													"",
													"        // Iterate through each item in the arrays",
													"        for (var i = 0; i < arrayLength; i++) {",
													"            pm.test(`Speed Dial Configuration ${i + 1}`, function () {",
													"                pm.expect(responseBody.codes[i]).to.be.a('string');",
													"                pm.expect(responseBody.names[i]).to.be.a('string');",
													"                pm.expect(responseBody.destinations[i]).to.be.a('string');",
													"            });",
													"        }",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "c23267ab-e9b2-4ccb-bd5f-f489b70bc401",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.speeddial.configuration&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.speeddial.configuration"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Extension Operation Times Edit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Validate the response structure",
													"    pm.test('Response Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
													"        pm.expect(responseBody).to.have.property('speeddial').that.is.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "830fc0ba-74da-4722-a133-291e23ec15d5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.speeddial.edit&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&codes=1,2,99999999&names=Ext451,Ext452,Ext453&destinations=38735450451,38735450452,38735450453",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.speeddial.edit",
													"description": "Fields destinations, delays and suspends lists must match in size"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "codes",
													"value": "1,2,99999999",
													"description": "Comma separated , list of codes (Required). (Regex: /^(,|\\\\d+)+$/)"
												},
												{
													"key": "names",
													"value": "Ext451,Ext452,Ext453",
													"description": "Comma separated , list of names (Required). (Regex: /^(,|[\\\\w\\\\s]+)+$/)"
												},
												{
													"key": "destinations",
													"value": "38735450451,38735450452,38735450453",
													"description": "Comma separated , list of destinations (Required). (Regex: /^(,|\\\\d+)+$/)"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "fe50cf59-6175-4a7e-a003-c087b54ed7b3"
						},
						{
							"name": "SMS Notification",
							"item": [
								{
									"name": "SMS Notifications set",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "92399d14-b9fe-4392-93df-7e56f07749e8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.smsnotifications.set&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=yes",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.smsnotifications.set"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "yes",
													"description": "Argument state can have one of these: yes, no."
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "SMS Notifications get",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c8e5a51-92d1-4126-941e-c0898a731d16",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "2370015d-97cb-4985-a7dd-43fcacf51d91",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.smsnotifications.get&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.smsnotifications.get"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "SMS Notifications set OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7619c22-9ebe-42b8-b21a-1b29c6930eb4",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"        pm.expect(responseBody.state).to.be.a('string');",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"    // Check if \"success\" field exists",
													"    pm.test('Success Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('success');",
													"        pm.expect(responseBody.success).to.be.a('string');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "dadc21a5-4fc1-4fb8-b9c0-852c46516729",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.smsnotifications.set_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&state=1",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.smsnotifications.set_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID"
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												},
												{
													"key": "state",
													"value": "1",
													"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "SMS Notifications get OSC",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c8e5a51-92d1-4126-941e-c0898a731d16",
												"exec": [
													"// Check for 200 OK response",
													"pm.test('Status code is 200 OK', function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Parse the response JSON",
													"var responseBody = pm.response.json();",
													"",
													"// Check if there is an error field in the response",
													"if ('error' in responseBody) {",
													"    console.error(\"Test Failed: \" + responseBody.error);",
													"    pm.test('API Response Error', function () {",
													"        pm.expect.fail(responseBody.error);",
													"    });",
													"} else {",
													"    // Check if \"state\" field exists",
													"    pm.test('State Field Validation', function () {",
													"        pm.expect(responseBody).to.have.property('state');",
													"",
													"        // Check if \"state\" is one of the valid values",
													"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "1887ba13-307c-4f7a-a3e5-9efc9af17677",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.smsnotifications.get_osc&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
											"protocol": "http",
											"host": [
												"{{IP}}"
											],
											"path": [
												"index.php"
											],
											"query": [
												{
													"key": "apikey",
													"value": "{{API_Key}}"
												},
												{
													"key": "action",
													"value": "pbxware.ext.es.smsnotifications.get_osc"
												},
												{
													"key": "server",
													"value": "{{Srv/Tenant-ID}}",
													"description": "Server/Tenant ID."
												},
												{
													"key": "id",
													"value": "{{ExtensionIDs}}",
													"description": "Extension ID. (Regex: /^\\\\d+$/)"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "2a014b87-aa31-4b43-ae9a-d76ce8229416"
						}
					],
					"id": "0ef698ee-cc8f-4888-a66f-e7cf75e343b1"
				},
				{
					"name": "Listing Extensions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9699758d-20fe-4aa5-b3b8-a9507be84e52",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the response contains an array of extensions",
									"    pm.test('Response Validation', function () {",
									"        var extensionKeys = Object.keys(responseBody);",
									"        pm.expect(extensionKeys).to.have.length.above(0);",
									"",
									"        // Store extension IDs in an array",
									"        var extensionIDs = [];",
									"        for (var extId in responseBody) {",
									"            if (responseBody.hasOwnProperty(extId)) {",
									"                var extension = responseBody[extId];",
									"                pm.test('Extension ' + extId + ' Validation', function () {",
									"                    pm.expect(extension).to.have.property('name').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('email').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('protocol').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('ext').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('location').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('ua_id').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('ua_name').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('ua_fullname').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('status').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('linenum').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('user_location').that.is.a('string');",
									"                    // 'macaddress' and 'department' are optional fields, so we will not perform type checks for them.",
									"                });",
									"",
									"                // Add the new extension ID to the array",
									"                extensionIDs.push(parseInt(extId));",
									"            }",
									"        }",
									"",
									"        // Save the extension IDs to the Postman environment variable",
									"        pm.environment.set('ExtensionIDs', JSON.stringify(extensionIDs));",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "23f71035-6a13-42d0-bbd8-f59ae4b89ee6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.list&server={{Srv/Tenant-ID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ext.list"
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Server or tenant ID"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Extension Configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4dc18c24-0f77-446c-abe3-8c57c9c525bc",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the response contains the expected fields",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"",
									"        for (var extId in responseBody) {",
									"            if (responseBody.hasOwnProperty(extId)) {",
									"                var extension = responseBody[extId];",
									"                pm.test('Extension ' + extId + ' Fields Validation', function () {",
									"                    pm.expect(extension).to.have.property('name').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('email').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('pin').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('protocol').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('ext').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('location').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('user_language').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('ua_id').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('ua_name').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('ua_fullname').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('status').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('smuser').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('options').that.is.an('object');",
									"                    pm.expect(extension.options).to.have.property('type').that.is.a('string');",
									"                    pm.expect(extension.options).to.have.property('dtmfmode').that.is.a('string');",
									"                    // Add more checks for other fields in the 'options' object if needed",
									"                    // ...",
									"",
									"                    // 'options_raw', 'ua_autoprov', 'additional_macaddress', 'additional_config', and other fields are optional,",
									"                    // so we will not perform type checks for them.",
									"                });",
									"            }",
									"        }",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "9b256344-7166-4e90-beb8-cc1688c9805a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.configuration&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ext.configuration"
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Server or tenant ID"
								},
								{
									"key": "id",
									"value": "{{ExtensionIDs}}",
									"description": "Extension ID of which we want to get configuration."
								},
								{
									"key": "ext",
									"value": "{{name}}",
									"description": "Note: You cannot supply id and ext at the same time!",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Extensions Billing (Deprecated)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5444ab22-9646-4d6a-a155-bcd0b0d1004c",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        ",
									"        // Loop through extension billing data",
									"        for (var extensionID in responseBody) {",
									"            var extensionData = responseBody[extensionID];",
									"            ",
									"           // Validate specific properties for each extension",
									"pm.test('Extension ' + extensionID + ' Data Validation', function () {",
									"    pm.expect(extensionData).to.have.property('splan').that.is.a('string');",
									"    pm.expect(extensionData).to.have.property('slave').that.is.oneOf(['yes', 'no']);",
									"    ",
									"    // Validate master_code: can be null or a number",
									"    pm.expect(extensionData.master_code).to.satisfy((value) => value === null || !isNaN(value));",
									"    ",
									"    // Validate properties after master_code: can be null or specific data types",
									"    pm.expect(extensionData).to.have.property('reminder_balance').that.satisfies(value => value === null || typeof value === 'string');",
									"    pm.expect(extensionData).to.have.property('credit_limit').that.satisfies(value => value === null || typeof value === 'string');",
									"    pm.expect(extensionData).to.have.property('splan_date').that.satisfies(value => value === null || /^\\d{2}-\\d{2}-\\d{4}$/.test(value));",
									"    pm.expect(extensionData).to.have.property('limits').that.satisfies(value => value === null || ['yes', 'no'].includes(value));",
									"    pm.expect(extensionData).to.have.property('limit_type').that.satisfies(value => value === null || typeof value === 'string');",
									"    pm.expect(extensionData).to.have.property('soft_limit').that.satisfies(value => value === null || typeof value === 'string');",
									"    pm.expect(extensionData).to.have.property('hard_limit').that.satisfies(value => value === null || typeof value === 'string');",
									"    pm.expect(extensionData).to.have.property('email').that.satisfies(value => value === null || typeof value === 'string');",
									"    ",
									"});",
									"        }",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6a6de558-800e-459f-8669-9e897ba7fda9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.billing&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ext.billing",
									"description": "Extension Billing (deprecated and will be soon replaced with call_rating)"
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Server or Tenant ID"
								},
								{
									"key": "id",
									"value": "{{ExtensionIDs}}",
									"description": "Extension IDs (Use CSV file for geting info from more Extensions)"
								},
								{
									"key": "ext",
									"value": "{{extension}}",
									"description": "Note: You cannot supply id and ext at the same time!",
									"type": "text",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Extension Call Rating",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5444ab22-9646-4d6a-a155-bcd0b0d1004c",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        ",
									"        // Loop through extension billing data",
									"        for (var extensionID in responseBody) {",
									"            var extensionData = responseBody[extensionID];",
									"            ",
									"           // Validate specific properties for each extension",
									"pm.test('Extension ' + extensionID + ' Data Validation', function () {",
									"    pm.expect(extensionData).to.have.property('splan').that.is.a('string');",
									"    pm.expect(extensionData).to.have.property('slave').that.is.oneOf(['yes', 'no']);",
									"    ",
									"    // Validate master_code: can be null or a number",
									"    pm.expect(extensionData.master_code).to.satisfy((value) => value === null || !isNaN(value));",
									"    ",
									"    // Validate properties after master_code: can be null or specific data types",
									"    pm.expect(extensionData).to.have.property('reminder_balance').that.satisfies(value => value === null || typeof value === 'string');",
									"    pm.expect(extensionData).to.have.property('credit_limit').that.satisfies(value => value === null || typeof value === 'string');",
									"    pm.expect(extensionData).to.have.property('splan_date').that.satisfies(value => value === null || /^\\d{2}-\\d{2}-\\d{4}$/.test(value));",
									"    pm.expect(extensionData).to.have.property('limits').that.satisfies(value => value === null || ['yes', 'no'].includes(value));",
									"    pm.expect(extensionData).to.have.property('limit_type').that.satisfies(value => value === null || typeof value === 'string');",
									"    pm.expect(extensionData).to.have.property('soft_limit').that.satisfies(value => value === null || typeof value === 'string');",
									"    pm.expect(extensionData).to.have.property('hard_limit').that.satisfies(value => value === null || typeof value === 'string');",
									"    pm.expect(extensionData).to.have.property('email').that.satisfies(value => value === null || typeof value === 'string');",
									"    ",
									"});",
									"        }",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d1f4f97e-d265-42b3-b7f1-b80bfd181b6e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.call_rating&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ext.call_rating",
									"description": "Extension Billing"
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Server or Tenant ID"
								},
								{
									"key": "id",
									"value": "{{ExtensionIDs}}",
									"description": "Extension IDs (Use CSV file for geting info from more Extensions)"
								},
								{
									"key": "ext",
									"value": "{{extension}}",
									"description": "Note: You cannot supply id and ext at the same time!",
									"type": "text",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Extension Billing Info (Deprecated)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "00e7dfe3-f7dc-4487-aefc-d6b0645dc323",
								"exec": [
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        ",
									"        // Loop through extension billing info data",
									"        for (var extensionID in responseBody) {",
									"            var extensionData = responseBody[extensionID];",
									"            ",
									"            // Validate specific properties for each extension",
									"            pm.test('Extension ' + extensionID + ' Billing Info Validation', function () {",
									"                pm.expect(extensionData).to.have.property('account_balance').that.is.a('string');",
									"                pm.expect(extensionData).to.have.property('available_funds').that.is.a('string');",
									"                pm.expect(extensionData).to.have.property('inclusive_minutes').that.is.a('string');",
									"                ",
									"                // Print the result for each extension",
									"                console.log('Extension ID:', extensionID);",
									"                console.log('Account Balance:', extensionData.account_balance);",
									"                console.log('Available Funds:', extensionData.available_funds);",
									"                console.log('Inclusive Minutes:', extensionData.inclusive_minutes);",
									"            });",
									"        }",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2762397c-0241-49f2-bd0f-3ef07d0c67a4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.billing_info&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ext.billing_info",
									"description": "Extension Billing Info (deprecated and will be soon replaced with call_rating_info)"
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Server or Tenant ID"
								},
								{
									"key": "id",
									"value": "{{ExtensionIDs}}",
									"description": "Extension IDs (Use CSV file for geting info from more Extensions)"
								},
								{
									"key": "ext",
									"value": "{{extension}}",
									"description": "Note: You cannot supply id and ext at the same time!",
									"type": "text",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Extension Call Rating Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "00e7dfe3-f7dc-4487-aefc-d6b0645dc323",
								"exec": [
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        ",
									"        // Loop through extension billing info data",
									"        for (var extensionID in responseBody) {",
									"            var extensionData = responseBody[extensionID];",
									"            ",
									"            // Validate specific properties for each extension",
									"            pm.test('Extension ' + extensionID + ' Billing Info Validation', function () {",
									"                pm.expect(extensionData).to.have.property('account_balance').that.is.a('string');",
									"                pm.expect(extensionData).to.have.property('available_funds').that.is.a('string');",
									"                pm.expect(extensionData).to.have.property('inclusive_minutes').that.is.a('string');",
									"                ",
									"                // Print the result for each extension",
									"                console.log('Extension ID:', extensionID);",
									"                console.log('Account Balance:', extensionData.account_balance);",
									"                console.log('Available Funds:', extensionData.available_funds);",
									"                console.log('Inclusive Minutes:', extensionData.inclusive_minutes);",
									"            });",
									"        }",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3fc9fa5a-c110-4aab-9677-d5fd512d355b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.call_rating_info&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ext.call_rating_info",
									"description": "Extension Billing Info."
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Server or Tenant ID"
								},
								{
									"key": "id",
									"value": "{{ExtensionIDs}}",
									"description": "Extension IDs (Use CSV file for geting info from more Extensions)"
								},
								{
									"key": "ext",
									"value": "{{extension}}",
									"description": "Note: You cannot supply id and ext at the same time!",
									"type": "text",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Slaves",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ca98ef66-6c8c-4c87-bee7-6dd8133bf81a",
								"exec": [
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        ",
									"        // Loop through extension info data",
									"        for (var extensionID in responseBody) {",
									"            var extensionData = responseBody[extensionID];",
									"            ",
									"            // Validate specific properties for each extension",
									"            pm.test('Extension ' + extensionID + ' Info Validation', function () {",
									"                pm.expect(extensionData).to.have.property('name').that.is.a('string');",
									"                pm.expect(extensionData).to.have.property('protocol').that.is.a('string');",
									"                pm.expect(extensionData).to.have.property('ext').that.is.a('string');",
									"                pm.expect(extensionData).to.have.property('location').that.is.a('string');",
									"                pm.expect(extensionData).to.have.property('ua_id').that.is.a('string');",
									"                pm.expect(extensionData).to.have.property('ua_name').that.is.a('string');",
									"                pm.expect(extensionData).to.have.property('ua_fullname').that.is.a('string');",
									"                pm.expect(extensionData).to.have.property('status').that.is.a('string');",
									"                ",
									"                // Print the result for each extension",
									"                console.log('Extension ID:', extensionID);",
									"                console.log('Name:', extensionData.name);",
									"                console.log('Protocol:', extensionData.protocol);",
									"                console.log('Extension:', extensionData.ext);",
									"                console.log('Location:', extensionData.location);",
									"                console.log('UA ID:', extensionData.ua_id);",
									"                console.log('UA Name:', extensionData.ua_name);",
									"                console.log('UA Fullname:', extensionData.ua_fullname);",
									"                console.log('Status:', extensionData.status);",
									"            });",
									"        }",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "fd2cc1b3-f4fe-4633-82da-46da359203bc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.slaves&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ext.slaves"
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Server or Tenant ID"
								},
								{
									"key": "id",
									"value": "{{ExtensionIDs}}",
									"description": "IDs from Master Extensions."
								},
								{
									"key": "ext",
									"value": "{{extension}}",
									"description": "Extension Number.Note: You cannot supply id and ext at the same time!",
									"type": "text",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Billing History (Deprecated)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "01442833-3a91-4a1f-a7bf-aaed792fa727",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the 'sum' parameter is present in the URL variables",
									"    var sumParam = pm.request.url.query.get('sum');",
									"    if (sumParam === '1') {",
									"        // This is the case where 'sum' parameter is 1",
									"        pm.test('Response Validation for Sum=1', function () {",
									"            pm.expect(responseBody).to.be.an('array');",
									"            ",
									"            // Loop through the response entries",
									"            for (var entry of responseBody) {",
									"                pm.test('Entry Validation', function () {",
									"                    pm.expect(entry).to.have.property('sum_credit').that.is.a('string');",
									"                    pm.expect(entry).to.have.property('sum_debit').that.is.a('string');",
									"                    ",
									"                    // Print the result for each entry",
									"                    console.log('Sum Credit:', entry.sum_credit);",
									"                    console.log('Sum Debit:', entry.sum_debit);",
									"                });",
									"            }",
									"        });",
									"    } else {",
									"        // This is the case where 'sum' parameter is not provided or is 0",
									"        pm.test('Response Validation for Sum=0 or Not Specified', function () {",
									"            if (Array.isArray(responseBody)) {",
									"                // Check if the array is empty",
									"                if (responseBody.length === 0) {",
									"                    console.log(\"You entered data that does not give any results. Please recheck the data you enter and try with different inputs.\");",
									"                } else {",
									"                    // Loop through billing history entries",
									"                    for (var entry of responseBody) {",
									"                        pm.test('Billing History Entry Validation', function () {",
									"                            pm.expect(entry).to.have.property('entry_date').that.is.a('string');",
									"                            pm.expect(entry).to.have.property('refno').that.is.a('string');",
									"                            pm.expect(entry).to.have.property('notes').that.is.a('string');",
									"                            pm.expect(entry).to.have.property('amount').that.is.a('string');",
									"                            pm.expect(entry).to.have.property('type').that.is.a('string');",
									"                            ",
									"                            // Print the result for each billing history entry",
									"                            console.log('Entry Date:', entry.entry_date);",
									"                            console.log('Ref No:', entry.refno);",
									"                            console.log('Notes:', entry.notes);",
									"                            console.log('Amount:', entry.amount);",
									"                            console.log('Type:', entry.type);",
									"                        });",
									"                    }",
									"                }",
									"            } else {",
									"                // Handle other unexpected response structures",
									"                console.log(\"Response structure is not as expected. Please review the response data.\");",
									"            }",
									"        });",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "cebb4072-df28-4046-936e-929a543adcb4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.billing_history&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&start={{DateStart}}&end={{DateEnd}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ext.billing_history",
									"description": "Billing History (deprecated and will be soon replaced with call_rating_history)"
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "ID of Server or Tenant."
								},
								{
									"key": "id",
									"value": "{{ExtensionIDs}}",
									"description": "ID of extension we want to get info (or for list of IDs use CSV file)"
								},
								{
									"key": "start",
									"value": "{{DateStart}}",
									"description": "Start Date (Required) - Format is: mmm-dd-YYYY (eg: Feb-01-2009)"
								},
								{
									"key": "end",
									"value": "{{DateEnd}}",
									"description": "End Date (Required) - Format is: mmm-dd-YYYY (eg: Feb-28-2009)"
								},
								{
									"key": "starttime",
									"value": "{{StartTime}}",
									"description": "Start Time. Format is: hh:mm:ss (eg:23:59:59) Default value is 00:00:00",
									"type": "text",
									"disabled": true
								},
								{
									"key": "endtime",
									"value": "{{EndTime}}",
									"description": "End Time. Format is: hh:mm:ss (eg:23:59:59) Default value is 00:00:00",
									"type": "text",
									"disabled": true
								},
								{
									"key": "type",
									"value": "",
									"description": "Type (eg: credit|debit)",
									"disabled": true
								},
								{
									"key": "refno",
									"value": "",
									"description": "Reference Number",
									"type": "text",
									"disabled": true
								},
								{
									"key": "rrefno",
									"value": "",
									"description": "Filtering Reference Number using regular expressions",
									"type": "text",
									"disabled": true
								},
								{
									"key": "sum",
									"value": "",
									"description": "Summarize amount by type (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "timezone",
									"value": "",
									"description": "Time Zone to apply when searching history. (Ex: \"America/New_York\")",
									"type": "text",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Call Rating History",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "01442833-3a91-4a1f-a7bf-aaed792fa727",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the 'sum' parameter is present in the URL variables",
									"    var sumParam = pm.request.url.query.get('sum');",
									"    if (sumParam === '1') {",
									"        // This is the case where 'sum' parameter is 1",
									"        pm.test('Response Validation for Sum=1', function () {",
									"            pm.expect(responseBody).to.be.an('array');",
									"            ",
									"            // Loop through the response entries",
									"            for (var entry of responseBody) {",
									"                pm.test('Entry Validation', function () {",
									"                    pm.expect(entry).to.have.property('sum_credit').that.is.a('string');",
									"                    pm.expect(entry).to.have.property('sum_debit').that.is.a('string');",
									"                    ",
									"                    // Print the result for each entry",
									"                    console.log('Sum Credit:', entry.sum_credit);",
									"                    console.log('Sum Debit:', entry.sum_debit);",
									"                });",
									"            }",
									"        });",
									"    } else {",
									"        // This is the case where 'sum' parameter is not provided or is 0",
									"        pm.test('Response Validation for Sum=0 or Not Specified', function () {",
									"            if (Array.isArray(responseBody)) {",
									"                // Check if the array is empty",
									"                if (responseBody.length === 0) {",
									"                    console.log(\"You entered data that does not give any results. Please recheck the data you enter and try with different inputs.\");",
									"                } else {",
									"                    // Loop through billing history entries",
									"                    for (var entry of responseBody) {",
									"                        pm.test('Billing History Entry Validation', function () {",
									"                            pm.expect(entry).to.have.property('entry_date').that.is.a('string');",
									"                            pm.expect(entry).to.have.property('refno').that.is.a('string');",
									"                            pm.expect(entry).to.have.property('notes').that.is.a('string');",
									"                            pm.expect(entry).to.have.property('amount').that.is.a('string');",
									"                            pm.expect(entry).to.have.property('type').that.is.a('string');",
									"                            ",
									"                            // Print the result for each billing history entry",
									"                            console.log('Entry Date:', entry.entry_date);",
									"                            console.log('Ref No:', entry.refno);",
									"                            console.log('Notes:', entry.notes);",
									"                            console.log('Amount:', entry.amount);",
									"                            console.log('Type:', entry.type);",
									"                        });",
									"                    }",
									"                }",
									"            } else {",
									"                // Handle other unexpected response structures",
									"                console.log(\"Response structure is not as expected. Please review the response data.\");",
									"            }",
									"        });",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5b909b1c-8466-459f-8676-46dc9f24767e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.call_rating_history&server={{Srv/Tenant-ID}}&id={{ExtensionIDs}}&start={{DateStart}}&end={{DateEnd}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ext.call_rating_history"
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "ID of Server or Tenant."
								},
								{
									"key": "id",
									"value": "{{ExtensionIDs}}",
									"description": "ID of extension we want to get info (or for list of IDs use CSV file)"
								},
								{
									"key": "start",
									"value": "{{DateStart}}",
									"description": "Start Date (Required) - Format is: mmm-dd-YYYY (eg: Feb-01-2009)"
								},
								{
									"key": "end",
									"value": "{{DateEnd}}",
									"description": "End Date (Required) - Format is: mmm-dd-YYYY (eg: Feb-28-2009)"
								},
								{
									"key": "starttime",
									"value": "{{StartTime}}",
									"description": "Start Time. Format is: hh:mm:ss (eg:23:59:59) Default value is 00:00:00",
									"type": "text",
									"disabled": true
								},
								{
									"key": "endtime",
									"value": "{{EndTime}}",
									"description": "End Time. Format is: hh:mm:ss (eg:23:59:59) Default value is 00:00:00",
									"type": "text",
									"disabled": true
								},
								{
									"key": "type",
									"value": "",
									"description": "Type (eg: credit|debit)",
									"disabled": true
								},
								{
									"key": "refno",
									"value": "",
									"description": "Reference Number",
									"type": "text",
									"disabled": true
								},
								{
									"key": "rrefno",
									"value": "",
									"description": "Filtering Reference Number using regular expressions",
									"type": "text",
									"disabled": true
								},
								{
									"key": "sum",
									"value": "",
									"description": "Summarize amount by type (Yes=1, No=0)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "timezone",
									"value": "",
									"description": "Time Zone to apply when searching history. (Ex: \"America/New_York\")",
									"type": "text",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "18d39b87-a116-480e-a6e5-5e7f392f6a2f",
			"description": "# Extensions\n\nSupported Methods:\n\n`list` - List Extensions\n\n`configuration` - Configuration of specific extension\n\n`add` - Add Extension\n\n`edit` - Edit Extension\n\n`delete` - Delete Extension\n\n`balance` - Credit/Debit Balance\n\n`billing` - Extension Billing (deprecated and will be soon replaced with call_rating)\n\n`billing_info` - Extension Billing Info (deprecated and will be soon replaced with call_rating_info)\n\n`call_rating` - Extension Call Rating\n\n`call_rating_info` - Extension Call Rating Info\n\n`slaves` - Returns all slaves extension for supplied master extension\n\n`billing_history` - Billing History (deprecated and will be soon replaced with call_rating_history)\n\n`call_rating_history` - Call Rating History\n\n`es` - Extension Enhanced Services\n\n`reset_inclusive_minutes` - Reset Inclusive Minutes\n\n`voicemail.delete` - Delete Extension Voicemails"
		},
		{
			"name": "Trunks",
			"item": [
				{
					"name": "Adding Trunks",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "59812863-64b4-4ee4-b5b5-5750a1eaf5b6",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('number');",
									"        ",
									"        console.log('Success:', responseBody.success);",
									"        console.log('ID:', responseBody.id);",
									"",
									"        // Get the existing TrunkIDs array from the collection variable",
									"        var trunkIDs = pm.collectionVariables.get('TrunkIDs') || [];",
									"",
									"        // Push the new ID to the TrunkIDs array",
									"        var id = responseBody.id;",
									"        trunkIDs.push(id);",
									"        console.log('Trunk IDs:', trunkIDs);",
									"",
									"        // Update the TrunkIDs array in the collection variable",
									"        pm.collectionVariables.set('TrunkIDs', trunkIDs);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b707e32c-53d8-4a50-b7ac-17ab8d8afe13",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.trunk.add&server=1&name={{TrunkName}}&provider_id={{ProviderID}}&type={{TrunkType}}&dtmfmode={{TrunkDTMFmode}}&status={{TrunkStatus}}&country={{Country}}&national={{NationalCode}}&international={{InternationalCode}}&emerg_trunk={{EmergTrunk}}&host={{TrunkHost}}&username={{TrunkUserName}}&insecure={{TrunkInsecure}}&looserouting={{TrunkLooseRouting}}&incominglimit={{TrunkIncomingLimit}}&outgoinglimit={{TrunkOutgoingLimit}}&busylevel={{TrunkBusyLevel}}&codecs={{TrunkCodecs}}&codecs_ptime={{TrunkCodecsPrimeTime}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.trunk.add"
								},
								{
									"key": "server",
									"value": "1",
									"description": "Tenant/Server ID (Required)"
								},
								{
									"key": "name",
									"value": "{{TrunkName}}",
									"description": "Full Name (Required). (Regex: /^.+$/)."
								},
								{
									"key": "provider_id",
									"value": "{{ProviderID}}",
									"description": "Provider ID (SIP only) (Required). (Regex: /^[0-9]+$/)"
								},
								{
									"key": "type",
									"value": "{{TrunkType}}",
									"description": "Trunk type (user, friend, peer) (Required)"
								},
								{
									"key": "dtmfmode",
									"value": "{{TrunkDTMFmode}}",
									"description": "DTMF mode (auto, inband, rfc2833, info, shortinfo) (Required)"
								},
								{
									"key": "status",
									"value": "{{TrunkStatus}}",
									"description": "Status (active, not active, suspended) (Required)"
								},
								{
									"key": "country",
									"value": "{{Country}}",
									"description": "Country code (Required). (Regex: /^\\\\d{1,10}$/)"
								},
								{
									"key": "national",
									"value": "{{NationalCode}}",
									"description": "National (Required). (Regex: /^\\\\d{1,10}$/)"
								},
								{
									"key": "international",
									"value": "{{InternationalCode}}",
									"description": "International (Required). (Regex: /^\\\\d{1,10}$/)"
								},
								{
									"key": "emerg_trunk",
									"value": "{{EmergTrunk}}",
									"description": "Emergency trunk (Required). (Regex: /^(yes|no|1|0)$/)"
								},
								{
									"key": "host",
									"value": "{{TrunkHost}}",
									"description": "Host (Required)"
								},
								{
									"key": "username",
									"value": "{{TrunkUserName}}",
									"description": "Username (Required)"
								},
								{
									"key": "secret",
									"value": "{{TrunkSecret}}",
									"description": "Secret (Required)",
									"disabled": true
								},
								{
									"key": "peer_host",
									"value": "{{TrunkPeerHost}}",
									"description": "Peer host (Required)",
									"disabled": true
								},
								{
									"key": "peer_username",
									"value": "{{TrunkPeerUserName}}",
									"description": "Peer username (Required)",
									"disabled": true
								},
								{
									"key": "peer_secret",
									"value": "{{TrunkPeerSecret}}",
									"description": "Peer secret (Required)",
									"disabled": true
								},
								{
									"key": "insecure",
									"value": "{{TrunkInsecure}}",
									"description": "Insecure (port|invite|port,invite|very) (Required)"
								},
								{
									"key": "looserouting",
									"value": "{{TrunkLooseRouting}}",
									"description": "Loose routing (yes|no|1|0) (Required)"
								},
								{
									"key": "incominglimit",
									"value": "{{TrunkIncomingLimit}}",
									"description": "Incoming limit (Required). (Regex: /^\\\\d{1,10}$/)"
								},
								{
									"key": "outgoinglimit",
									"value": "{{TrunkOutgoingLimit}}",
									"description": "Outgoing limit (Required). (Regex: /^\\\\d{1,10}$/)"
								},
								{
									"key": "busylevel",
									"value": "{{TrunkBusyLevel}}",
									"description": "Busy level (Required). (Regex: /^\\\\d{1,10}$/)"
								},
								{
									"key": "codecs",
									"value": "{{TrunkCodecs}}",
									"description": "Allowed codecs separated with ',': ulaw:alaw:g723.1:g726:g729:gsm:ilbc:speex:lpc10:h261:h263:h263p (Required)"
								},
								{
									"key": "codecs_ptime",
									"value": "{{TrunkCodecsPrimeTime}}",
									"description": "Ptime (10, 20, 30 â€¦â€‹ 300) (Required)"
								},
								{
									"key": "qualify",
									"value": "",
									"description": "Qualify. (Regex: /^\\\\d{0,4}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "e164a",
									"value": "",
									"description": "E164 Accepted. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "passthru_mode",
									"value": "",
									"description": "Pass-thru mode. (Regex: /^(yes|no|1|0)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "national_leave",
									"value": "",
									"description": "Leave national. (Regex: /^(yes|no|1|0)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "area_code",
									"value": "",
									"description": "Area Code. (Regex: /^(yes|no|1|0)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "prefix",
									"value": "",
									"description": "Prefix. (Regex: /^[\\\\w\\\\s]+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "testnum",
									"value": "",
									"description": "Test number. (Regex: /^[\\\\w\\\\s]+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "authname",
									"value": "",
									"description": "Authname. (Regex: /^.+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "auth",
									"value": "",
									"description": "Auth. (Regex: /^.+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "register",
									"value": "",
									"description": "Register. (Regex: /^([0-5])$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "register_suffix",
									"value": "",
									"description": "Register Suffix. (Regex: /^\\\\w+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "register_expiration",
									"value": "",
									"description": "Register expiration time in sec. (Regex: /^\\\\d{1,4}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "fromuser",
									"value": "",
									"description": "From user. (Regex: /^[\\\\w\\\\s]+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "fromdomain",
									"value": "",
									"description": "From domain. (Regex: /^.+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "phoneinuri",
									"value": "",
									"description": "User=phone in URI. (Regex: /^(yes|no|1|0)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "outboundproxy",
									"value": "",
									"description": "Outbound proxy. (Regex: /^.+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "from_ipaddr",
									"value": "",
									"description": "Incoming IP addresses separated by comma (,). (Regex: /^[a-zA-Z0-9.,]+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "transport",
									"value": "",
									"description": "Transport (udp, tcp, tls). (Regex: /\\\\w+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "encryption",
									"value": "",
									"description": "Encryption. (Regex: /^(yes|offer)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "direct_media",
									"value": "",
									"description": "Direct media (no|yes|nonat|update|nonat,update)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "directrtpsetup",
									"value": "",
									"description": "Direct RTP setup (yes, no)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "defaultip",
									"value": "",
									"description": "Default IP. (Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "trustrpid",
									"value": "",
									"description": "Trust RPID. (Regex: /^(yes|no|1|0)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "sendrpid",
									"value": "",
									"description": "Send RPID. (Regex: /^(rpid|pai)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "trust_id_outbound",
									"value": "",
									"description": "Send Caller ID in RPID for Anonymous calls. (Regex: /^(yes|no|1|0)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "rpid_connectedline",
									"value": "",
									"description": "Connected Line Updates. (Regex: /^(yes|no|1|0)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "rpid_update",
									"value": "",
									"description": "RPID with SIP UPDATE. (Regex: /^(yes|no|1|0)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "sendpai",
									"value": "",
									"description": "Send PAI header. (Regex: /^[\\\\w\\\\s]+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "privacy",
									"value": "",
									"description": "Specify privacy (none, anonymous, anonymous_id, anonymous_number, anonymous_number_id)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "callerid",
									"value": "",
									"description": "Outbound Caller ID. (Regex: /^[\\\\w\\\\s]+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "dialed_num_minimum_length",
									"value": "",
									"description": "Dialed number minimum length. (Regex: /^\\\\d{1,4}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "allow_es_callerid",
									"value": "",
									"description": "Allow enhanced services callerid.  (Regex: /^(yes|no|1|0)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "email_on_limit",
									"value": "",
									"description": "Email on limit. (Regex: /^(yes|no|1|0)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "outgoing_dialoptions",
									"value": "",
									"description": "Outgoing dial options. (Regex: /^[tTr]+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "videosupport",
									"value": "",
									"description": "Video support. (Regex: /^(yes|no|1|0)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "autoframing",
									"value": "",
									"description": "Auto framing. (Regex: /^(yes|no|1|0)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "prefix_emerg",
									"value": null,
									"description": "Set Prefix for Emergency Calls. Regex: /^(yes|no)$/",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Editing Trunks",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "59812863-64b4-4ee4-b5b5-5750a1eaf5b6",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Print the success message and the ID",
									"    console.log('Success:', responseBody.success);",
									"    console.log('ID:', responseBody.id);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "69f209b4-f102-47b1-b29d-f8da2ad4563e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.trunk.edit&server=1&id={{TrunkIDs}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.trunk.edit",
									"description": "Edit trunks"
								},
								{
									"key": "server",
									"value": "1",
									"description": "Tenant/Server ID (Required)"
								},
								{
									"key": "id",
									"value": "{{TrunkIDs}}",
									"description": "IDs of trunks we want to edit. Use CSV file for list of trunks. (Required)"
								},
								{
									"key": "name",
									"value": "",
									"description": "Full Name. (Regex: /^.+$/).",
									"disabled": true
								},
								{
									"key": "provider_id",
									"value": "",
									"description": "Provider ID (SIP only). (Regex: /^[0-9]+$/)",
									"disabled": true
								},
								{
									"key": "type",
									"value": "",
									"description": "Trunk type (user, friend, peer)",
									"disabled": true
								},
								{
									"key": "dtmfmode",
									"value": "",
									"description": "DTMF mode (auto, inband, rfc2833, info, shortinfo)",
									"disabled": true
								},
								{
									"key": "status",
									"value": "",
									"description": "Status (active, not active, suspended)",
									"disabled": true
								},
								{
									"key": "country",
									"value": "",
									"description": "Country code. (Regex: /^\\\\d{1,10}$/)",
									"disabled": true
								},
								{
									"key": "national",
									"value": "",
									"description": "National. (Regex: /^\\\\d{1,10}$/)",
									"disabled": true
								},
								{
									"key": "international",
									"value": "",
									"description": "International . (Regex: /^\\\\d{1,10}$/)",
									"disabled": true
								},
								{
									"key": "emerg_trunk",
									"value": "",
									"description": "Emergency trunk. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "host",
									"value": "",
									"description": "Host",
									"disabled": true
								},
								{
									"key": "username",
									"value": "",
									"description": "Username",
									"disabled": true
								},
								{
									"key": "secret",
									"value": "",
									"description": "Secret",
									"disabled": true
								},
								{
									"key": "peer_host",
									"value": "",
									"description": "Peer host",
									"disabled": true
								},
								{
									"key": "peer_username",
									"value": "",
									"description": "Peer username",
									"disabled": true
								},
								{
									"key": "peer_secret",
									"value": "",
									"description": "Peer secret.",
									"disabled": true
								},
								{
									"key": "insecure",
									"value": "",
									"description": "Insecure (port|invite|port,invite|very)",
									"disabled": true
								},
								{
									"key": "looserouting",
									"value": "",
									"description": "Loose routing (yes|no|1|0)",
									"disabled": true
								},
								{
									"key": "incominglimit",
									"value": "",
									"description": "Incoming limit. (Regex: /^\\\\d{1,10}$/)",
									"disabled": true
								},
								{
									"key": "outgoinglimit",
									"value": "",
									"description": "Outgoing limit. (Regex: /^\\\\d{1,10}$/)",
									"disabled": true
								},
								{
									"key": "busylevel",
									"value": "",
									"description": "Busy level. (Regex: /^\\\\d{1,10}$/)",
									"disabled": true
								},
								{
									"key": "codecs",
									"value": "",
									"description": "Allowed codecs separated with ',': ulaw:alaw:g723.1:g726:g729:gsm:ilbc:speex:lpc10:h261:h263:h263p",
									"disabled": true
								},
								{
									"key": "codecs_ptime",
									"value": "",
									"description": "Ptime (10, 20, 30 â€¦â€‹ 300)",
									"disabled": true
								},
								{
									"key": "qualify",
									"value": "",
									"description": "Qualify. (Regex: /^\\\\d{0,4}$/)",
									"disabled": true
								},
								{
									"key": "e164a",
									"value": "",
									"description": "E164 Accepted. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "passthru_mode",
									"value": "",
									"description": "Pass-thru mode. (Regex: /^(yes|no|1|0)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "national_leave",
									"value": "",
									"description": "Leave national. (Regex: /^(yes|no|1|0)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "area_code",
									"value": "",
									"description": "Area Code. (Regex: /^(yes|no|1|0)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "prefix",
									"value": "",
									"description": "Prefix. (Regex: /^[\\\\w\\\\s]+$/)",
									"disabled": true
								},
								{
									"key": "testnum",
									"value": "",
									"description": "Test number. (Regex: /^[\\\\w\\\\s]+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "authname",
									"value": "",
									"description": "Authname. (Regex: /^.+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "auth",
									"value": "",
									"description": "Auth. (Regex: /^.+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "register",
									"value": "",
									"description": "Register. (Regex: /^([0-5])$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "register_suffix",
									"value": "",
									"description": "Register Suffix. (Regex: /^\\\\w+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "register_expiration",
									"value": "",
									"description": "Register expiration time in sec. (Regex: /^\\\\d{1,4}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "fromuser",
									"value": "",
									"description": "From user. (Regex: /^[\\\\w\\\\s]+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "fromdomain",
									"value": "",
									"description": "From domain. (Regex: /^.+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "phoneinuri",
									"value": "",
									"description": "User=phone in URI. (Regex: /^(yes|no|1|0)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "outboundproxy",
									"value": "",
									"description": "Outbound proxy. (Regex: /^.+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "from_ipaddr",
									"value": "",
									"description": "Incoming IP addresses separated by comma (,). (Regex: /^[a-zA-Z0-9.,]+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "transport",
									"value": "",
									"description": "Transport (udp, tcp, tls). (Regex: /\\\\w+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "encryption",
									"value": "",
									"description": "Encryption. (Regex: /^(yes|offer)$/)",
									"disabled": true
								},
								{
									"key": "direct_media",
									"value": "",
									"description": "Direct media (no|yes|nonat|update|nonat,update)",
									"disabled": true
								},
								{
									"key": "directrtpsetup",
									"value": "",
									"description": "Direct RTP setup (yes, no)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "defaultip",
									"value": "",
									"description": "Default IP. (Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "trustrpid",
									"value": "",
									"description": "Trust RPID. (Regex: /^(yes|no|1|0)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "sendrpid",
									"value": "",
									"description": "Send RPID. (Regex: /^(rpid|pai)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "trust_id_outbound",
									"value": "",
									"description": "Send Caller ID in RPID for Anonymous calls. (Regex: /^(yes|no|1|0)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "rpid_connectedline",
									"value": "",
									"description": "Connected Line Updates. (Regex: /^(yes|no|1|0)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "rpid_update",
									"value": "",
									"description": "RPID with SIP UPDATE. (Regex: /^(yes|no|1|0)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "sendpai",
									"value": "",
									"description": "Send PAI header. (Regex: /^[\\\\w\\\\s]+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "privacy",
									"value": "",
									"description": "Specify privacy (none, anonymous, anonymous_id, anonymous_number, anonymous_number_id)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "callerid",
									"value": "",
									"description": "Outbound Caller ID. (Regex: /^[\\\\w\\\\s]+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "dialed_num_minimum_length",
									"value": "",
									"description": "Dialed number minimum length. (Regex: /^\\\\d{1,4}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "allow_es_callerid",
									"value": "",
									"description": "Allow enhanced services callerid. (Regex: /^(yes|no|1|0)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "email_on_limit",
									"value": "",
									"description": "Email on limit. (Regex: /^(yes|no|1|0)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "outgoing_dialoptions",
									"value": "",
									"description": "Outgoing dial options. (Regex: /^[tTr]+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "videosupport",
									"value": "",
									"description": "Video support. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "autoframing",
									"value": "",
									"description": "Auto framing. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "prefix_emerg",
									"value": null,
									"description": "Set Prefix for Emergency Calls. Regex: /^(yes|no)$/",
									"type": "text",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Listing Trunks",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "519f6759-dbe3-4489-8d52-fbe4dde0aa3f",
								"exec": [
									"pm.collectionVariables.unset(\"TrunkIDs\");",
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        ",
									"        // Get the existing TrunkIDs array from the collection variable",
									"        var trunkIDs = pm.collectionVariables.get('TrunkIDs') || [];",
									"",
									"        // Loop through trunk data",
									"        for (var trunkID in responseBody) {",
									"            var trunkData = responseBody[trunkID];",
									"            ",
									"            // Validate specific properties for each trunk",
									"            pm.test('Trunk ' + trunkID + ' Data Validation', function () {",
									"                pm.expect(trunkData).to.be.an('object');",
									"                pm.expect(trunkData).to.have.property('name').that.is.a('string');",
									"                pm.expect(trunkData).to.have.property('protocol').that.is.a('string');",
									"                pm.expect(trunkData).to.have.property('provider_id').that.is.a('string');",
									"                pm.expect(trunkData).to.have.property('provider_name').that.is.a('string');",
									"                pm.expect(trunkData).to.have.property('status').that.is.oneOf(['enabled', 'disabled']);",
									"                ",
									"                // Push the trunk ID to the TrunkIDs array",
									"                trunkIDs.push(trunkID);",
									"                ",
									"                // Print the result for each trunk",
									"                console.log('Trunk ID:', trunkID);",
									"                console.log('Trunk Name:', trunkData.name);",
									"                console.log('Protocol:', trunkData.protocol);",
									"                console.log('Provider ID:', trunkData.provider_id);",
									"                console.log('Provider Name:', trunkData.provider_name);",
									"                console.log('Status:', trunkData.status);",
									"            });",
									"        }",
									"",
									"        // Update the TrunkIDs array in the collection variable",
									"        pm.collectionVariables.set('TrunkIDs', trunkIDs);",
									"        pm.environment.set(\"TrunkIDs\", trunkIDs);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c6b96db5-01ed-47cf-ae97-5211e0d8e70f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2a69ba0f-defc-447c-95fe-2ba47fb4c712",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.trunk.list",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.trunk.list"
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Filter trunks by server (does not apply in Tenant Mode)",
									"type": "text",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Listing Providers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "67d77e3d-2376-405f-9255-97ae1a003712",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        ",
									"        // Loop through provider data",
									"        for (var providerName in responseBody) {",
									"            var providerData = responseBody[providerName];",
									"            ",
									"            // Validate provider data",
									"            pm.test('Provider ' + providerName + ' Data Validation', function () {",
									"                pm.expect(providerData).to.be.an('array');",
									"                pm.expect(providerData[0]).to.be.a('string');",
									"                pm.expect(providerData[1]).to.be.a('string');",
									"                ",
									"                // Print the result for each provider",
									"                console.log('Provider Name:', providerName);",
									"                console.log('Provider ID:', providerData[0]);",
									"                console.log('Provider Type:', providerData[1]);",
									"            });",
									"        }",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c15da79f-9a35-423b-ae38-c5bba45eb1e5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.trunk.providers&server={{Srv/Tenant-ID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.trunk.providers",
									"description": "Listing trunk providers"
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Server or Tenant ID."
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Trunk Configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0cd2f48f-562f-46c4-bb7e-c1c1ea7b0b85",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else if (Array.isArray(responseBody) && responseBody.length === 0) {",
									"    console.error(\"Test Failed: No result found for given parameters, check your input again!\");",
									"    pm.test('No Result Found', function () {",
									"        pm.expect.fail(\"No result for given parameters, check your input again!\");",
									"    });",
									"} else {",
									"    // Continue with the rest of the checks",
									"    // Validate the response structure and other fields as needed",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        ",
									"        const objectKey = Object.keys(responseBody)[0];",
									"        const trunkConfiguration = responseBody[objectKey];",
									"",
									"        pm.test('Extension Name Validation', function () {",
									"            pm.expect(trunkConfiguration.name).to.be.a('string');",
									"        });",
									"",
									"        pm.test('Provider ID Validation', function () {",
									"            pm.expect(trunkConfiguration.provider_id).to.be.a('string');",
									"        });",
									"",
									"        pm.test('Provider Name Validation', function () {",
									"            pm.expect(trunkConfiguration.provider_name).to.be.a('string');",
									"        });",
									"",
									"        pm.test('Status Validation', function () {",
									"            pm.expect(trunkConfiguration.status).to.be.a('string');",
									"        });",
									"",
									"        pm.test('Protocol Validation', function () {",
									"            pm.expect(trunkConfiguration.protocol).to.be.a('string');",
									"        });",
									"",
									"        pm.test('Options Validation', function () {",
									"            pm.expect(trunkConfiguration.options).to.be.an('object');",
									"        });",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d0abe6cd-6ba9-43fd-9f24-4700f2898aad",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/?action=pbxware.trunk.configuration&apikey={{API_Key}}&server=1&trunkid={{TrunkIDs}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "action",
									"value": "pbxware.trunk.configuration"
								},
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "server",
									"value": "1",
									"description": "ID of a tenant (Required)"
								},
								{
									"key": "trunkid",
									"value": "{{TrunkIDs}}",
									"description": "ID of a trunk (Required). (Regex: /^[a-zA-Z0-9_-]+$/)"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "78e2c8b9-6cf3-4ce2-aef0-5a1347231f88",
			"description": "# Trunks\n\nSupported Methods:\n\n`list` - List Trunks\n\n`configuration` - Trunk Configuration\n\n`add` - Add new Trunk\n\n`edit` - Edit existing Trunk\n\n`providers` - List Trunk Providers"
		},
		{
			"name": "SMS",
			"item": [
				{
					"name": "SMS Trunks",
					"item": [
						{
							"name": "Adding SMS trunks",
							"item": [
								{
									"name": "Telnyx",
									"item": [
										{
											"name": "Adding SMS trunk",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "26ebff98-5d8e-4287-a2fc-1605f97177f8",
														"exec": [
															"// Check for 200 OK response",
															"pm.test('Status code is 200 OK', function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// Parse the response JSON",
															"var responseBody = pm.response.json();",
															"",
															"// Check if there is an error field in the response",
															"if ('error' in responseBody) {",
															"    console.error(\"Test Failed: \" + responseBody.error);",
															"    pm.test('API Response Error', function () {",
															"        pm.expect.fail(responseBody.error);",
															"    });",
															"} else {",
															"    // Validate the response structure",
															"    pm.test('Response Validation', function () {",
															"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
															"        pm.expect(responseBody).to.have.property('id').that.is.a('number');",
															"",
															"        // Print the result for the SMS trunk add request",
															"        console.log('Success:', responseBody.success);",
															"        console.log('SMS Trunk ID:', responseBody.id);",
															"    });",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "d3f98bba-9e4a-40b8-941d-e8e99332d921",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.sms.trunks.add&enabled={{SMSTrunkEnabled}}&name={{SMSTrunkName}}&provider={{SMSTrunkProvider}}&api_key={{TelnyxAPI}}&public_key={{TelnyxPublicKey}}&messaging_profile_id={{TelnyxProfileID}}",
													"protocol": "http",
													"host": [
														"{{IP}}"
													],
													"path": [
														"index.php"
													],
													"query": [
														{
															"key": "apikey",
															"value": "{{API_Key}}"
														},
														{
															"key": "action",
															"value": "pbxware.sms.trunks.add",
															"description": "For adding more trunks use CSV file TelnyxSMSTrunk.csv"
														},
														{
															"key": "enabled",
															"value": "{{SMSTrunkEnabled}}",
															"description": "Enabled (On=1, Off=0) (Required)"
														},
														{
															"key": "name",
															"value": "{{SMSTrunkName}}",
															"description": "SMS Trunk Name (Required)"
														},
														{
															"key": "provider",
															"value": "{{SMSTrunkProvider}}",
															"description": "SMS Trunk Provider (telnyx, bandwidth, twilio, vi, ozsms) (Required)"
														},
														{
															"key": "description",
															"value": "",
															"description": "SMS Trunk Description",
															"disabled": true
														},
														{
															"key": "api_key",
															"value": "{{TelnyxAPI}}",
															"description": "Telnyx API Key (Required for Telnyx)"
														},
														{
															"key": "public_key",
															"value": "{{TelnyxPublicKey}}",
															"description": "Telnyx Public Key (Required for Telnyx)"
														},
														{
															"key": "messaging_profile_id",
															"value": "{{TelnyxProfileID}}",
															"description": "Telnyx Messaging Profile ID (Required for Telnyx)"
														}
													]
												}
											},
											"response": []
										}
									],
									"id": "c21451b7-41eb-4576-807e-4f29812080d0",
									"description": "Telnyx SMS provider"
								},
								{
									"name": "Bandwith",
									"item": [
										{
											"name": "Adding SMS trunk",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8be09b28-7ef1-417a-86a4-c6b0083d509c",
														"exec": [
															"// Check for 200 OK response",
															"pm.test('Status code is 200 OK', function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// Parse the response JSON",
															"var responseBody = pm.response.json();",
															"",
															"// Check if there is an error field in the response",
															"if ('error' in responseBody) {",
															"    console.error(\"Test Failed: \" + responseBody.error);",
															"    pm.test('API Response Error', function () {",
															"        pm.expect.fail(responseBody.error);",
															"    });",
															"} else {",
															"    // Validate the response structure",
															"    pm.test('Response Validation', function () {",
															"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
															"        pm.expect(responseBody).to.have.property('id').that.is.a('number');",
															"",
															"        // Print the result for the SMS trunk add request",
															"        console.log('Success:', responseBody.success);",
															"        console.log('SMS Trunk ID:', responseBody.id);",
															"    });",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "496212bc-677a-4c76-982e-db6c80777eff",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.sms.trunks.add&enabled={{SMSTrunkEnabled}}&name={{SMSTrunkName}}&provider={{SMSTrunkProvider}}&username={{BandwithUserName}}&password={{BandwithPassword}}&user_id={{BandwithUserID}}&app_id={{BandwithAppID}}",
													"protocol": "http",
													"host": [
														"{{IP}}"
													],
													"path": [
														"index.php"
													],
													"query": [
														{
															"key": "apikey",
															"value": "{{API_Key}}"
														},
														{
															"key": "action",
															"value": "pbxware.sms.trunks.add"
														},
														{
															"key": "enabled",
															"value": "{{SMSTrunkEnabled}}",
															"description": "Enabled (On=1, Off=0) (Required)"
														},
														{
															"key": "name",
															"value": "{{SMSTrunkName}}",
															"description": "SMS Trunk Name (Required)"
														},
														{
															"key": "provider",
															"value": "{{SMSTrunkProvider}}",
															"description": "SMS Trunk Provider (telnyx, bandwidth, twilio, vi, ozsms) (Required)"
														},
														{
															"key": "description",
															"value": "",
															"description": "SMS Trunk Description",
															"disabled": true
														},
														{
															"key": "username",
															"value": "{{BandwithUserName}}",
															"description": "Bandwidth Username (Required for Bandwidth)"
														},
														{
															"key": "password",
															"value": "{{BandwithPassword}}",
															"description": "Bandwidth Password (Required for Bandwidth)"
														},
														{
															"key": "user_id",
															"value": "{{BandwithUserID}}",
															"description": "Bandwidth User ID (Required for Bandwidth)"
														},
														{
															"key": "app_id",
															"value": "{{BandwithAppID}}",
															"description": "Bandwidth APP ID (Required for Bandwidth)"
														}
													]
												}
											},
											"response": []
										}
									],
									"id": "55fd7234-3be7-47e5-85cd-aa8aa41c29c1",
									"description": "Bandwith SMS provider"
								},
								{
									"name": "Twilio",
									"item": [
										{
											"name": "Adding SMS trunk",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7265126b-a3b3-47de-bd4e-6c39b0533801",
														"exec": [
															"// Check for 200 OK response",
															"pm.test('Status code is 200 OK', function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// Parse the response JSON",
															"var responseBody = pm.response.json();",
															"",
															"// Check if there is an error field in the response",
															"if ('error' in responseBody) {",
															"    console.error(\"Test Failed: \" + responseBody.error);",
															"    pm.test('API Response Error', function () {",
															"        pm.expect.fail(responseBody.error);",
															"    });",
															"} else {",
															"    // Validate the response structure",
															"    pm.test('Response Validation', function () {",
															"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
															"        pm.expect(responseBody).to.have.property('id').that.is.a('number');",
															"",
															"        // Print the result for the SMS trunk add request",
															"        console.log('Success:', responseBody.success);",
															"        console.log('SMS Trunk ID:', responseBody.id);",
															"    });",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "455cb243-19d2-4170-9936-6eb65f5b2d58",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.sms.trunks.add&enabled={{SMSTrunkEnabled}}&name={{SMSTrunkName}}&provider={{SMSTrunkProvider}}&account_sid={{TwilioAccSID}}&auth_token={{TwilioAuthToken}}",
													"protocol": "http",
													"host": [
														"{{IP}}"
													],
													"path": [
														"index.php"
													],
													"query": [
														{
															"key": "apikey",
															"value": "{{API_Key}}"
														},
														{
															"key": "action",
															"value": "pbxware.sms.trunks.add"
														},
														{
															"key": "enabled",
															"value": "{{SMSTrunkEnabled}}",
															"description": "Enabled (On=1, Off=0) (Required)"
														},
														{
															"key": "name",
															"value": "{{SMSTrunkName}}",
															"description": "SMS Trunk Name (Required)"
														},
														{
															"key": "provider",
															"value": "{{SMSTrunkProvider}}",
															"description": "SMS Trunk Provider (telnyx, bandwidth, twilio, vi, ozsms) (Required)"
														},
														{
															"key": "description",
															"value": null,
															"description": "SMS Trunk Description",
															"disabled": true
														},
														{
															"key": "account_sid",
															"value": "{{TwilioAccSID}}",
															"description": "Twilio Account SID (Required for Twilio)"
														},
														{
															"key": "auth_token",
															"value": "{{TwilioAuthToken}}",
															"description": "Twilio authorization token (Required for Twilio)"
														}
													]
												}
											},
											"response": []
										}
									],
									"id": "e05ea868-a41b-4aa0-b8b0-9e4a516fda59",
									"description": "Twilio SMS provider"
								},
								{
									"name": "Voip Innovations",
									"item": [
										{
											"name": "Adding SMS trunk",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "446dc5bf-529d-432c-959b-e8dcdfdcfb04",
														"exec": [
															"// Check for 200 OK response",
															"pm.test('Status code is 200 OK', function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// Parse the response JSON",
															"var responseBody = pm.response.json();",
															"",
															"// Check if there is an error field in the response",
															"if ('error' in responseBody) {",
															"    console.error(\"Test Failed: \" + responseBody.error);",
															"    pm.test('API Response Error', function () {",
															"        pm.expect.fail(responseBody.error);",
															"    });",
															"} else {",
															"    // Validate the response structure",
															"    pm.test('Response Validation', function () {",
															"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
															"        pm.expect(responseBody).to.have.property('id').that.is.a('number');",
															"",
															"        // Print the result for the SMS trunk add request",
															"        console.log('Success:', responseBody.success);",
															"        console.log('SMS Trunk ID:', responseBody.id);",
															"    });",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "f4981ee1-66a2-4ff0-af82-4210ff5175b3",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.sms.trunks.add&enabled={{SMSTrunkEnabled}}&name={{SMSTrunkName}}&provider={{SMSTrunkProvider}}&secret={{VoipSecret}}&login={{VoipLogin}}",
													"protocol": "http",
													"host": [
														"{{IP}}"
													],
													"path": [
														"index.php"
													],
													"query": [
														{
															"key": "apikey",
															"value": "{{API_Key}}"
														},
														{
															"key": "action",
															"value": "pbxware.sms.trunks.add"
														},
														{
															"key": "enabled",
															"value": "{{SMSTrunkEnabled}}",
															"description": "Enabled (On=1, Off=0) (Required)"
														},
														{
															"key": "name",
															"value": "{{SMSTrunkName}}",
															"description": "SMS Trunk Name (Required)"
														},
														{
															"key": "provider",
															"value": "{{SMSTrunkProvider}}",
															"description": "SMS Trunk Provider (telnyx, bandwidth, twilio, vi, ozsms) (Required)"
														},
														{
															"key": "description",
															"value": null,
															"description": "SMS Trunk Description",
															"disabled": true
														},
														{
															"key": "secret",
															"value": "{{VoipSecret}}",
															"description": "Voip Innovations secret (Required for Voip Innovations)"
														},
														{
															"key": "login",
															"value": "{{VoipLogin}}",
															"description": "Voip Innovations login (Required for Voip Innovations)"
														}
													]
												}
											},
											"response": []
										}
									],
									"id": "0e75dedd-5a6e-467c-b4dc-efbc028bc87e",
									"description": "Voip Innovations SMS provider"
								},
								{
									"name": "OZ SMS",
									"item": [
										{
											"name": "Adding SMS trunk",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5a80abd9-968f-40dc-a217-dbe894f3b11c",
														"exec": [
															"// Check for 200 OK response",
															"pm.test('Status code is 200 OK', function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// Parse the response JSON",
															"var responseBody = pm.response.json();",
															"",
															"// Check if there is an error field in the response",
															"if ('error' in responseBody) {",
															"    console.error(\"Test Failed: \" + responseBody.error);",
															"    pm.test('API Response Error', function () {",
															"        pm.expect.fail(responseBody.error);",
															"    });",
															"} else {",
															"    // Validate the response structure",
															"    pm.test('Response Validation', function () {",
															"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
															"        pm.expect(responseBody).to.have.property('id').that.is.a('number');",
															"",
															"        // Print the result for the SMS trunk add request",
															"        console.log('Success:', responseBody.success);",
															"        console.log('SMS Trunk ID:', responseBody.id);",
															"    });",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "7dbdcd9b-05a2-4be2-bc29-e84a6619be92",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.sms.trunks.add&enabled={{SMSTrunkEnabled}}&name={{SMSTrunkName}}&provider={{SMSTrunkProvider}}&api_key={{OzAPI}}&username={{OzUserName}}",
													"protocol": "http",
													"host": [
														"{{IP}}"
													],
													"path": [
														"index.php"
													],
													"query": [
														{
															"key": "apikey",
															"value": "{{API_Key}}"
														},
														{
															"key": "action",
															"value": "pbxware.sms.trunks.add"
														},
														{
															"key": "enabled",
															"value": "{{SMSTrunkEnabled}}",
															"description": "Enabled (On=1, Off=0) (Required)"
														},
														{
															"key": "name",
															"value": "{{SMSTrunkName}}",
															"description": "SMS Trunk Name (Required)"
														},
														{
															"key": "provider",
															"value": "{{SMSTrunkProvider}}",
															"description": "SMS Trunk Provider (telnyx, bandwidth, twilio, vi, ozsms) (Required)"
														},
														{
															"key": "description",
															"value": "",
															"description": "SMS Trunk Description",
															"disabled": true
														},
														{
															"key": "api_key",
															"value": "{{OzAPI}}",
															"description": "OZ SMS Api Key",
															"type": "text"
														},
														{
															"key": "username",
															"value": "{{OzUserName}}",
															"description": "OZ SMS username",
															"type": "text"
														}
													]
												}
											},
											"response": []
										}
									],
									"id": "08b4d3e1-5abf-494c-b5e9-6207806748fa"
								}
							],
							"id": "ad6df014-c371-406f-a673-b7a1c689a14c"
						},
						{
							"name": "Editing SMS trunks",
							"item": [
								{
									"name": "Telnyx",
									"item": [
										{
											"name": "Editing SMS trunk",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "26ebff98-5d8e-4287-a2fc-1605f97177f8",
														"exec": [
															"// Check for 200 OK response",
															"pm.test('Status code is 200 OK', function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// Parse the response JSON",
															"var responseBody = pm.response.json();",
															"",
															"// Check if there is an error field in the response",
															"if ('error' in responseBody) {",
															"    console.error(\"Test Failed: \" + responseBody.error);",
															"    pm.test('API Response Error', function () {",
															"        pm.expect.fail(responseBody.error);",
															"    });",
															"} else {",
															"    // Validate the response structure",
															"    pm.test('Response Validation', function () {",
															"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
															"        pm.expect(responseBody).to.have.property('id').that.is.a('number');",
															"",
															"        // Print the result for the SMS trunk add request",
															"        console.log('Success:', responseBody.success);",
															"        console.log('SMS Trunk ID:', responseBody.id);",
															"    });",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "57e6c056-c9a2-412b-9d9e-7f73f32a9a4b",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.sms.trunks.edit&id={{SMSTrunkIDs}}",
													"protocol": "http",
													"host": [
														"{{IP}}"
													],
													"path": [
														"index.php"
													],
													"query": [
														{
															"key": "apikey",
															"value": "{{API_Key}}"
														},
														{
															"key": "action",
															"value": "pbxware.sms.trunks.edit",
															"description": "For editing more trunks use CSV file SMSTrunkIDs.csv"
														},
														{
															"key": "id",
															"value": "{{SMSTrunkIDs}}",
															"description": "SMS Trunk ID (use csv file SMSTrunkIDs.csv)",
															"type": "text"
														},
														{
															"key": "enabled",
															"value": "",
															"description": "Enabled (On=1, Off=0) (Required)",
															"disabled": true
														},
														{
															"key": "name",
															"value": "",
															"description": "SMS Trunk Name (Required)",
															"disabled": true
														},
														{
															"key": "provider",
															"value": "",
															"description": "SMS Trunk Provider (telnyx, bandwidth, twilio, vi, ozsms) (Required)",
															"disabled": true
														},
														{
															"key": "description",
															"value": "",
															"description": "SMS Trunk Description",
															"disabled": true
														},
														{
															"key": "api_key",
															"value": "",
															"description": "Telnyx API Key (Required for Telnyx)",
															"disabled": true
														},
														{
															"key": "public_key",
															"value": "",
															"description": "Telnyx Public Key (Required for Telnyx)",
															"disabled": true
														},
														{
															"key": "messaging_profile_id",
															"value": "",
															"description": "Telnyx Messaging Profile ID (Required for Telnyx)",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									],
									"id": "8aaba1b5-55a6-4047-8603-8a88b9c1d45d",
									"description": "Telnyx SMS provider"
								},
								{
									"name": "Bandwith",
									"item": [
										{
											"name": "Editing SMS trunk",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8be09b28-7ef1-417a-86a4-c6b0083d509c",
														"exec": [
															"// Check for 200 OK response",
															"pm.test('Status code is 200 OK', function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// Parse the response JSON",
															"var responseBody = pm.response.json();",
															"",
															"// Check if there is an error field in the response",
															"if ('error' in responseBody) {",
															"    console.error(\"Test Failed: \" + responseBody.error);",
															"    pm.test('API Response Error', function () {",
															"        pm.expect.fail(responseBody.error);",
															"    });",
															"} else {",
															"    // Validate the response structure",
															"    pm.test('Response Validation', function () {",
															"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
															"        pm.expect(responseBody).to.have.property('id').that.is.a('number');",
															"",
															"        // Print the result for the SMS trunk add request",
															"        console.log('Success:', responseBody.success);",
															"        console.log('SMS Trunk ID:', responseBody.id);",
															"    });",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "0bcc2b99-8f80-484f-89ac-6472589b6a82",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.sms.trunks.edit&id={{SMSTrunkIDs}}",
													"protocol": "http",
													"host": [
														"{{IP}}"
													],
													"path": [
														"index.php"
													],
													"query": [
														{
															"key": "apikey",
															"value": "{{API_Key}}"
														},
														{
															"key": "action",
															"value": "pbxware.sms.trunks.edit"
														},
														{
															"key": "id",
															"value": "{{SMSTrunkIDs}}",
															"description": "Use CSV file to edit more Bandwith Trunks at once (SMSTrunkIDs.csv)",
															"type": "text"
														},
														{
															"key": "enabled",
															"value": "",
															"description": "Enabled (On=1, Off=0) (Required)",
															"disabled": true
														},
														{
															"key": "name",
															"value": "",
															"description": "SMS Trunk Name (Required)",
															"disabled": true
														},
														{
															"key": "provider",
															"value": "",
															"description": "SMS Trunk Provider (telnyx, bandwidth, twilio, vi, ozsms) (Required)",
															"disabled": true
														},
														{
															"key": "description",
															"value": "",
															"description": "SMS Trunk Description",
															"disabled": true
														},
														{
															"key": "username",
															"value": "",
															"description": "Bandwidth Username (Required for Bandwidth)",
															"disabled": true
														},
														{
															"key": "password",
															"value": "",
															"description": "Bandwidth Password (Required for Bandwidth)",
															"disabled": true
														},
														{
															"key": "user_id",
															"value": "",
															"description": "Bandwidth User ID (Required for Bandwidth)",
															"disabled": true
														},
														{
															"key": "app_id",
															"value": "",
															"description": "Bandwidth APP ID (Required for Bandwidth)",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									],
									"id": "0dd35694-c5a1-4436-9d85-553522e1d56c",
									"description": "Bandwith SMS provider"
								},
								{
									"name": "Twilio",
									"item": [
										{
											"name": "Editing SMS trunk",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7265126b-a3b3-47de-bd4e-6c39b0533801",
														"exec": [
															"// Check for 200 OK response",
															"pm.test('Status code is 200 OK', function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// Parse the response JSON",
															"var responseBody = pm.response.json();",
															"",
															"// Check if there is an error field in the response",
															"if ('error' in responseBody) {",
															"    console.error(\"Test Failed: \" + responseBody.error);",
															"    pm.test('API Response Error', function () {",
															"        pm.expect.fail(responseBody.error);",
															"    });",
															"} else {",
															"    // Validate the response structure",
															"    pm.test('Response Validation', function () {",
															"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
															"        pm.expect(responseBody).to.have.property('id').that.is.a('number');",
															"",
															"        // Print the result for the SMS trunk add request",
															"        console.log('Success:', responseBody.success);",
															"        console.log('SMS Trunk ID:', responseBody.id);",
															"    });",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "df959d1b-e980-4207-8a23-7709a7c43e20",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.sms.trunks.edit&id={{SMSTrunkIDs}}",
													"protocol": "http",
													"host": [
														"{{IP}}"
													],
													"path": [
														"index.php"
													],
													"query": [
														{
															"key": "apikey",
															"value": "{{API_Key}}"
														},
														{
															"key": "action",
															"value": "pbxware.sms.trunks.edit"
														},
														{
															"key": "id",
															"value": "{{SMSTrunkIDs}}",
															"description": "Use CSV file to edit more Twilio trunks at once (SMSTrunkIDs.csv)",
															"type": "text"
														},
														{
															"key": "enabled",
															"value": "",
															"description": "Enabled (On=1, Off=0) (Required)",
															"disabled": true
														},
														{
															"key": "name",
															"value": "",
															"description": "SMS Trunk Name (Required)",
															"disabled": true
														},
														{
															"key": "provider",
															"value": "",
															"description": "SMS Trunk Provider (telnyx, bandwidth, twilio, vi, ozsms) (Required)",
															"disabled": true
														},
														{
															"key": "description",
															"value": "",
															"description": "SMS Trunk Description",
															"disabled": true
														},
														{
															"key": "account_sid",
															"value": "",
															"description": "Twilio Account SID (Required for Twilio)",
															"disabled": true
														},
														{
															"key": "auth_token",
															"value": "",
															"description": "Twilio authorization token (Required for Twilio)",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									],
									"id": "5d3e5d2b-8fa8-4176-b268-1e70a55e7cad",
									"description": "Twilio SMS provider"
								},
								{
									"name": "Voip Innovations",
									"item": [
										{
											"name": "Editing SMS trunk",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "446dc5bf-529d-432c-959b-e8dcdfdcfb04",
														"exec": [
															"// Check for 200 OK response",
															"pm.test('Status code is 200 OK', function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// Parse the response JSON",
															"var responseBody = pm.response.json();",
															"",
															"// Check if there is an error field in the response",
															"if ('error' in responseBody) {",
															"    console.error(\"Test Failed: \" + responseBody.error);",
															"    pm.test('API Response Error', function () {",
															"        pm.expect.fail(responseBody.error);",
															"    });",
															"} else {",
															"    // Validate the response structure",
															"    pm.test('Response Validation', function () {",
															"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
															"        pm.expect(responseBody).to.have.property('id').that.is.a('number');",
															"",
															"        // Print the result for the SMS trunk add request",
															"        console.log('Success:', responseBody.success);",
															"        console.log('SMS Trunk ID:', responseBody.id);",
															"    });",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "47ee7ad3-05b1-4e4f-9e67-9f7b5984bfc6",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.sms.trunks.edit&id={{SMSTrunkIDs}}",
													"protocol": "http",
													"host": [
														"{{IP}}"
													],
													"path": [
														"index.php"
													],
													"query": [
														{
															"key": "apikey",
															"value": "{{API_Key}}"
														},
														{
															"key": "action",
															"value": "pbxware.sms.trunks.edit"
														},
														{
															"key": "id",
															"value": "{{SMSTrunkIDs}}",
															"description": "Use CSV file to edit more Twilio trunks at once (SMSTrunkIDs.csv)",
															"type": "text"
														},
														{
															"key": "enabled",
															"value": "",
															"description": "Enabled (On=1, Off=0) (Required)",
															"disabled": true
														},
														{
															"key": "name",
															"value": "",
															"description": "SMS Trunk Name (Required)",
															"disabled": true
														},
														{
															"key": "provider",
															"value": "",
															"description": "SMS Trunk Provider (telnyx, bandwidth, twilio, vi, ozsms) (Required)",
															"disabled": true
														},
														{
															"key": "description",
															"value": "",
															"description": "SMS Trunk Description",
															"disabled": true
														},
														{
															"key": "secret",
															"value": "",
															"description": "Voip Innovations secret (Required for Voip Innovations)",
															"disabled": true
														},
														{
															"key": "login",
															"value": "",
															"description": "Voip Innovations login (Required for Voip Innovations)",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									],
									"id": "c9018486-de22-444f-ba4a-fcdb223f331e",
									"description": "Voip Innovations SMS provider"
								},
								{
									"name": "OZ SMS",
									"item": [
										{
											"name": "Editing SMS trunk",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5a80abd9-968f-40dc-a217-dbe894f3b11c",
														"exec": [
															"// Check for 200 OK response",
															"pm.test('Status code is 200 OK', function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// Parse the response JSON",
															"var responseBody = pm.response.json();",
															"",
															"// Check if there is an error field in the response",
															"if ('error' in responseBody) {",
															"    console.error(\"Test Failed: \" + responseBody.error);",
															"    pm.test('API Response Error', function () {",
															"        pm.expect.fail(responseBody.error);",
															"    });",
															"} else {",
															"    // Validate the response structure",
															"    pm.test('Response Validation', function () {",
															"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
															"        pm.expect(responseBody).to.have.property('id').that.is.a('number');",
															"",
															"        // Print the result for the SMS trunk add request",
															"        console.log('Success:', responseBody.success);",
															"        console.log('SMS Trunk ID:', responseBody.id);",
															"    });",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "702fba0f-58a9-41a8-a6f2-6c6cd741eda0",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.sms.trunks.edit&id={{SMSTrunkIDs}}",
													"protocol": "http",
													"host": [
														"{{IP}}"
													],
													"path": [
														"index.php"
													],
													"query": [
														{
															"key": "apikey",
															"value": "{{API_Key}}"
														},
														{
															"key": "action",
															"value": "pbxware.sms.trunks.edit"
														},
														{
															"key": "id",
															"value": "{{SMSTrunkIDs}}",
															"description": "Use CSV file to edit more Oz SMS trunks at once (SMSTrunkIDs.csv)",
															"type": "text"
														},
														{
															"key": "enabled",
															"value": "",
															"description": "Enabled (On=1, Off=0) (Required)",
															"disabled": true
														},
														{
															"key": "name",
															"value": "",
															"description": "SMS Trunk Name (Required)",
															"disabled": true
														},
														{
															"key": "provider",
															"value": "",
															"description": "SMS Trunk Provider (telnyx, bandwidth, twilio, vi, ozsms) (Required)",
															"disabled": true
														},
														{
															"key": "description",
															"value": "",
															"description": "SMS Trunk Description",
															"disabled": true
														},
														{
															"key": "api_key",
															"value": "",
															"description": "OZ SMS Api Key",
															"type": "text",
															"disabled": true
														},
														{
															"key": "username",
															"value": "",
															"description": "OZ SMS username",
															"type": "text",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									],
									"id": "10c35130-f871-4beb-9f25-62d6c3a080c2"
								}
							],
							"id": "4204a749-c861-4c52-9adc-b07f50b950cf"
						},
						{
							"name": "SMS Trunks List",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "51572466-27f0-42be-bd0a-e4234cbc4210",
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Validate the response structure",
											"    pm.test('Response Validation', function () {",
											"        pm.expect(responseBody).to.be.an('object');",
											"        ",
											"        // Initialize an array to store SMS trunk IDs",
											"        var smsTrunkIDs = [];",
											"        ",
											"        // Loop through SMS trunk data",
											"        for (var trunkID in responseBody) {",
											"            var trunkData = responseBody[trunkID];",
											"            ",
											"            // Validate specific properties for each SMS trunk",
											"            pm.test('SMS Trunk ' + trunkID + ' Data Validation', function () {",
											"                pm.expect(trunkData).to.be.an('object');",
											"                pm.expect(trunkData).to.have.property('name').that.is.a('string');",
											"                pm.expect(trunkData).to.have.property('provider').that.is.a('string');",
											"                ",
											"                // Print the result for each SMS trunk",
											"                console.log('Trunk ID:', trunkID);",
											"                console.log('SMS Trunk Name:', trunkData.name);",
											"                console.log('SMS Provider:', trunkData.provider);",
											"                ",
											"                // Push the SMS trunk ID to the array",
											"                smsTrunkIDs.push(trunkID);",
											"            });",
											"        }",
											"        ",
											"        // Set the SMS trunk IDs array to collection and environment variables",
											"        pm.collectionVariables.set('SMSTrunkIDs', smsTrunkIDs);",
											"        pm.environment.set('SMSTrunkIDs', smsTrunkIDs);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "cc1b843e-efee-449d-9031-a514e77c7fab",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.sms.trunks.list",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.sms.trunks.list"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SMS Trunk Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4f0a3093-c1f4-4a7f-bee7-ca17aa8b1f60",
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Validate the response structure",
											"    pm.test('Response Validation', function () {",
											"        pm.expect(responseBody).to.be.an('object');",
											"        pm.expect(responseBody).to.have.property('id').that.is.a('number');",
											"        pm.expect(responseBody).to.have.property('enabled').that.is.a('number');",
											"        pm.expect(responseBody).to.have.property('name').that.is.a('string');",
											"        pm.expect(responseBody).to.have.property('provider').that.is.a('string');",
											"        pm.expect(responseBody).to.have.property('description').that.is.a('string');",
											"",
											"        // Commented out validation for provider-specific fields",
											"        /*",
											"        if (responseBody.provider === 'telnyx') {",
											"            pm.expect(responseBody).to.have.property('api_key').that.is.a('string');",
											"            pm.expect(responseBody).to.have.property('public_key').that.is.a('string');",
											"            pm.expect(responseBody).to.have.property('messaging_profile_id').that.is.a('string');",
											"        } else {",
											"            // Add validation for other providers if needed",
											"        }",
											"        */",
											"",
											"        // Print the result for the SMS trunk configuration",
											"        console.log('SMS Trunk ID:', responseBody.id);",
											"        console.log('Enabled:', responseBody.enabled);",
											"        console.log('SMS Trunk Name:', responseBody.name);",
											"        console.log('SMS Trunk Provider:', responseBody.provider);",
											"        console.log('Description:', responseBody.description);",
											"",
											"        // Commented out printing of provider-specific fields",
											"        /*",
											"        if (responseBody.provider === 'telnyx') {",
											"            console.log('API Key:', responseBody.api_key);",
											"            console.log('Public Key:', responseBody.public_key);",
											"            console.log('Messaging Profile ID:', responseBody.messaging_profile_id);",
											"        }",
											"        */",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "25e7561e-214e-4b5b-b31f-c420b639bd48",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.sms.trunks.configuration&id={{SMSTrunkIDs}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.sms.trunks.configuration",
											"description": "Configuration of specific SMS Trunk"
										},
										{
											"key": "id",
											"value": "{{SMSTrunkIDs}}",
											"description": "If we want configurations of all trunks, we should use CSV file with list of all SMSM trunks IDs."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Deleting SMS Trunks",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fcd2ad5c-a830-441a-8764-41ad41615b95",
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Validate the success response",
											"    pm.test('Successful Response Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
											"        console.log('Success:', responseBody.success);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "10712cd4-1f4b-4d94-9495-7b55db917ec4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.sms.trunks.delete&id={{SMSTrunkIDs}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.sms.trunks.delete"
										},
										{
											"key": "id",
											"value": "{{SMSTrunkIDs}}",
											"description": "ID of trunk we want to delete. (Use SMSTrunkIDs.csv if want to delete more trunks at once)"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "c37a6edf-56d9-4bf5-a391-3e1af96f9c72"
				},
				{
					"name": "SMS Trunks&Tenants",
					"item": [
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ad345fc-fd1e-443d-96c3-284a2d866be0",
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Validate the response structure",
											"    pm.test('Response Validation', function () {",
											"        pm.expect(responseBody).to.be.an('object');",
											"",
											"        // Loop through tenant SMS trunk data",
											"        for (var tenantID in responseBody) {",
											"            var tenantData = responseBody[tenantID];",
											"",
											"            // Validate specific properties for each tenant SMS trunk",
											"            pm.test('Tenant ' + tenantID + ' SMS Trunk Data Validation', function () {",
											"                pm.expect(tenantData).to.be.an('object');",
											"",
											"                // Print the result for each tenant SMS trunk",
											"                console.log('Tenant ID:', tenantID);",
											"                console.log('ID:', tenantData.id);",
											"                console.log('Enabled:', tenantData.enabled);",
											"                console.log('Name:', tenantData.name);",
											"                console.log('Provider:', tenantData.provider);",
											"            });",
											"        }",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "df3257b6-02f3-46e6-b6cf-68c143048c98",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.sms.trunks.tenants.list",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.sms.trunks.tenants.list",
											"description": "List SMS Trunks per Tenant"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Tenants SMS trunk",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "798beb5c-80b9-4731-bfe0-ccd7b4ac546d",
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Validate the response structure",
											"    pm.test('Response Validation', function () {",
											"        pm.expect(responseBody).to.be.an('object');",
											"",
											"        // Validate specific properties for the SMS trunk tenant",
											"        pm.test('SMS Trunk per Tenant Data Validation', function () {",
											"            pm.expect(responseBody).to.have.property('id').that.is.a('string');",
											"            pm.expect(responseBody).to.have.property('enabled').that.is.a('string');",
											"            pm.expect(responseBody).to.have.property('name').that.is.a('string');",
											"            pm.expect(responseBody).to.have.property('provider').that.is.a('string');",
											"        });",
											"",
											"        // Print the result for the SMS trunk tenant",
											"        console.log('Tenant ID:', responseBody.id);",
											"        console.log('Enabled:', responseBody.enabled);",
											"        console.log('Name:', responseBody.name);",
											"        console.log('Provider:', responseBody.provider);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "1aa54875-b8a5-4e28-914e-a28c26e47f96",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.sms.trunks.tenants.get&tenant={{Srv/Tenant-ID}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.sms.trunks.tenants.get"
										},
										{
											"key": "tenant",
											"value": "{{Srv/Tenant-ID}}",
											"description": "Tenant ID (Required) (Use SrvTenantIDs.csv file to get trunks of more tenants at once)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Set Tenants SMS trunk",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9c88a5e3-dcd0-49ab-b6a8-f81abc4910c7",
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Validate the successful response",
											"    pm.test('Successful Response Validation', function () {",
											"        pm.expect(responseBody).to.be.an('object');",
											"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
											"        console.log('Success:', responseBody.success);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "225ac460-18f1-4ad9-93e5-3447f08a94af",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.sms.trunks.tenants.set&tenant={{Srv/Tenant-ID}}&id={{SMSTrunkIDs}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.sms.trunks.tenants.set"
										},
										{
											"key": "tenant",
											"value": "{{Srv/Tenant-ID}}",
											"description": "Tenant ID (Required)"
										},
										{
											"key": "id",
											"value": "{{SMSTrunkIDs}}",
											"description": "SMS Trunk ID. (Use CSV file SMSTrunk&TenantIDs.csv for setting list of trunks)"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "31381727-94cc-4811-a18a-b135578c7106"
				},
				{
					"name": "SMS reports list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f6fffc34-7b90-48f5-bfc2-58d2c813c13b",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else if (Array.isArray(responseBody) && responseBody.length === 0) {",
									"    console.error(\"Test Failed: There is no reports for selected Date/Time range!\");",
									"    pm.test('No Reports Found', function () {",
									"        pm.expect.fail(\"There is no reports for selected Date/Time range!\");",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"",
									"        // Iterate through each SMS report entry",
									"        for (var reportId in responseBody) {",
									"            var smsReport = responseBody[reportId];",
									"",
									"            pm.test('SMS Report ' + reportId + ' Validation', function () {",
									"                pm.expect(smsReport).to.be.an('object');",
									"                pm.expect(smsReport).to.have.property('server').that.is.a('string');",
									"                pm.expect(smsReport).to.have.property('provider').that.is.a('string');",
									"                pm.expect(smsReport).to.have.property('from').that.is.a('string');",
									"                pm.expect(smsReport).to.have.property('to').that.is.a('string');",
									"                pm.expect(smsReport).to.have.property('direction').that.is.a('string');",
									"                pm.expect(smsReport).to.have.property('date/time').that.is.a('string');",
									"                pm.expect(smsReport).to.have.property('status').that.is.a('string');",
									"                pm.expect(smsReport).to.have.property('error').that.is.a('string');",
									"                pm.expect(smsReport).to.have.property('type').that.is.a('string');",
									"            });",
									"        }",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c9890c2a-0f57-4546-a1f0-e630e76944c7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.sms.reports.list&start_date=Oct-19-2023&end_date=Oct-19-2023",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.sms.reports.list"
								},
								{
									"key": "start_date",
									"value": "Oct-19-2023",
									"description": "Start Date (Required). Format is: mmm-dd-YYYY (e.g., Feb-01-2009). (Regex: /^(?i:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-([0-2][0-9]|3[01])-\\\\d{4}$/)"
								},
								{
									"key": "end_date",
									"value": "Oct-19-2023",
									"description": "End Date (Required). Format is: mmm-dd-YYYY (e.g., Feb-01-2009). Regex: /^(?i:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-([0-2][0-9]|3[01])-\\\\d{4}$/)"
								},
								{
									"key": "start_time",
									"value": "09:25:00",
									"description": "Start Time. Format is: hh:mm:ss (e.g., 23:59:59). Default value is 00:00:00. (Regex: /^((2[0-3])|([0-1][0-9])):[0-5][0-9]:[0-5][0-9]$/)",
									"disabled": true
								},
								{
									"key": "end_time",
									"value": "09:26:00",
									"description": "End Time. Format is: hh:mm:ss (e.g., 23:59:59). Default value is 23:59:59. (Regex: /^((2[0-3])|([0-1][0-9])):[0-5][0-9]:[0-5][0-9]$/)",
									"disabled": true
								},
								{
									"key": "direction",
									"value": "Outbound",
									"description": "Direction. Filter by two available directions (Inbound, Outbound)",
									"disabled": true
								},
								{
									"key": "from_number",
									"value": "",
									"description": "From Filter by number from which SMS was sent. (Regex: /^\\\\d{1,16}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "to_number",
									"value": "",
									"description": "To. Filter by number to which SMS was sent. (Regex: /^\\\\d{1,16}$/)",
									"disabled": true
								},
								{
									"key": "type",
									"value": "",
									"description": "Type - Filter by two available types (SMS, MMS). (Regex: /^(?i)(SMS|MMS)$/)",
									"disabled": true
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Server ID. Filter by Server ID",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Bulk SMS reports list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f6fffc34-7b90-48f5-bfc2-58d2c813c13b",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else if (Array.isArray(responseBody) && responseBody.length === 0) {",
									"    console.error(\"Test Failed: There are no bulk SMS reports for the selected Date/Time range!\");",
									"    pm.test('No Bulk SMS Reports Found', function () {",
									"        pm.expect.fail(\"There are no bulk SMS reports for the selected Date/Time range!\");",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"",
									"        // Iterate through each bulk SMS report entry",
									"        for (var reportId in responseBody) {",
									"            var bulkSMSReport = responseBody[reportId];",
									"",
									"            pm.test('Bulk SMS Report ' + reportId + ' Validation', function () {",
									"                pm.expect(bulkSMSReport).to.be.an('object');",
									"                pm.expect(bulkSMSReport).to.have.property('name').that.is.a('string');",
									"                pm.expect(bulkSMSReport).to.have.property('sent').that.is.a('string');",
									"                pm.expect(bulkSMSReport).to.have.property('failed').that.is.a('string');",
									"                pm.expect(bulkSMSReport).to.have.property('time_start').that.is.a('string');",
									"                pm.expect(bulkSMSReport).to.have.property('time_end').that.is.a('string');",
									"                pm.expect(bulkSMSReport).to.have.property('from').that.is.a('string');",
									"                pm.expect(bulkSMSReport).to.have.property('csv_file').that.is.a('string');",
									"                pm.expect(bulkSMSReport).to.have.property('status').that.is.a('string');",
									"                pm.expect(bulkSMSReport).to.have.property('message').that.is.a('string');",
									"            });",
									"        }",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5b6d9ea4-7691-4b65-80ce-ba0e21cb96de",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.sms.reports.bulk_list&start_date=Oct-19-2023&end_date=Oct-19-2023&start_time=09:21:00&end_time=09:26:00",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.sms.reports.bulk_list"
								},
								{
									"key": "start_date",
									"value": "Oct-19-2023",
									"description": "Start Date (Required). Format is: mmm-dd-YYYY (e.g., Feb-01-2009). (Regex: /^(?i:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-([0-2][0-9]|3[01])-\\\\d{4}$/)"
								},
								{
									"key": "end_date",
									"value": "Oct-19-2023",
									"description": "End Date (Required). Format is: mmm-dd-YYYY (e.g., Feb-01-2009). Regex: /^(?i:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-([0-2][0-9]|3[01])-\\\\d{4}$/)"
								},
								{
									"key": "start_time",
									"value": "09:21:00",
									"description": "Start Time. Format is: hh:mm:ss (e.g., 23:59:59). Default value is 00:00:00. (Regex: /^((2[0-3])|([0-1][0-9])):[0-5][0-9]:[0-5][0-9]$/)"
								},
								{
									"key": "end_time",
									"value": "09:26:00",
									"description": "End Time. Format is: hh:mm:ss (e.g., 23:59:59). Default value is 23:59:59. (Regex: /^((2[0-3])|([0-1][0-9])):[0-5][0-9]:[0-5][0-9]$/)"
								},
								{
									"key": "status",
									"value": "Completed",
									"description": "Status-Filter by available statuses (Active, Paused, Stopped, Completed). (Regex: /^(?i)(Active|Paused|Stopped|Completed)$/)",
									"disabled": true
								},
								{
									"key": "name",
									"value": "",
									"description": "Name-Filter by name of campaign. (Regex: /^.{1,100}$/)",
									"disabled": true
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Server ID. Filter by Server ID",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "b3fa8a69-e054-4374-8565-e6375f4209df",
			"description": "# SMS\n\nSupported Methods:\n\n`reports`\\- SMS and Bulk SMS reports\n\n`trunks` - SMS Trunks management\n\n`trunks.tenants` - SMS Trunks & Tenants management\n\n# SMS and Bulk SMS reports\n\nSupported Methods:  \n`list` - List SMS\n\n`bulk_list` - List Bulk SMS\n\n# SMS Trunks\n\nSupported Methods:\n\n`list` - List SMS Trunks\n\n`configuration` - Configuration of specific SMS Trunk\n\n`add` - Add SMS Trunk\n\n`edit` - Edit SMS Trunk\n\n`delete` - Delete SMS Trunk\n\n# SMS Trunks & Tenants\n\nSupported Methods:\n\n`list` - List SMS Trunks & Tenants\n\n`get` - Get Tenantâ€™s SMS Trunk\n\n`set` - Set Tenantâ€™s SMS Trunk"
		},
		{
			"name": "DIDs",
			"item": [
				{
					"name": "Listing DIDs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "64142f39-17c4-498a-ad9e-a073873ab03d",
								"exec": [
									"pm.environment.unset(\"DID-IDs\");",
									"pm.collectionVariables.unset(\"DID-IDs\");",
									"",
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the response is an empty array",
									"    if (Array.isArray(responseBody) && responseBody.length === 0) {",
									"        console.log(\"No DID found. Try with different values for Server or Ext field!\");",
									"        pm.test('No found error', function () {",
									"            pm.expect.fail(\"No DID found for given inputs.Try with different values for Server or Ext field!\");",
									"        });",
									"    } else {",
									"        // Validate the response structure and loop through DIDs data",
									"        pm.test('Response Validation', function () {",
									"            pm.expect(responseBody).to.be.an('object');",
									"",
									"            // Get the existing DIDs array from the environment",
									"            var didIDs = pm.collectionVariables.get('DID-IDs') || [];",
									"            ",
									"            for (var didID in responseBody) {",
									"                var didData = responseBody[didID];",
									"                ",
									"                // Validate specific properties for each DID",
									"                pm.test('DID ' + didID + ' Data Validation', function () {",
									"                    pm.expect(didData).to.be.an('object');",
									"                    pm.expect(didData).to.have.property('number').that.is.a('string');",
									"                    pm.expect(didData).to.have.property('number2').that.is.oneOf([null, 'string']);",
									"                    pm.expect(didData).to.have.property('server').that.is.a('string');",
									"                    pm.expect(didData).to.have.property('trunk').that.is.a('string');",
									"                    pm.expect(didData).to.have.property('type').that.is.a('string');",
									"                    pm.expect(didData).to.have.property('ext').that.is.a('string');",
									"                    pm.expect(didData).to.have.property('status').that.is.oneOf(['enabled', 'disabled']);",
									"                    pm.expect(didData).to.have.property('sms_enabled').that.is.oneOf([null,'1', '0']);",
									"",
									"                    // Validate e164 field",
									"                    if (didData.e164 !== null) {",
									"                        pm.expect(didData.e164).to.be.a('string').and.match(/^\\d+$/);",
									"                    }",
									"",
									"                     // Validate e164_2 field",
									"                     if (didData.e164_2 !== null) {",
									"                        pm.expect(didData.e164_2).to.be.a('string').and.match(/^\\d+$/);",
									"                    }",
									"                    ",
									"                    // Print the result for each DID",
									"                    console.log('DID ID:', didID);",
									"                    console.log('DID Number:', didData.number);",
									"                    console.log('DID Number2:', didData.number2);",
									"                    console.log('Server ID:', didData.server);",
									"                    console.log('Trunk ID:', didData.trunk);",
									"                    console.log('DID Type:', didData.type);",
									"                    console.log('Extension:', didData.ext);",
									"                    console.log('E.164 Number:', didData.e164);",
									"                    console.log('E.164 Number2:', didData.e164_2);",
									"                    console.log('Status:', didData.status);",
									"                    console.log('SMS Enabled:', didData.sms_enabled);",
									"                    console.log();",
									"",
									"                    // Push the new DID ID to the DIDs array",
									"                    didIDs.push(didID);",
									"                });",
									"            }",
									"            // Update the DIDs array in the environment",
									"            pm.collectionVariables.set('DID-IDs', didIDs);",
									"            pm.environment.set('DID-IDs', didIDs);",
									"        });",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e777681f-ba68-46d5-a8b0-06c485575f26",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.did.list&server={{Srv/Tenant-ID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.did.list",
									"description": "Listing of DIDs, by default, will include all DIDs."
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Filter DID list by Tenant ID. If PBXware is running in Tenant Mode this is a required field and must contain a valid Tenant ID. ID 1 is always assigned to Master tenant and cannot be used. You can use CSV file \"SrvTenantIDs.csv\" to get all DIDs of tenants."
								},
								{
									"key": "ext",
									"value": "",
									"description": "Filter DID list by Destination Number. (Regex: /^[\\\\d,]+$/)",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Adding DIDs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0653ed2b-b44c-444f-bf85-7f3ce7082099",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('number');",
									"        ",
									"        // Print the result for each DID",
									"        console.log('Success:', responseBody.success);",
									"        console.log('DID ID:', responseBody.id);",
									"        ",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a1fd71a2-2ba1-4899-83a1-d6e5c4ad69c7",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "32dbebb5-d1cb-4e06-81d1-c6d5da15e884",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://10.1.165.94/index.php?apikey=Test123456789&action=pbxware.did.add&server={{Srv/Tenant-ID}}&trunk={{TrunkIDs}}&did={{DID}}&dest_type={{DestType}}&destination={{Destination}}&disabled={{DID-Disabled}}&e164={{DID}}",
							"protocol": "http",
							"host": [
								"10",
								"1",
								"165",
								"94"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "Test123456789"
								},
								{
									"key": "action",
									"value": "pbxware.did.add",
									"description": "If want to add more DID in one move use CSV file AddDIDs.csv."
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Tenant or Server ID (Required)   If PBXware is running in Tenant Mode this is a required field and must contain a valid Tenant ID.   ID 1 is always assigned to Master tenant and cannot be used."
								},
								{
									"key": "name",
									"value": null,
									"disabled": true
								},
								{
									"key": "trunk",
									"value": "{{TrunkIDs}}",
									"description": "Trunk ID to which DID is mapped. (Required) (Regex: /^\\\\d+$/)"
								},
								{
									"key": "did",
									"value": "{{DID}}",
									"description": "Actual DID number. (Required) (Regex: /^\\\\d+$/)"
								},
								{
									"key": "dest_type",
									"value": "{{DestType}}",
									"description": "Destination Type for DID. (Required) (Regex: /^\\\\d{1}$/)\n0: Extension\n1: Forward DID to Extension (Multi User)\n2: Ring Group\n3: IVR\n4: Queues\n5: External Number\n6. IVR Tree\n"
								},
								{
									"key": "destination",
									"value": "{{Destination}}",
									"description": "DID destination. (Required) (Regex: /^\\\\d+$/)"
								},
								{
									"key": "disabled",
									"value": "{{DID-Disabled}}",
									"description": "Disable DID by default (Required)  1: Disabled  0: Enabled"
								},
								{
									"key": "did2",
									"value": "",
									"description": "DID number (end)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "groupid",
									"value": "",
									"description": "DID Group ID",
									"type": "text",
									"disabled": true
								},
								{
									"key": "e164",
									"value": "{{DID}}",
									"description": "E.164 Number (start) (Regex: /^\\\\d+$/)"
								},
								{
									"key": "e164_2",
									"value": "",
									"description": "E.164 Number (end) (Regex: /^\\\\d+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "callerid",
									"value": "",
									"description": "Replace Caller ID. (Regex: /^[\\\\+\\\\w\\\\s%]+(\\\\s*<[\\\\+\\\\w%]+>)?$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "splan",
									"value": "",
									"description": "Service Plan. (Regex: /^(0|-1|2147483647)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "billingext",
									"value": "",
									"description": "Billing Extension. (deprecated and will be soon replaced with call_rating_ext) (Regex: /^\\\\d{3}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "call_rating_ext",
									"value": "",
									"description": "Call Rating Extension (Regex: /^\\\\d{3}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "greeting",
									"value": "",
									"description": "Greeting. (Regex: /^greeting\\\\-did\\\\-([\\\\w\\\\-]+)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "stripn",
									"value": "",
									"description": "Strip N digits. (Regex: /^\\\\d+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "qprio",
									"value": "",
									"description": "Queue Priority. (Regex: /^\\\\d{1,2}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "codec",
									"value": "",
									"description": "Force Codec. (Regex: /^(ulaw|alaw|g722|opus|g723|g726|g726aal2|g729|gsm|ilbc|speex|speex16|speex32|lpc10|h261|h263|h263p|h264)+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "ringtone",
									"value": "",
									"description": "Custom Ringtone. (Regex: /^.+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "recordcall",
									"value": "",
									"description": "Record Call. (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "state_text",
									"value": "",
									"description": "County. (Regex: /^.+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "city",
									"value": "",
									"description": "City. (Regex: /^.+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "areacode",
									"value": "",
									"description": "Area Code. (Regex: /^.+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "sms_enabled",
									"value": "",
									"description": "Use DID as SMS number. (Regex: /^(1|0)$/)",
									"type": "text",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Editing DIDs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0653ed2b-b44c-444f-bf85-7f3ce7082099",
								"exec": [
									"",
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the success response",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('string');",
									"",
									"        // Print the result for each edited DID",
									"        console.log('Edited DID ID:', responseBody.id);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a1fd71a2-2ba1-4899-83a1-d6e5c4ad69c7",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "54c1e5e2-7651-46c2-a126-bbf89155d5e6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.did.edit&server={{Srv/Tenant-ID}}&id={{DID-IDs}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.did.edit",
									"description": "If want to edit more DID in one move use CSV file Add&EditDIDs.csv. In CSV file just populate field for Srv/Tenant-ID and DID-IDs."
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Tenant or Server ID (Required)   If PBXware is running in Tenant Mode this is a required field and must contain a valid Tenant ID.   ID 1 is always assigned to Master tenant and cannot be used."
								},
								{
									"key": "id",
									"value": "{{DID-IDs}}",
									"description": "DID ID (Required)"
								},
								{
									"key": "name",
									"value": "",
									"type": "text",
									"disabled": true
								},
								{
									"key": "trunk",
									"value": "",
									"description": "Trunk ID to which DID is mapped. (Regex: /^\\\\d+$/)",
									"disabled": true
								},
								{
									"key": "did",
									"value": "",
									"description": "Actual DID number. (Regex: /^\\\\d+$/)",
									"disabled": true
								},
								{
									"key": "dest_type",
									"value": "",
									"description": "Destination Type for DID. (Regex: /^\\\\d{1}$/)\n0: Extension\n1: Forward DID to Extension (Multi User)\n2: Ring Group\n3: IVR\n4: Queues\n5: External Number\n",
									"disabled": true
								},
								{
									"key": "destination",
									"value": "",
									"description": "DID destination. (Regex: /^\\\\d+$/)",
									"disabled": true
								},
								{
									"key": "disabled",
									"value": "",
									"description": "Disable DID by default.  1: Disabled  0: Enabled",
									"disabled": true
								},
								{
									"key": "did2",
									"value": "",
									"description": "DID number (end)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "groupid",
									"value": "",
									"description": "DID Group ID",
									"type": "text",
									"disabled": true
								},
								{
									"key": "e164",
									"value": "",
									"description": "E.164 Number (start) (Regex: /^\\\\d+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "e164_2",
									"value": "",
									"description": "E.164 Number (end). (Regex: /^\\\\d+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "callerid",
									"value": "",
									"description": "Replace Caller ID. (Regex: /^[\\\\+\\\\w\\\\s%]+(\\\\s*<[\\\\+\\\\w%]+>)?$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "splan",
									"value": "",
									"description": "Service Plan. (Regex: /^(0|-1|2147483647)$/)",
									"disabled": true
								},
								{
									"key": "billingext",
									"value": "",
									"description": "Billing Extension. (deprecated and will be soon replaced with call_rating_ext) (Regex: /^\\\\d{3}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "call_rating_ext",
									"value": "",
									"description": "Call Rating Extension. (Regex: /^\\\\d{3}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "greeting",
									"value": "",
									"description": "Greeting. (Regex: /^greeting\\\\-did\\\\-([\\\\w\\\\-]+)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "stripn",
									"value": "",
									"description": "Strip N digits. (Regex: /^\\\\d+$/)",
									"disabled": true
								},
								{
									"key": "qprio",
									"value": "",
									"description": "Queue Priority. (Regex: /^\\\\d{1,2}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "codec",
									"value": "",
									"description": "Force Codec. (Regex: /^(ulaw|alaw|g722|opus|g723|g726|g726aal2|g729|gsm|ilbc|speex|speex16|speex32|lpc10|h261|h263|h263p|h264)+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "ringtone",
									"value": "",
									"description": "Custom Ringtone. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "recordcall",
									"value": "",
									"description": "Record Call. (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "state_text",
									"value": "",
									"description": "County. (Regex: /^.+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "city",
									"value": "",
									"description": "City. (Regex: /^.+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "areacode",
									"value": "",
									"description": "Area Code. (Regex: /^.+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "sms_enabled",
									"value": "",
									"description": "Use DID as SMS number. (Regex: /^(1|0)$/)",
									"type": "text",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Deleting DIDs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3b1bd6d4-55d8-43b7-866f-e0f43a1019a6",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the success response",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"",
									"        // Print the result for each deleted DID",
									"        console.log('Deleted DID:', responseBody.success);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "72ad905c-9fbf-4ab5-9fc2-7eb8560f81d1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.did.delete&server={{Srv/Tenant-ID}}&id={{DID-IDs}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.did.delete",
									"description": "Use CSV file Add&EditDIDs.csv and populate only Srv/TenantDIDs and DID-IDs column to delete more DIDs at one time."
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Server/Tenant ID. In Tenant Mode make sure this is always set to 1."
								},
								{
									"key": "id",
									"value": "{{DID-IDs}}",
									"description": "DID ID"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "0334f844-6c03-4920-a89b-e87bcd6eb965",
			"description": "# DIDs\n\nSupported Methods:\n\n`list` - List DIDs\n\n`add` - Add new DID\n\n`edit` - Edit existing DID\n\n`delete` - Delete existing DID"
		},
		{
			"name": "DID Groups",
			"item": [
				{
					"name": "Listing DID groups",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ce349c3c-3170-482b-a7e0-ceb7b82d046e",
								"exec": [
									"pm.collectionVariables.unset(\"DIDGroupID\");",
									"pm.environment.unset(\"DIDGroupID\");",
									"",
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the response is an empty array",
									"    if (Array.isArray(responseBody) && responseBody.length === 0) {",
									"        console.log(\"There is no DID groups to show!\");",
									"        pm.test('No DID Groups Found', function () {",
									"            pm.expect.fail(\"No DID groups found\");",
									"        });",
									"    } else {",
									"        // Validate the response structure",
									"        pm.test('Response Validation', function () {",
									"            pm.expect(responseBody).to.be.an('object');",
									"",
									"            // Get the existing DID group IDs array from the environment",
									"            var didGroupIDs = pm.collectionVariables.get('DIDGroupID') || [];",
									"",
									"            // Loop through DID group data",
									"            for (var groupID in responseBody) {",
									"                var groupData = responseBody[groupID];",
									"",
									"                // Save the group ID to the DID group IDs array",
									"                didGroupIDs.push(groupID);",
									"",
									"                // Validate specific properties for each DID group",
									"                pm.test('DID Group ' + groupID + ' Data Validation', function () {",
									"                    pm.expect(groupData).to.be.an('object');",
									"                    pm.expect(groupData).to.have.property('group_name').that.is.a('string');",
									"                    pm.expect(groupData).to.have.property('max_did').that.is.a('string');",
									"                    pm.expect(groupData).to.have.property('min_did').that.is.a('string');",
									"                    pm.expect(groupData).to.have.property('tenant').that.is.a('string');",
									"",
									"                    // Print the result for each DID group",
									"                    console.log('Group ID:', groupID);",
									"                    console.log('Group Name:', groupData.group_name);",
									"                    console.log('Max DID:', groupData.max_did);",
									"                    console.log('Min DID:', groupData.min_did);",
									"                    console.log('Tenant:', groupData.tenant);",
									"                });",
									"            }",
									"",
									"            // Update the DID group IDs array in the environment",
									"            pm.collectionVariables.set('DIDGroupID', didGroupIDs);",
									"            pm.environment.set('DIDGroupID', didGroupIDs);",
									"        });",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "25a6835a-2a5b-4239-9bdd-2763f46b929c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.didgroup.list",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.didgroup.list",
									"description": "Listing of DID groups, by default, will include all DID groups."
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Adding DID Groups",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1cad5170-a912-429b-abdd-b0f55bc2c505",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('number');",
									"",
									"        // Print the success message and ID",
									"        console.log('Success:', responseBody.success);",
									"        console.log('DID Group ID:', responseBody.id);",
									"",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0ae6f128-01ca-46b0-b719-1e4d6fd62b73",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.didgroup.add&server=1&group_name={{DIDGroupName}}&tenantid={{Srv/Tenant-ID}}&min_did={{DIDMin}}&max_did={{DIDMax}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.didgroup.add",
									"description": "For Add few DID groups use CSV file DIDGroup.csv"
								},
								{
									"key": "server",
									"value": "1",
									"description": "Always must be set to 1. (Required)"
								},
								{
									"key": "group_name",
									"value": "{{DIDGroupName}}",
									"description": "DID Group Name (Required). (Regex: /^[[:alnum:][:punct:][:space:]]+$/)"
								},
								{
									"key": "tenantid",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Tenant ID that DID group is mapped to. (Required). (Regex: /^\\d+$/)"
								},
								{
									"key": "min_did",
									"value": "{{DIDMin}}",
									"description": "DID Group range start (Required) (Regex: /^\\d+$/)"
								},
								{
									"key": "max_did",
									"value": "{{DIDMax}}",
									"description": "DID Group range end (Required) (Regex: /^\\d+$/)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Editing DID Groups",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1cad5170-a912-429b-abdd-b0f55bc2c505",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('string');",
									"",
									"        // Print the success message and ID",
									"        console.log('Success:', responseBody.success);",
									"        console.log('DID Group ID:', responseBody.id);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "9ce5cc6b-350a-4ba0-9e40-d58b6953ccb6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.didgroup.edit&server=1&id={{DIDGroupID}}&group_name=",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.didgroup.edit",
									"description": "For Editing few DID groups use CSV file DIDGroup.csv"
								},
								{
									"key": "server",
									"value": "1",
									"description": "Always must be set to 1."
								},
								{
									"key": "id",
									"value": "{{DIDGroupID}}",
									"description": "DID Group ID"
								},
								{
									"key": "group_name",
									"value": "",
									"description": "DID Group Name. (Regex: /^[[:alnum:][:punct:][:space:]]+$/)"
								},
								{
									"key": "tenantid",
									"value": "",
									"description": "Tenant ID that DID group is mapped to. (Regex: /^\\d+$/)",
									"disabled": true
								},
								{
									"key": "min_did",
									"value": "",
									"description": "DID Group range start. (Regex: /^\\d+$/)",
									"disabled": true
								},
								{
									"key": "max_did",
									"value": "",
									"description": "DID Group range end. (Regex: /^\\d+$/)",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Deleting DID Groups",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1cad5170-a912-429b-abdd-b0f55bc2c505",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the success message",
									"    pm.test('Success Message Validation', function () {",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        console.log('Success:', responseBody.success);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a48075a0-32e0-4dd5-be18-ae207a844095",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.didgroup.delete&server=1&id={{DIDGroupID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.didgroup.delete",
									"description": "For Deleting few DID groups use CSV file DIDGroup.csv"
								},
								{
									"key": "server",
									"value": "1",
									"description": "Always must be set to 1."
								},
								{
									"key": "id",
									"value": "{{DIDGroupID}}",
									"description": "DID Group ID"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "af4f2bec-b560-4b67-904d-ca4ff885bce7",
			"description": "# DID Groups\n\nSupported Methods:\n\n`list` - List DID Groups\n\n`add` - Add new DID Group\n\n`edit` - Edit existing DID Group\n\n`delete` - Delete existing DID Group"
		},
		{
			"name": "IVRs",
			"item": [
				{
					"name": "Listing IVRs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "61340d43-1ab6-4dfe-aff7-3ce4bccb3c99",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else if (Object.keys(responseBody).length === 0) {",
									"    console.log(\"There are no IVRs to show!\");",
									"    pm.test('Empty Response Validation', function () {",
									"        pm.expect.fail(\"There are no IVRs to show!\");",
									"    });",
									"} else {",
									"    // Get the existing IVR IDs array from the environment",
									"    var ivrIDs = pm.collectionVariables.get('IVR-ID') || [];",
									"    ",
									"    // Loop through IVR data",
									"    for (var ivrID in responseBody) {",
									"        var ivrData = responseBody[ivrID];",
									"        ",
									"        // Validate specific properties for each IVR",
									"        pm.test('IVR ' + ivrID + ' Data Validation', function () {",
									"            pm.expect(ivrData).to.be.an('object');",
									"            pm.expect(ivrData).to.have.property('name').that.is.a('string');",
									"            pm.expect(ivrData).to.have.property('type').that.is.oneOf(['0', '1', '2']);",
									"            pm.expect(ivrData).to.have.property('ext').that.is.a('string');",
									"            pm.expect(ivrData).to.have.property('keymap').that.is.an('object');",
									"            pm.expect(ivrData).to.have.property('status').that.is.oneOf(['enabled', 'disabled']);",
									"            pm.expect(ivrData).to.have.property('operator').hat.is.oneOf([null, 'string']);",
									"            ",
									"            // Print the result for each IVR",
									"            console.log('IVR ID:', ivrID);",
									"            console.log('IVR Name:', ivrData.name);",
									"            console.log('IVR Type:', ivrData.type);",
									"            console.log('IVR Extension:', ivrData.ext);",
									"            console.log('IVR Keymap Type:', ivrData.keymap.type);",
									"            console.log('IVR Keymap Value:', ivrData.keymap.value);",
									"            console.log('IVR Status:', ivrData.status);",
									"            console.log('IVR Operator:', ivrData.operator);",
									"            ",
									"            // Push the IVR ID to the IVR IDs array",
									"            ivrIDs.push(ivrID);",
									"        });",
									"    }",
									"    ",
									"    // Update the IVR IDs array in the environment",
									"    pm.collectionVariables.set('IVR-ID', ivrIDs);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "425d40b1-30c8-4dd8-96a9-f14dcfa44246",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ivr.list&server={{Srv/Tenant-ID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ivr.list",
									"description": "Listing of IVRs, by default, will include all IVRs. If you wish to filter by server/tenant, you have to specify correct server argument. List of Tenant IDs, you can fetch from tenant object."
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Filter IVR list by Server/Tenant ID If PBXware is running in Tenant Mode this is a required field and must contain a valid Tenant ID. ID 1 is always assigned to Master tenant and cannot be used."
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Adding IVRs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "14411571-5552-4b1f-8401-5fed2fe2006b",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('number');",
									"",
									"        // Print the success message and ID",
									"        console.log('Success:', responseBody.success);",
									"        console.log('IVR ID:', responseBody.id);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5c8f3419-9595-4cc8-a838-8b5f7ac5d783",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ivr.add&server={{Srv/Tenant-ID}}&name={{IVRName}}&ext={{IVRNum}}&greeting={{IVRGreet}}&status={{IVRStatus}}&keymap[1][type]={{Key1Type}}&keymap[1][destination]={{Key1Dest}}&keymap[2][type]={{Key2Type}}&keymap[2][destination]={{Key2Dest}}&keymap[3][type]={{Key3Type}}&keymap[3][destination]={{Key3Dest}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ivr.add",
									"description": "To add multiple IVRs use IVRs.csv file."
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Tenant or Server ID (Required) If PBXware is running in Tenant Mode this is a required field and must contain a valid Tenant ID.ID 1 is always assigned to Master tenant and cannot be used."
								},
								{
									"key": "name",
									"value": "{{IVRName}}",
									"description": "IVR name. (Required). No spaces are allowed at the moment."
								},
								{
									"key": "ext",
									"value": "{{IVRNum}}",
									"description": "IVR extension number. (Required)"
								},
								{
									"key": "greeting",
									"value": "{{IVRGreet}}",
									"description": "IVR Greeting (Required). All greetings must begin with greeting-."
								},
								{
									"key": "status",
									"value": "{{IVRStatus}}",
									"description": "IVR status  1: Enabled   0: Disabled"
								},
								{
									"key": "operator",
									"value": "",
									"description": "Operator extension",
									"type": "text",
									"disabled": true
								},
								{
									"key": "disablecid",
									"value": "",
									"description": "Disable CallerID (PIN-based IVR only)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "tresponse",
									"value": "",
									"description": "Response timeout (in seconds) Default is 4.",
									"type": "text",
									"disabled": true
								},
								{
									"key": "rtpdelay",
									"value": "",
									"description": "RTP Delay (in seconds)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "tdigit",
									"value": "",
									"description": "Digit timeout (in seconds) Default is 1.",
									"type": "text",
									"disabled": true
								},
								{
									"key": "rings",
									"value": "",
									"description": "Rings to Answer. Default is 1.",
									"type": "text",
									"disabled": true
								},
								{
									"key": "faxemail",
									"value": "",
									"description": "FAX Email",
									"type": "text",
									"disabled": true
								},
								{
									"key": "customring",
									"value": "",
									"description": "Custom ring tone",
									"type": "text",
									"disabled": true
								},
								{
									"key": "local2fax",
									"value": "",
									"description": "FAX dialing",
									"type": "text",
									"disabled": true
								},
								{
									"key": "rangelimit",
									"value": "",
									"description": "Enable range limit",
									"type": "text",
									"disabled": true
								},
								{
									"key": "rangestart",
									"value": "",
									"description": "Start at",
									"type": "text",
									"disabled": true
								},
								{
									"key": "rangeend",
									"value": "",
									"description": "End at",
									"type": "text",
									"disabled": true
								},
								{
									"key": "ringtype",
									"value": "",
									"description": "Ringing Type\n   ring: Generate Ringing\n   moh: Music on Hold\n   none: None\n   Default is ring.",
									"type": "text",
									"disabled": true
								},
								{
									"key": "moh",
									"value": "",
									"description": "Music on Hold class. Applies only if ringtype is set to moh.",
									"type": "text",
									"disabled": true
								},
								{
									"key": "loops",
									"value": "",
									"description": "Number of loops before timoeut. Default is 3.",
									"type": "text",
									"disabled": true
								},
								{
									"key": "timeoutext",
									"value": "",
									"description": "Timeout Extension",
									"type": "text",
									"disabled": true
								},
								{
									"key": "timeoutextvm",
									"value": "",
									"description": "Timeout Extension Is Voicemail",
									"type": "text",
									"disabled": true
								},
								{
									"key": "localdial",
									"value": "",
									"description": "Local/Remote dialing   1: Enabled   0: Disabled   It is disabled by default.",
									"type": "text",
									"disabled": true
								},
								{
									"key": "keymap[0][type]",
									"value": "{{Key0Type}}",
									"description": "Array of IVR keymaps (At least one keymap is required)\nThis argument is to be sent as keymap[key][field]=value\nSupported keys:\n   0-9\n   \\*\nSupported fields:\n   type: Destination Type\n   destination: Destination (can be any valid extension)\nSupported Destination Types:\n   aa: IVR\n   qu: Queue\n   cf: Conference\n   ex: Extension\n   vm: Voicemail\nExample:  keymap[\\*][type]=aa&keymap[\\*][destination]=103\n",
									"disabled": true
								},
								{
									"key": "keymap[0][destination]",
									"value": "{{Key0Dest}}",
									"disabled": true
								},
								{
									"key": "keymap[1][type]",
									"value": "{{Key1Type}}"
								},
								{
									"key": "keymap[1][destination]",
									"value": "{{Key1Dest}}"
								},
								{
									"key": "keymap[2][type]",
									"value": "{{Key2Type}}"
								},
								{
									"key": "keymap[2][destination]",
									"value": "{{Key2Dest}}"
								},
								{
									"key": "keymap[3][type]",
									"value": "{{Key3Type}}"
								},
								{
									"key": "keymap[3][destination]",
									"value": "{{Key3Dest}}"
								},
								{
									"key": "keymap[4][type]",
									"value": "{{Key4Type}}",
									"disabled": true
								},
								{
									"key": "keymap[4][destination]",
									"value": "{{Key4Dest}}",
									"disabled": true
								},
								{
									"key": "keymap[5][type]",
									"value": "{{Key5Type}}",
									"disabled": true
								},
								{
									"key": "keymap[5][destination]",
									"value": "{{Key5Dest}}",
									"disabled": true
								},
								{
									"key": "keymap[6][type]",
									"value": "{{Key6Type}}",
									"disabled": true
								},
								{
									"key": "keymap[6][destination]",
									"value": "{{Key6Dest}}",
									"disabled": true
								},
								{
									"key": "keymap[7][type]",
									"value": "{{Key7Type}}",
									"disabled": true
								},
								{
									"key": "keymap[7][destination]",
									"value": "{{Key7Dest}}",
									"disabled": true
								},
								{
									"key": "keymap[8][type]",
									"value": "{{Key8Type}}",
									"disabled": true
								},
								{
									"key": "keymap[8][destination]",
									"value": "{{Key8Dest}}",
									"disabled": true
								},
								{
									"key": "keymap[9][type]",
									"value": "{{Key9Type}}",
									"disabled": true
								},
								{
									"key": "keymap[9][destination]",
									"value": "{{Key9Dest}}",
									"disabled": true
								},
								{
									"key": "keymap[\\*][type]",
									"value": "{{Key*Type}}",
									"disabled": true
								},
								{
									"key": "keymap[\\*][destination]",
									"value": "{{Key*Dest}}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Editing IVRs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "14411571-5552-4b1f-8401-5fed2fe2006b",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('string');",
									"",
									"        // Print the success message and ID",
									"        console.log('Success:', responseBody.success);",
									"        console.log('IVR ID:', responseBody.id);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "60b47485-3bd3-4b1a-bdc3-9098de47809d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ivr.edit&server={{Srv/Tenant-ID}}&id={{IVRsID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ivr.edit",
									"description": "To edit multiple IVRs use IVRs.csv file, and populate column IVRsID."
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Tenant or Server ID (Required) If PBXware is running in Tenant Mode this is a required field and must contain a valid Tenant ID.ID 1 is always assigned to Master tenant and cannot be used."
								},
								{
									"key": "id",
									"value": "{{IVRsID}}",
									"description": "IVRs ID. (Required)"
								},
								{
									"key": "name",
									"value": "",
									"description": "IVR name. No spaces are allowed at the moment. (Regex: /^[\\\\w\\\\s]+$/)",
									"disabled": true
								},
								{
									"key": "ext",
									"value": "",
									"description": "IVR extension number. (Regex: /^\\\\d+$/)",
									"disabled": true
								},
								{
									"key": "greeting",
									"value": "",
									"description": "IVR Greeting. All greetings must begin with greeting-. (Regex: /^greeting\\\\-([\\\\w\\\\-]+)$/)",
									"disabled": true
								},
								{
									"key": "status",
									"value": "",
									"description": "IVR status  1: Enabled   0: Disabled",
									"disabled": true
								},
								{
									"key": "operator",
									"value": "",
									"description": "Operator extension. (Regex: /^\\\\d+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "disablecid",
									"value": "",
									"description": "Disable CallerID (PIN-based IVR only). Yes=1, No=0, NotSet=2",
									"type": "text",
									"disabled": true
								},
								{
									"key": "tresponse",
									"value": "",
									"description": "Response timeout (in seconds) Default is 4. (Regex: /^\\\\d{1,5}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "rtpdelay",
									"value": "",
									"description": "RTP Delay (in seconds). (Regex: /^\\\\d{1,3}$/). Default is 1",
									"type": "text",
									"disabled": true
								},
								{
									"key": "tdigit",
									"value": "",
									"description": "Digit timeout (in seconds) Default is 1. (Regex: /^\\\\d{1,5}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "rings",
									"value": "",
									"description": "Rings to Answer. Default is 1. (Regex: /^\\\\d{1}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "faxemail",
									"value": "",
									"description": "FAX Email. (Regex: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "customring",
									"value": "",
									"description": "Custom ring tone. (Regex: /^\\\\w+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "local2fax",
									"value": "",
									"description": "FAX dialing. Yes=1, No=0, NotSet=2",
									"type": "text",
									"disabled": true
								},
								{
									"key": "rangelimit",
									"value": "",
									"description": "Enable range limit. Yes=1, No=0, NotSet=2",
									"type": "text",
									"disabled": true
								},
								{
									"key": "rangestart",
									"value": "",
									"description": "Start at. (Regex: /^\\\\d{1,3}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "rangeend",
									"value": "",
									"description": "End at. (Regex: /^\\\\d{1,3}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "ringtype",
									"value": "",
									"description": "Ringing Type\n   ring: Generate Ringing\n   moh: Music on Hold\n   none: None\n   Default is ring.",
									"type": "text",
									"disabled": true
								},
								{
									"key": "moh",
									"value": "",
									"description": "Music on Hold class. Applies only if ringtype is set to moh.",
									"type": "text",
									"disabled": true
								},
								{
									"key": "loops",
									"value": "",
									"description": "Number of loops before timoeut. Default is 3. (Regex: /^([1-9]|1[0-9]|20)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "timeoutext",
									"value": "",
									"description": "Timeout Extension. (Regex: /^\\\\d+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "timeoutextvm",
									"value": "",
									"description": "Timeout Extension Is Voicemail. Yes=1, No=0, NotSet=2",
									"type": "text",
									"disabled": true
								},
								{
									"key": "localdial",
									"value": "",
									"description": "Local/Remote dialing   1: Enabled   0: Disabled   It is disabled by default.",
									"type": "text",
									"disabled": true
								},
								{
									"key": "keymap[0][type]",
									"value": "",
									"description": "Array of IVR keymaps. This argument is to be sent as keymap[key][field]=value\nSupported keys: \"0-9\" and  \"\\*\"\nSupported fields:\n   type: Destination Type\n   destination: Destination (can be any valid extension)\nSupported Destination Types:\n   aa: IVR\n   qu: Queue\n   cf: Conference\n   ex: Extension\n   vm: Voicemail",
									"disabled": true
								},
								{
									"key": "keymap[0][destination]",
									"value": "",
									"type": "text",
									"disabled": true
								},
								{
									"key": "keymap[1][type]",
									"value": "",
									"type": "text",
									"disabled": true
								},
								{
									"key": "keymap[1][destination]",
									"value": "",
									"type": "text",
									"disabled": true
								},
								{
									"key": "keymap[2][type]",
									"value": "",
									"type": "text",
									"disabled": true
								},
								{
									"key": "keymap[2][destination]",
									"value": "",
									"type": "text",
									"disabled": true
								},
								{
									"key": "keymap[3][type]",
									"value": "",
									"type": "text",
									"disabled": true
								},
								{
									"key": "keymap[3][destination]",
									"value": "",
									"type": "text",
									"disabled": true
								},
								{
									"key": "keymap[4][type]",
									"value": "",
									"type": "text",
									"disabled": true
								},
								{
									"key": "keymap[4][destination]",
									"value": "",
									"type": "text",
									"disabled": true
								},
								{
									"key": "keymap[5][type]",
									"value": "",
									"type": "text",
									"disabled": true
								},
								{
									"key": "keymap[5][destination]",
									"value": "",
									"type": "text",
									"disabled": true
								},
								{
									"key": "keymap[6][type]",
									"value": "",
									"type": "text",
									"disabled": true
								},
								{
									"key": "keymap[6][destination]",
									"value": "",
									"type": "text",
									"disabled": true
								},
								{
									"key": "keymap[7][type]",
									"value": "",
									"type": "text",
									"disabled": true
								},
								{
									"key": "keymap[7][destination]",
									"value": "",
									"type": "text",
									"disabled": true
								},
								{
									"key": "keymap[8][type]",
									"value": "",
									"type": "text",
									"disabled": true
								},
								{
									"key": "keymap[8][destination]",
									"value": "",
									"type": "text",
									"disabled": true
								},
								{
									"key": "keymap[9][type]",
									"value": "",
									"type": "text",
									"disabled": true
								},
								{
									"key": "keymap[9][destination]",
									"value": "",
									"type": "text",
									"disabled": true
								},
								{
									"key": "keymap[/*][type]",
									"value": "",
									"type": "text",
									"disabled": true
								},
								{
									"key": "keymap[/*][destination]",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Deleting IVRs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1d41d1f2-e46f-4a01-9360-b3bf0247cc64",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"",
									"        // Print the success message",
									"        console.log('Success:', responseBody.success);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b8721f4e-2c48-48ff-b10f-22fd46fbce81",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ivr.delete&server={{Srv/Tenant-ID}}&id={{IVRsID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ivr.delete",
									"description": "Use CSV IVRs.csv file for deleting more IVRs in one move. Populate Srv/Tenant-ID and IVRsID."
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Server/Tenant ID. If running in Tenant Mode, make sure this is always greater than 1."
								},
								{
									"key": "id",
									"value": "{{IVRsID}}",
									"description": "IVRs ID"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "002550cc-0070-46a2-98f2-e46235f73151",
			"description": "# IVRs\n\nSupported Methods:\n\n`list` - List IVRs\n\n`add` - Add new IVR\n\n`edit` - Edit existing IVR\n\n`delete` - Delete existing IVR"
		},
		{
			"name": "Ring Groups",
			"item": [
				{
					"name": "Listing Ring Groups",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc793a92-bc57-4cdc-b5cc-59f88bc48a13",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else if (Object.keys(responseBody).length === 0) {",
									"    console.log(\"There is no Ring Groups for this Server/Tenant!\");",
									"    pm.test('No Ring Groups!', function () {",
									"        pm.expect.fail(\"No Ring Groups for this Server/Tenant!\");",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        ",
									"        // Initialize array to store Ring Group IDs",
									"        var rgIDs = [];",
									"        ",
									"        // Loop through Ring Group data",
									"        for (var ringGroupID in responseBody) {",
									"            var ringGroupData = responseBody[ringGroupID];",
									"            ",
									"            // Validate specific properties for each Ring Group",
									"            pm.test('Ring Group ' + ringGroupID + ' Data Validation', function () {",
									"                pm.expect(ringGroupData).to.be.an('object');",
									"                pm.expect(ringGroupData).to.have.property('name').that.is.a('string');",
									"                pm.expect(ringGroupData).to.have.property('ext').that.is.a('string');",
									"                pm.expect(ringGroupData).to.have.property('destinations').that.is.a('string');",
									"                pm.expect(ringGroupData).to.have.property('last_dest').that.is.a('string');",
									"                pm.expect(ringGroupData).to.have.property('last_dest_vm').that.is.oneOf(['yes', 'no']);",
									"                ",
									"                // Print the result for each Ring Group",
									"                console.log('Ring Group ID:', ringGroupID);",
									"                console.log('Ring Group Name:', ringGroupData.name);",
									"                console.log('Ring Group Extension:', ringGroupData.ext);",
									"                console.log('Ring Group Destinations:', ringGroupData.destinations);",
									"                console.log('Ring Group Last Destination:', ringGroupData.last_dest);",
									"                console.log('Ring Group Last Destination is Voicemail:', ringGroupData.last_dest_vm);",
									"                ",
									"                // Push the Ring Group ID to the array",
									"                rgIDs.push(ringGroupID);",
									"            });",
									"        }",
									"        ",
									"        // Save the Ring Group IDs to variables",
									"        pm.collectionVariables.set('RGsID', rgIDs);",
									"        pm.environment.set('RGsID', rgIDs);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "22c7cba2-3b1f-4da5-9625-eafd8ece1f2e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ring_group.list&server={{Srv/Tenant-ID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ring_group.list"
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Filter Ring Group list by Server/Tenant ID. If PBXware is running in Tenant Mode this is a required field and must contain a valid Tenant ID. ID 1 is always assigned to Master tenant and cannot be used."
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Adding Ring Groups",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "246ba5c6-8b40-4da5-b61c-721e80b8ce96",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('number');",
									"",
									"        // Print the success message and ID",
									"        console.log('Success:', responseBody.success);",
									"        console.log('Ring Group ID:', responseBody.id);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "71eabf31-59b1-495c-a89b-844abd9529f8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ring_group.add&server={{Srv/Tenant-ID}}&name={{RGName}}&ext={{RGNum}}&extensions={{RGExt}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ring_group.add",
									"description": "To add multiple RGs use RGs.csv file."
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Tenant or Server ID (Required). If PBXware is running in Tenant Mode this is a required field and must contain a valid Tenant ID. ID 1 is always assigned to Master tenant and cannot be used."
								},
								{
									"key": "name",
									"value": "{{RGName}}",
									"description": "Ring Group name. (Required)"
								},
								{
									"key": "ext",
									"value": "{{RGNum}}",
									"description": "Ring Group extension. (Required)"
								},
								{
									"key": "extensions",
									"value": "{{RGExt}}",
									"description": "List of all ring group extensions separated by ,"
								},
								{
									"key": "max_limit",
									"value": "",
									"description": "Number of concurrent calls allowed into Ring Group (default is 1). (Regex: /^\\\\d{1,2}$/)",
									"disabled": true
								},
								{
									"key": "greeting",
									"value": "",
									"description": "Ring Group Greeting All greetings must begin with greeting-. (Regex: /^greeting\\\\-([\\\\w\\\\-]+)$/)",
									"disabled": true
								},
								{
									"key": "ganswer",
									"value": "",
									"description": "Perform Answer on undefined greeting (Specify yes or no)",
									"disabled": true
								},
								{
									"key": "timeout_msg",
									"value": null,
									"description": "Timeout message. All timeout messages begin with announce-. (Regex: /^announce\\\\-([\\\\w\\\\-]+)$/)",
									"disabled": true
								},
								{
									"key": "loops",
									"value": "",
									"description": "Number of Ring loops (default is 1). (Regex: /^\\\\d{1,2}$/)",
									"disabled": true
								},
								{
									"key": "timeout",
									"value": "",
									"description": "Timeout for Ring Group (default is 30 seconds). (Regex: /^\\\\d{1,8}$/)",
									"disabled": true
								},
								{
									"key": "overwrite_timeout",
									"value": "",
									"description": "Force Ring Group Timeout (Specify yes or no)",
									"disabled": true
								},
								{
									"key": "dial_options",
									"value": "",
									"description": "Dial options (default is r). (Regex: /^\\\\w+$/)",
									"disabled": true
								},
								{
									"key": "store_cdr",
									"value": "",
									"description": "Store Unanswered CDRs (Specify yes or no)",
									"disabled": true
								},
								{
									"key": "last_dest",
									"value": "",
									"description": "Last Destination. (Regex: /^(yes|no)$/)",
									"disabled": true
								},
								{
									"key": "last_dest_vm",
									"value": "",
									"description": "Last Destination is Voicemail (Specify yes or no)",
									"disabled": true
								},
								{
									"key": "ring_strategy",
									"value": "",
									"description": "Ring Strategy. List of available strategies:\n   all (Default)\n   leastrecent\n   round\n   round_memory",
									"disabled": true
								},
								{
									"key": "custom_ringtone",
									"value": "",
									"description": "Custom Ringtone for SIP devices. (Regex: /^\\\\w+$/)",
									"disabled": true
								},
								{
									"key": "callerid",
									"value": "",
									"description": "Replace Caller ID. (Regex: /^[\\\\+\\\\w\\\\s%]+(\\\\s*<[\\\\+%\\\\w]+>)?$/)",
									"disabled": true
								},
								{
									"key": "record",
									"value": "",
									"description": "Record calls (Specify yes or no)",
									"disabled": true
								},
								{
									"key": "record_silent",
									"value": "",
									"description": "Silent Recordings (Specify yes or no)",
									"disabled": true
								},
								{
									"key": "exit_digit",
									"value": "",
									"description": "Exit Digit. (Regex: /^\\\\d{1}$/)",
									"disabled": true
								},
								{
									"key": "exit_ext",
									"value": "",
									"description": "Exit Extension. (Regex: /^\\\\d{3}$/)",
									"disabled": true
								},
								{
									"key": "confirm_calls",
									"value": "",
									"description": "Confirm Calls. (Regex: /^(yes|no)$/)",
									"disabled": true
								},
								{
									"key": "confirm_msg",
									"value": "",
									"description": "Confirmation Message. All confirmation messages begin with rg-announce-.",
									"disabled": true
								},
								{
									"key": "confirm_answered_msg",
									"value": "",
									"description": "Call Answered Message. All call answered messages begin with rg-late-announce-.",
									"disabled": true
								},
								{
									"key": "call_rating_ext",
									"value": "",
									"description": "Call Rating Extension. (Regex: /^\\\\d{3}$/)",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Editing Ring Groups",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "246ba5c6-8b40-4da5-b61c-721e80b8ce96",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Successfully edited Ring Group!', function () {",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('string');",
									"",
									"        // Print the success message and ID",
									"        console.log('Success:', responseBody.success);",
									"        console.log('Ring Group ID:', responseBody.id);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "36cf83e9-b6d7-4355-9752-b3b70a3f0ca8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ring_group.edit&server={{Srv/Tenant-ID}}&id={{RGsID}}&name={{RGName}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ring_group.edit",
									"description": "To edit multiple RGs use RGs.csv file."
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Tenant or Server ID (Required). If PBXware is running in Tenant Mode this is a required field and must contain a valid Tenant ID. ID 1 is always assigned to Master tenant and cannot be used."
								},
								{
									"key": "id",
									"value": "{{RGsID}}",
									"description": "Ring Group ID. (Required)"
								},
								{
									"key": "name",
									"value": "{{RGName}}",
									"description": "Ring Group name."
								},
								{
									"key": "ext",
									"value": "{{RGNum}}",
									"description": "Ring Group extension.",
									"disabled": true
								},
								{
									"key": "extensions",
									"value": "{{RGExt}}",
									"description": "List of all ring group extensions separated by ,",
									"disabled": true
								},
								{
									"key": "max_limit",
									"value": "",
									"description": "Number of concurrent calls allowed into Ring Group (default is 1). (Regex: /^\\\\d{1,2}$/)",
									"disabled": true
								},
								{
									"key": "greeting",
									"value": "",
									"description": "Ring Group Greeting All greetings must begin with greeting-. (Regex: /^greeting\\\\-([\\\\w\\\\-]+)$/)",
									"disabled": true
								},
								{
									"key": "ganswer",
									"value": "",
									"description": "Perform Answer on undefined greeting (Specify yes or no)",
									"disabled": true
								},
								{
									"key": "timeout_msg",
									"value": "",
									"description": "Timeout message. All timeout messages begin with announce-. (Regex: /^announce\\\\-([\\\\w\\\\-]+)$/)",
									"disabled": true
								},
								{
									"key": "loops",
									"value": "",
									"description": "Number of Ring loops (default is 1). (Regex: /^\\\\d{1,2}$/)",
									"disabled": true
								},
								{
									"key": "timeout",
									"value": "",
									"description": "Timeout for Ring Group (default is 30 seconds). (Regex: /^\\\\d{1,8}$/)",
									"disabled": true
								},
								{
									"key": "overwrite_timeout",
									"value": "",
									"description": "Force Ring Group Timeout (Specify yes or no)",
									"disabled": true
								},
								{
									"key": "dial_options",
									"value": "",
									"description": "Dial options (default is r). (Regex: /^\\\\w+$/)",
									"disabled": true
								},
								{
									"key": "store_cdr",
									"value": "",
									"description": "Store Unanswered CDRs (Specify yes or no)",
									"disabled": true
								},
								{
									"key": "last_dest",
									"value": "",
									"description": "Last Destination. (Regex: /^(yes|no)$/)",
									"disabled": true
								},
								{
									"key": "last_dest_vm",
									"value": "",
									"description": "Last Destination is Voicemail (Specify yes or no)",
									"disabled": true
								},
								{
									"key": "ring_strategy",
									"value": "",
									"description": "Ring Strategy. List of available strategies:\n   all (Default)\n   leastrecent\n   round\n   round_memory",
									"disabled": true
								},
								{
									"key": "custom_ringtone",
									"value": "",
									"description": "Custom Ringtone for SIP devices. (Regex: /^\\\\w+$/)",
									"disabled": true
								},
								{
									"key": "callerid",
									"value": "",
									"description": "Replace Caller ID. (Regex: /^[\\\\+\\\\w\\\\s%]+(\\\\s*<[\\\\+%\\\\w]+>)?$/)",
									"disabled": true
								},
								{
									"key": "record",
									"value": "",
									"description": "Record calls (Specify yes or no)",
									"disabled": true
								},
								{
									"key": "record_silent",
									"value": "",
									"description": "Silent Recordings (Specify yes or no)",
									"disabled": true
								},
								{
									"key": "exit_digit",
									"value": "",
									"description": "Exit Digit. (Regex: /^\\\\d{1}$/)",
									"disabled": true
								},
								{
									"key": "exit_ext",
									"value": "",
									"description": "Exit Extension. (Regex: /^\\\\d{3}$/)",
									"disabled": true
								},
								{
									"key": "confirm_calls",
									"value": "",
									"description": "Confirm Calls. (Regex: /^(yes|no)$/)",
									"disabled": true
								},
								{
									"key": "confirm_msg",
									"value": "",
									"description": "Confirmation Message. All confirmation messages begin with rg-announce-.",
									"disabled": true
								},
								{
									"key": "confirm_answered_msg",
									"value": "",
									"description": "Call Answered Message. All call answered messages begin with rg-late-announce-.",
									"disabled": true
								},
								{
									"key": "call_rating_ext",
									"value": "",
									"description": "Call Rating Extension. (Regex: /^\\\\d{3}$/)",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Deleting Ring Groups",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5681e86f-9b7c-472a-a6db-8af5593b2ad7",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the success message",
									"    pm.test('Successfully deleted Ring Group!', function () {",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"",
									"        // Print the success message",
									"        console.log('Success:', responseBody.success);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "dab63fd2-8b00-435b-92b4-bf3b1ba2fe9e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ring_group.delete&server={{Srv/Tenant-ID}}&id={{RGsID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ring_group.delete",
									"description": "For deleting multiple Ring groups use RGs.csv file, just populate filds for Srv/Tenant-ID and RGsID."
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Server/Tenant ID. If running in Tenant Mode, make sure this is always greater than 1."
								},
								{
									"key": "id",
									"value": "{{RGsID}}",
									"description": "Ring Group ID"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "b178fca4-37e2-4f28-af3a-4577a638239c",
			"description": "# Ring Groups\n\nSupported Methods:\n\n`list` - List Ring Groups\n\n`add` - Add new Ring Group\n\n`edit` - Edit existing Ring Group\n\n`delete` - Delete existing Ring Group"
		},
		{
			"name": "Enhanced Ring Groups",
			"item": [
				{
					"name": "List ERGs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05d0b128-7f9c-43fa-93d7-8e913ee4950e",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if response is empty array",
									"    if (Object.keys(responseBody).length === 0) {",
									"        console.log(\"No created Enhanced Ring Groups for this Server/Tenant!\");",
									"        pm.test('No ERG Error', function () {",
									"            pm.expect.fail(\"No ERG created\");",
									"        });",
									"    } else {",
									"        // Validate the response structure",
									"        pm.test('Response Validation', function () {",
									"            pm.expect(responseBody).to.be.an('object');",
									"",
									"            // Loop through ERG data",
									"            for (var ergID in responseBody) {",
									"                var ergData = responseBody[ergID];",
									"",
									"                // Validate specific properties for each ERG",
									"                pm.test('ERG ' + ergID + ' Data Validation', function () {",
									"                    pm.expect(ergData).to.be.an('object');",
									"                    pm.expect(ergData).to.have.property('name').that.is.a('string');",
									"                    pm.expect(ergData).to.have.property('number').that.is.a('string');",
									"                    pm.expect(ergData).to.have.property('strategy').that.is.a('string');",
									"                    pm.expect(ergData).to.have.property('members').that.is.an('array');",
									"",
									"                    // Print the result for each ERG",
									"                    console.log('ERG ID:', ergID);",
									"                    console.log('ERG Name:', ergData.name);",
									"                    console.log('ERG Number:', ergData.number);",
									"                    console.log('ERG Strategy:', ergData.strategy);",
									"                    console.log('ERG Members:', ergData.members);",
									"                });",
									"            }",
									"        });",
									"        ",
									"        // Save ERG IDs to variable",
									"        var ergIDs = Object.keys(responseBody);",
									"        pm.collectionVariables.set('ERGsID', ergIDs);",
									"        pm.environment.set('ERGsID', ergIDs);",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c486b8de-601e-4205-9466-595be25d4229",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.erg.list&server={{Srv/Tenant-ID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.erg.list"
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Adding Members",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2dff645a-6579-40ed-8741-2bf98af538fe",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the success response structure",
									"    pm.test('Success Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('string');",
									"",
									"        // Print the success message and ID",
									"        console.log('Success:', responseBody.success);",
									"        console.log('ERG ID:', responseBody.id);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e600ee74-79a2-43d9-b978-05c85296c1f1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.erg.members&server={{Srv/Tenant-ID}}&id={{ERGsID}}&numbers={{RGExt}}&penalties={{ERGPenal}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.erg.members",
									"description": "Adding members to an Enhanced Ring Group. If need to add members in multiple ERGs use ERGs.csv file."
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Tenant/Server ID (Required)"
								},
								{
									"key": "id",
									"value": "{{ERGsID}}",
									"description": "ID of an Enhanced Ring Group (Required)"
								},
								{
									"key": "numbers",
									"value": "{{RGExt}}",
									"description": "List of extension numbers separated with , (Required)"
								},
								{
									"key": "penalties",
									"value": "{{ERGPenal}}",
									"description": "List of penalties separated with , (Required)"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "6cebe147-f5b2-4c56-b449-30e6c9af35c5",
			"description": "# Enhanced Ring Groups\n\nSupported Methods\n\n`list` - List Enhanced Ring Groups\n\n`members` - Adding members to an Enhanced Ring Group"
		},
		{
			"name": "CDRs",
			"item": [
				{
					"name": "Downloading CDRs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "09825d64-9f75-4d5e-b540-aeba7ce26f71",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('next_page').that.is.a('boolean');",
									"        pm.expect(responseBody).to.have.property('limit').that.is.a('number');",
									"        pm.expect(responseBody).to.have.property('records').that.is.a('number');",
									"        pm.expect(responseBody).to.have.property('header');",
									"        pm.expect(responseBody).to.have.property('csv').that.is.an('array');",
									"",
									"        // Check if header is null",
									"        if (responseBody.header === null) {",
									"            console.log('No Data available for given date/time!');",
									"            pm.test('No Data available for given date/time!', function () {",
									"                pm.expect(false).to.be.true; // Mark the test as Pass with a custom message",
									"            });",
									"        } else {",
									"            // Header is an array, validate it",
									"            var expectedHeader = [",
									"                \"Tenant\",",
									"                \"From\",",
									"                \"To\",",
									"                \"Date/Time\",",
									"                \"Total Duration\",",
									"                \"Rating Duration\",",
									"                \"Rating Cost\",",
									"                \"Status\",",
									"                \"ID\",",
									"                \"Recording Path\"",
									"            ];",
									"",
									"            pm.expect(responseBody.header).to.deep.equal(expectedHeader);",
									"",
									"            // Print the success message",
									"            console.log('Success:', responseBody.success);",
									"            console.log('Next Page:', responseBody.next_page);",
									"            console.log('Limit:', responseBody.limit);",
									"            console.log('Records:', responseBody.records);",
									"",
									"            // Loop through records",
									"            for (var record of responseBody.csv) {",
									"                console.log('Record:', record);",
									"                console.log('Tenant:', record[0]);",
									"                console.log('From:', record[1]);",
									"                console.log('To:', record[2]);",
									"                console.log('Date/Time:', record[3]);",
									"                console.log('Total Duration:', record[4]);",
									"                console.log('Rating Duration:', record[5]);",
									"                console.log('Rating Cost:', record[6]);",
									"                console.log('Status:', record[7]);",
									"                console.log('ID:', record[8]);",
									"                console.log('Recording Path:', record[9]);",
									"            }",
									"        }",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "085d1ff8-5b2b-43be-b6d6-45313b30127d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.cdr.download&start=Sep-27-2023&starttime=13:00:00&end=Sep-27-2023&endtime=13:05:00",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.cdr.download",
									"description": "Download CDRs"
								},
								{
									"key": "start",
									"value": "Sep-27-2023",
									"description": "Start Date (Required). Format is: mmm-dd-YYYY (eg: Feb-01-2009)"
								},
								{
									"key": "starttime",
									"value": "13:00:00",
									"description": "Start Time. Format is: hh:mm:ss (eg:23:59:59). Default value is 00:00:00"
								},
								{
									"key": "end",
									"value": "Sep-27-2023",
									"description": "End Date (Required). Format is: mmm-dd-YYYY (eg: Feb-28-2009)"
								},
								{
									"key": "endtime",
									"value": "13:05:00",
									"description": "End Time. Format is: hh:mm:ss (eg:23:59:59). Default value is 23:59:59"
								},
								{
									"key": "ext",
									"value": "",
									"description": "Source extension. You can filter by multiple destinations separated by comma (100,120). Defaults to all extensions/numbers.",
									"disabled": true
								},
								{
									"key": "extdst",
									"value": "",
									"description": "Destination extension.You can filter by multiple extensions separated by comma (100,120). Defaults to all extensions/numbers",
									"disabled": true
								},
								{
									"key": "trunk",
									"value": "",
									"description": "Source Trunk ID. Note: You cannot supply trunk and ext at the same time! Defaults to all trunks, unless otherwise specified",
									"disabled": true
								},
								{
									"key": "trunkdst",
									"value": "",
									"description": "Destination Trunk ID. Note: You cannot supply trunkdst and extdst at the same time! Defaults to all trunks, unless otherwise specified",
									"disabled": true
								},
								{
									"key": "page",
									"value": "",
									"description": "CDR page. Download CDRs from relevant page (depends on limit argument)\nDefault is to download first page. Total number of pages is not available, look for next_page in response",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "",
									"description": "Limiting records per page. You can limit number of CDRs to download (per page, default page is 1). Default value is 16. Maximum value you can set is: 1000",
									"disabled": true
								},
								{
									"key": "server",
									"value": "",
									"description": "Filtering records per server. You can filter CDRs by Server ID",
									"disabled": true
								},
								{
									"key": "status",
									"value": "",
									"description": "Filtering records by call status. You can filter CDRs by call status. Status values (8 â‡’ \"Answered\", 4 â‡’ \"Unanswered\", 2 â‡’ \"Busy\", 1 â‡’ \"Failed\")",
									"disabled": true
								},
								{
									"key": "cdrtype",
									"value": "",
									"description": "Filtering records by CDR type.Type values (1 â‡’ \"Incoming\", 2 â‡’ \"Outgoing\", 3 â‡’ \"All\")",
									"disabled": true
								},
								{
									"key": "timezone",
									"value": "",
									"description": "Time Zone to apply when searching CDRs. Ex: \"America/New_York\"",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CDR Billamount",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "09825d64-9f75-4d5e-b540-aeba7ce26f71",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('billamount').that.is.a('string');",
									"",
									"        // Print the bill amount",
									"        console.log('Bill Amount:', responseBody.billamount);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a3fba850-088a-4dae-96f6-6044147354f6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&start=Sep-01-2023&end=Sep-31-2023&action=pbxware.cdr.billamount",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "start",
									"value": "Sep-01-2023",
									"description": "Start Date (Required). Format is: mmm-dd-YYYY (eg: Feb-01-2009)"
								},
								{
									"key": "starttime",
									"value": "",
									"description": "Start Time. Format is: hh:mm:ss (eg:23:59:59). Default value is 00:00:00",
									"disabled": true
								},
								{
									"key": "end",
									"value": "Sep-31-2023",
									"description": "End Date (Required). Format is: mmm-dd-YYYY (eg: Feb-28-2009)"
								},
								{
									"key": "endtime",
									"value": "",
									"description": "End Time. Format is: hh:mm:ss (eg:23:59:59). Default value is 23:59:59",
									"disabled": true
								},
								{
									"key": "ext",
									"value": "",
									"description": "Source extension. You can filter by multiple destinations separated by comma (100,120). Defaults to all extensions/numbers.",
									"disabled": true
								},
								{
									"key": "extdst",
									"value": "",
									"description": "Destination extension.You can filter by multiple extensions separated by comma (100,120). Defaults to all extensions/numbers",
									"disabled": true
								},
								{
									"key": "trunk",
									"value": "",
									"description": "Source Trunk ID. Note: You cannot supply trunk and ext at the same time! Defaults to all trunks, unless otherwise specified",
									"disabled": true
								},
								{
									"key": "trunkdst",
									"value": "",
									"description": "Destination Trunk ID. Note: You cannot supply trunkdst and extdst at the same time! Defaults to all trunks, unless otherwise specified",
									"disabled": true
								},
								{
									"key": "page",
									"value": "",
									"description": "CDR page. Download CDRs from relevant page (depends on limit argument)\nDefault is to download first page. Total number of pages is not available, look for next_page in response",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "",
									"description": "Limiting records per page. You can limit number of CDRs to download (per page, default page is 1). Default value is 16. Maximum value you can set is: 1000",
									"disabled": true
								},
								{
									"key": "server",
									"value": "",
									"description": "Filtering records per server. You can filter CDRs by Server ID",
									"disabled": true
								},
								{
									"key": "status",
									"value": "",
									"description": "Filtering records by call status. You can filter CDRs by call status. Status values (8 â‡’ \"Answered\", 4 â‡’ \"Unanswered\", 2 â‡’ \"Busy\", 1 â‡’ \"Failed\")",
									"disabled": true
								},
								{
									"key": "cdrtype",
									"value": "",
									"description": "Filtering records by CDR type.Type values (1 â‡’ \"Incoming\", 2 â‡’ \"Outgoing\", 3 â‡’ \"All\")",
									"disabled": true
								},
								{
									"key": "timezone",
									"value": "",
									"description": "Time Zone to apply when searching CDRs. Ex: \"America/New_York\"",
									"disabled": true
								},
								{
									"key": "action",
									"value": "pbxware.cdr.billamount"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "88da1048-da36-4651-b0c3-4d37c312dae7",
			"description": "# CDRs\n\nSupported Methods:\n\n`download` \\- Download CDRs\n\n`billamount` \\- Returns sum of billing amounts"
		},
		{
			"name": "Archiving",
			"item": [
				{
					"name": "Listing Archivings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1d6c32b9-b733-4a79-916b-505fde708c9b",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody[0]) {",
									"    console.error('Test Failed: ' + responseBody[0].error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody[0].error);",
									"    });",
									"} else if (responseBody.length === 0) {",
									"    console.error('Test Failed: There are no archiving records for the selected Date/Time range!');",
									"    pm.test('No Archiving Records Found', function () {",
									"        pm.expect.fail('There are no archiving records for the selected Date/Time range!');",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('array');",
									"",
									"        // Iterate through each archiving record",
									"        for (var recordKey in responseBody) {",
									"            if (responseBody.hasOwnProperty(recordKey)) {",
									"                var record = responseBody[recordKey];",
									"                ",
									"                pm.expect(record).to.be.an('object');",
									"                pm.expect(record).to.have.property('tenant').that.is.a('string');",
									"                pm.expect(record).to.have.property('date_time').that.is.a('string');",
									"                pm.expect(record).to.have.property('status').that.is.a('string');",
									"",
									"                // Recording array",
									"                var recording = record.recording;",
									"                pm.expect(recording).to.be.an('object');",
									"                pm.expect(recording).to.have.property('success').that.is.a('string');",
									"                pm.expect(recording).to.have.property('failed').that.is.a('string');",
									"",
									"                // Fax array",
									"                var fax = record.fax;",
									"                pm.expect(fax).to.be.an('object');",
									"                pm.expect(fax).to.have.property('success').that.is.a('string');",
									"                pm.expect(fax).to.have.property('failed').that.is.a('string');",
									"",
									"                // Voicemail array",
									"                var voicemail = record.voicemail;",
									"                pm.expect(voicemail).to.be.an('object');",
									"                pm.expect(voicemail).to.have.property('success').that.is.a('string');",
									"                pm.expect(voicemail).to.have.property('failed').that.is.a('string');",
									"            }",
									"        }",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0b607901-acf4-4c50-a1db-15396bc0dda9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.archiving.list&start_date=Oct-19-2023&end_date=Oct-19-2023",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.archiving.list",
									"description": "List Archivings"
								},
								{
									"key": "start_date",
									"value": "Oct-19-2023",
									"description": "Start Date (Required). Format is: mmm-dd-YYYY (e.g., Feb-01-2009). (Regex: /^(?i:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-([0-2][0-9]|3[01])-\\\\d{4}$/)"
								},
								{
									"key": "end_date",
									"value": "Oct-19-2023",
									"description": "End Date (Required). Format is: mmm-dd-YYYY (e.g., Feb-01-2009). (Regex: /^(?i:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-([0-2][0-9]|3[01])-\\\\d{4}$/)"
								},
								{
									"key": "start_time",
									"value": "",
									"description": "Start Time. Format is: hh:mm:ss (e.g., 23:59:59). Default value is 00:00:00. (Regex: /^((2[0-3])|([0-1][0-9])):[0-5][0-9]:[0-5][0-9]$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "end_time",
									"value": "",
									"description": "End Time. Format is: hh:mm:ss (e.g., 23:59:59). Default value is 23:59:59. (Regex: /^((2[0-3])|([0-1][0-9])):[0-5][0-9]:[0-5][0-9]$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "status",
									"value": "",
									"description": "Status-Filter by three available statuses separated by a comma (SUCCESS, FAILURE, PARTIAL). (Regex: /^(?:\\\\b(SUCCESS|PARTIAL|FAILED)\\\\b,?){1,3}$/i)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "tenant",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Tenant code - Filter reports by a specific tenant",
									"type": "text",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "c532634f-0abf-41eb-9ea2-5ecff1bc4b01",
			"description": "# Archiving\n\nSupported Methods\n\n`list`\n\nList Archivings"
		},
		{
			"name": "Routes",
			"item": [
				{
					"name": "Listing Routes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d7cc1fae-6e03-4994-9535-59a7b6098172",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"",
									"        // Loop through the route data",
									"        for (var routeID in responseBody) {",
									"            var routeData = responseBody[routeID];",
									"",
									"            // Validate specific properties for each route",
									"            pm.test('Route ' + routeID + ' Data Validation', function () {",
									"                pm.expect(routeData).to.be.an('array');",
									"                pm.expect(routeData).to.have.lengthOf(2);",
									"",
									"                // Print the result for each route",
									"                console.log('Route ID:', routeID);",
									"                console.log('Route Code:', routeData[0]);",
									"                console.log('Route Name:', routeData[1]);",
									"            });",
									"        }",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6527bca2-fbc6-455d-8651-ed21063ad3c5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.route.list",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.route.list"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "e245ff61-9a02-4b20-8873-23d03b32ec73",
			"description": "# Routes\n\nSupported Methods\n\n`list -` List Routes"
		},
		{
			"name": "Operation Times",
			"item": [
				{
					"name": "DID OT",
					"item": [
						{
							"name": "Listing Operation Times",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6323cb5e-4a3f-4de1-800f-cefe7e1689b5",
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if the response contains an \"error\" field",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"   // Check if the response body is an empty array",
											"    if (Array.isArray(responseBody) && responseBody.length === 0) {",
											"        // Handle the case where the response is an empty array",
											"        pm.test('Empty Response', function () {",
											"            pm.expect.fail('There is no Operation times defined for given parameters!');",
											"        });",
											"    } else {",
											"        // Validate the response structure",
											"        pm.test('Response Validation', function () {",
											"            pm.expect(responseBody).to.be.an('object');",
											"",
											"            // Iterate through the keys (IDs) in the response",
											"            for (var id in responseBody) {",
											"                var operationTimes = responseBody[id];",
											"",
											"                // Validate specific properties for each operation time",
											"                pm.expect(operationTimes).to.have.property('status').that.is.oneOf(['on', 'off', 'inherit']);",
											"                pm.expect(operationTimes).to.have.property('greeting').that.is.a('string');",
											"                pm.expect(operationTimes).to.have.property('default_dest_ext').that.is.a('string');",
											"                pm.expect(operationTimes).to.have.property('default_dest_is_vm').that.is.oneOf(['yes', 'no']);",
											"",
											"                // Validate the closed dates for each operation time",
											"                pm.expect(operationTimes).to.have.property('closed_dates').that.is.an('array');",
											"                operationTimes.closed_dates.forEach(function (closedDate) {",
											"                    pm.expect(closedDate).to.be.an('object');",
											"                    pm.expect(closedDate).to.have.property('description').that.is.a('string');",
											"                    pm.expect(closedDate).to.have.property('destination').that.is.a('string');",
											"                    pm.expect(closedDate).to.have.property('date_from').that.is.a('string');",
											"                    pm.expect(closedDate).to.have.property('date_to').that.is.a('string');",
											"                    pm.expect(closedDate).to.have.property('time_from').that.is.a('string');",
											"                    pm.expect(closedDate).to.have.property('time_to').that.is.a('string');",
											"                });",
											"",
											"                // Validate the custom destinations for each operation time",
											"                pm.expect(operationTimes).to.have.property('custom_destinations').that.is.an('array');",
											"                operationTimes.custom_destinations.forEach(function (customDest) {",
											"                    pm.expect(customDest).to.be.an('object');",
											"                    pm.expect(customDest).to.have.property('destination').that.is.a('string');",
											"                    pm.expect(customDest).to.have.property('is_open_range').that.is.oneOf(['yes', 'no']);",
											"                    pm.expect(customDest).to.have.property('days').that.is.a('string');",
											"                    pm.expect(customDest).to.have.property('time_from').that.is.a('string');",
											"                    pm.expect(customDest).to.have.property('time_to').that.is.a('string');",
											"                });",
											"",
											"                // Validate the open days for each operation time",
											"                pm.expect(operationTimes).to.have.property('open_days').that.is.an('array');",
											"                operationTimes.open_days.forEach(function (openDay) {",
											"                    pm.expect(openDay).to.be.an('object');",
											"                    pm.expect(openDay).to.have.property('description').that.is.a('string');",
											"                    pm.expect(openDay).to.have.property('days').that.is.a('string');",
											"                    pm.expect(openDay).to.have.property('time_from').that.is.a('string');",
											"                    pm.expect(openDay).to.have.property('time_to').that.is.a('string');",
											"                });",
											"            }",
											"        });",
											"    }",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "54e2b620-5898-4c4a-bd0f-ed8c57745e2c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.otimes.did.list&server=2&id=1",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.otimes.did.list"
										},
										{
											"key": "server",
											"value": "2",
											"description": "Request the Operation Times state by destination server ID (used with MT systems in combination with other fields)"
										},
										{
											"key": "id",
											"value": "1",
											"description": "Request the Operation Times state by destination ID (most of destionation supports this)"
										},
										{
											"key": "ext",
											"value": "",
											"description": "Request the Operation Times state by destination extension (used for DIDs)",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Set Operation Times",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6323cb5e-4a3f-4de1-800f-cefe7e1689b5",
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check for the success message",
											"    pm.test('Edited Operation Times successfuly!', function () {",
											"        pm.expect(responseBody).to.be.an('object');",
											"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "0f6633c3-1d16-4431-b62d-117dfd03f5bf",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?action=pbxware.otimes.did.set&apikey={{API_Key}}&server={{Srv/Tenant-ID}}&id={{DID-IDs}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "action",
											"value": "pbxware.otimes.did.set"
										},
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "server",
											"value": "{{Srv/Tenant-ID}}",
											"description": "Tenant ID on MT systems"
										},
										{
											"key": "id",
											"value": "{{DID-IDs}}",
											"description": "DID ID to edit."
										},
										{
											"key": "status",
											"value": "",
											"description": "Status of the Operation Times. (Regex: /^(on|off|inherit)$/))",
											"disabled": true
										},
										{
											"key": "greeting",
											"value": "",
											"description": "Greeting sound file. (Regex: /^greeting\\\\-([\\\\w\\\\-]+)$/)",
											"disabled": true
										},
										{
											"key": "default_dest_ext",
											"value": "",
											"description": "Default extension to which all calls will be redirected. ((Regex: /^\\\\d+$/))",
											"disabled": true
										},
										{
											"key": "default_dest_is_vm",
											"value": "",
											"description": "Default extension is Voicemail or not. (Regex: /^(yes|no)$/)",
											"disabled": true
										},
										{
											"key": "closed_dates_desc[]",
											"value": "",
											"description": "Ordered descriptions of the closed dates settings",
											"disabled": true
										},
										{
											"key": "closed_dates_dest[]",
											"value": "",
											"description": "Ordered extensions of the closed dates settings",
											"disabled": true
										},
										{
											"key": "closed_dates_date_from[]",
											"value": "",
											"description": "Ordered From dates of the closed dates settings. When setting up Closed Dates it is important that dates follow the yyyy-mm-dd format. For example: 2023-02-20",
											"disabled": true
										},
										{
											"key": "closed_dates_date_to[]",
											"value": "",
											"description": "Ordered To dates. When setting up Closed Dates it is important that dates follow the yyyy-mm-dd format. For example: 2023-02-20",
											"disabled": true
										},
										{
											"key": "closed_dates_time_from[]",
											"value": "",
											"description": "Ordered From time.",
											"disabled": true
										},
										{
											"key": "closed_dates_time_to[]",
											"value": "",
											"description": "Ordered To time",
											"disabled": true
										},
										{
											"key": "custom_destinations_dest[]",
											"value": "",
											"description": "Ordered destinations of the custom destinations settings",
											"disabled": true
										},
										{
											"key": "custom_destinations_is_open[]",
											"value": "",
											"description": "Ordered opened status of the custom destinations settings",
											"disabled": true
										},
										{
											"key": "custom_destinations_days[]",
											"value": "",
											"description": "Ordered days in the week of the custom destinations settings",
											"disabled": true
										},
										{
											"key": "custom_destinations_time_from[]",
											"value": "",
											"description": "Ordered time from of the custom destinations settings",
											"disabled": true
										},
										{
											"key": "custom_destinations_time_to[]",
											"value": "",
											"description": "Ordered time to of the custom destinations settings",
											"disabled": true
										},
										{
											"key": "open_days_desc[]",
											"value": "",
											"description": "Ordered description of the open days settings",
											"disabled": true
										},
										{
											"key": "open_days[]",
											"value": "",
											"description": "Ordered days in the week of the open days settings",
											"disabled": true
										},
										{
											"key": "open_days_time_from[]",
											"value": "",
											"description": "Ordered time from of the open days settings",
											"disabled": true
										},
										{
											"key": "open_days_time_to[]",
											"value": "",
											"description": "Ordered time to of the open days settings",
											"disabled": true
										},
										{
											"key": "pin",
											"value": "",
											"description": "PIN number used for Routes Operation Times only",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "02037b7e-5f69-43c2-ba2a-2f2909b434da"
				},
				{
					"name": "IVR OT",
					"item": [
						{
							"name": "Listing Operation Times Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6323cb5e-4a3f-4de1-800f-cefe7e1689b5",
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if the response contains an \"error\" field",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"   // Check if the response body is an empty array",
											"    if (Array.isArray(responseBody) && responseBody.length === 0) {",
											"        // Handle the case where the response is an empty array",
											"        pm.test('Empty Response', function () {",
											"            pm.expect.fail('There is no Operation times defined for given parameters!');",
											"        });",
											"    } else {",
											"        // Validate the response structure",
											"        pm.test('Response Validation', function () {",
											"            pm.expect(responseBody).to.be.an('object');",
											"",
											"            // Iterate through the keys (IDs) in the response",
											"            for (var id in responseBody) {",
											"                var operationTimes = responseBody[id];",
											"",
											"                // Validate specific properties for each operation time",
											"                pm.expect(operationTimes).to.have.property('status').that.is.oneOf(['on', 'off', 'inherit']);",
											"                pm.expect(operationTimes).to.have.property('greeting').that.is.a('string');",
											"                pm.expect(operationTimes).to.have.property('default_dest_ext').that.is.a('string');",
											"                pm.expect(operationTimes).to.have.property('default_dest_is_vm').that.is.oneOf(['yes', 'no']);",
											"",
											"                // Validate the closed dates for each operation time",
											"                pm.expect(operationTimes).to.have.property('closed_dates').that.is.an('array');",
											"                operationTimes.closed_dates.forEach(function (closedDate) {",
											"                    pm.expect(closedDate).to.be.an('object');",
											"                    pm.expect(closedDate).to.have.property('description').that.is.a('string');",
											"                    pm.expect(closedDate).to.have.property('destination').that.is.a('string');",
											"                    pm.expect(closedDate).to.have.property('date_from').that.is.a('string');",
											"                    pm.expect(closedDate).to.have.property('date_to').that.is.a('string');",
											"                    pm.expect(closedDate).to.have.property('time_from').that.is.a('string');",
											"                    pm.expect(closedDate).to.have.property('time_to').that.is.a('string');",
											"                });",
											"",
											"                // Validate the custom destinations for each operation time",
											"                pm.expect(operationTimes).to.have.property('custom_destinations').that.is.an('array');",
											"                operationTimes.custom_destinations.forEach(function (customDest) {",
											"                    pm.expect(customDest).to.be.an('object');",
											"                    pm.expect(customDest).to.have.property('destination').that.is.a('string');",
											"                    pm.expect(customDest).to.have.property('is_open_range').that.is.oneOf(['yes', 'no']);",
											"                    pm.expect(customDest).to.have.property('days').that.is.a('string');",
											"                    pm.expect(customDest).to.have.property('time_from').that.is.a('string');",
											"                    pm.expect(customDest).to.have.property('time_to').that.is.a('string');",
											"                });",
											"",
											"                // Validate the open days for each operation time",
											"                pm.expect(operationTimes).to.have.property('open_days').that.is.an('array');",
											"                operationTimes.open_days.forEach(function (openDay) {",
											"                    pm.expect(openDay).to.be.an('object');",
											"                    pm.expect(openDay).to.have.property('description').that.is.a('string');",
											"                    pm.expect(openDay).to.have.property('days').that.is.a('string');",
											"                    pm.expect(openDay).to.have.property('time_from').that.is.a('string');",
											"                    pm.expect(openDay).to.have.property('time_to').that.is.a('string');",
											"                });",
											"            }",
											"        });",
											"    }",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "cf1025c0-a2d4-42df-8187-14039d131854",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.otimes.ivr.list&server=2&id=26",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.otimes.ivr.list"
										},
										{
											"key": "server",
											"value": "2",
											"description": "Request the Operation Times state by destination server ID (used with MT systems in combination with other fields)"
										},
										{
											"key": "id",
											"value": "26",
											"description": "Request the Operation Times state by destination ID (most of destionation supports this)"
										},
										{
											"key": "ext",
											"value": "",
											"description": "Request the Operation Times state by destination extension (used for DIDs)",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "4a1958d5-cfd3-4723-9dd1-cf3905c60b2d"
				},
				{
					"name": "Dial Group OT",
					"item": [
						{
							"name": "Listing Operation Times",
							"id": "cd39c1f4-d915-4816-aca6-7ffe42b0cc94",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.otimes.dial_group.list",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.otimes.dial_group.list"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "5f6ce80a-23f1-4e42-9d48-40d63a47de87"
				},
				{
					"name": "Server OT",
					"item": [
						{
							"name": "Listing Operation Times",
							"id": "13a5167d-b789-4f86-a0a9-953f58be2447",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.otimes.servers.list",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.otimes.servers.list"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "0b5794ca-914a-4ec5-bb66-b0634c01648c"
				},
				{
					"name": "Routes OT",
					"item": [
						{
							"name": "Listing Operation Times",
							"id": "c43d51b7-a665-4f40-9f44-45f4dca444d3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.otimes.routes.list",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.otimes.routes.list"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "04bb7bdd-68e5-4202-97c4-78a581ce7d74"
				},
				{
					"name": "Queues OT",
					"item": [
						{
							"name": "Listing Operation Times",
							"id": "a552dabe-2353-40ec-98c7-42c5a12a857a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.otimes.queues.list",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.otimes.queues.list"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "55c97b8f-b676-40b0-92a0-4709e31e3ce6"
				},
				{
					"name": "ERG OT",
					"item": [
						{
							"name": "Listing Operation Times",
							"id": "77a5d42a-c3d3-46d8-956b-19459b4ef4db",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.otimes.erg.list&id",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.otimes.erg.list"
										},
										{
											"key": "id",
											"value": null,
											"type": "text"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "0250c7d8-8855-4562-ac73-9820268b2ea3"
				}
			],
			"id": "70648457-3b43-4880-b128-0b05f3c3f673",
			"description": "Operation Times exist for the following: DIDs, IVRs, Dial Groups, Server/Tenants, Routes, Queues and Enhanced Ring Groups.\n\nActions:\n\n`action=pbxware.otimes.did` - Operation Times action URL for DIDs\n\n`action=pbxware.otimes.ivr` - Operation Times action URL for IVRs\n\n`action=pbxware.otimes.dial_group` - Operation Times action URL for Dial Groups\n\n`action=pbxware.otimes.servers` - Operation Times action URL for Server/Tenants\n\n`action=pbxware.otimes.routes` - Operation Times action URL for Routes\n\n`action=pbxware.otimes.queues` - Operation Times action URL for Queues\n\n`action=pbxware.otimes.erg` - Operation Times action URL for Enhanced Ring Groups\n\nEach of those destinations Operation Times are a state, which means  \nthat you can list the current state of the destinations or set the  \nentire state of the destination Operation Times.\n\nSupported Methods:\n\n`list` - Listing the state of Operation Times\n\n`set` - Set the state of Operation Times"
		},
		{
			"name": "Tenant Packages",
			"item": [
				{
					"name": "Tenant Package Configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "626c75de-b21e-4959-8960-91df2516e04b",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"",
									"        // Iterate through the keys (IDs) in the response",
									"        for (var id in responseBody) {",
									"            var packageConfig = responseBody[id];",
									"",
									"            // Validate specific properties for each package configuration",
									"            pm.expect(packageConfig).to.have.property('name').that.is.a('string');",
									"            pm.expect(packageConfig).to.have.property('service_plan').that.is.a('string');",
									"            pm.expect(packageConfig).to.have.property('allowed_service_plans').that.is.a('string');",
									"            pm.expect(packageConfig).to.have.property('ext').that.is.a('string');",
									"            pm.expect(packageConfig).to.have.property('voicemail').that.is.a('string');",
									"            pm.expect(packageConfig).to.have.property('queues').that.is.a('string');",
									"            pm.expect(packageConfig).to.have.property('ivr').that.is.a('string');",
									"            pm.expect(packageConfig).to.have.property('cf').that.is.a('string');",
									"            pm.expect(packageConfig).to.have.property('rgroups').that.is.a('string');",
									"            pm.expect(packageConfig).to.have.property('hot_desking').that.is.a('string');",
									"            pm.expect(packageConfig).to.have.property('restrict_splans').that.is.a('string');",
									"            pm.expect(packageConfig).to.have.property('call_recordings').that.is.a('string');",
									"            pm.expect(packageConfig).to.have.property('monitoring').that.is.a('string');",
									"            pm.expect(packageConfig).to.have.property('call_screening').that.is.a('string');",
									"        }",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "9ce26bc6-178c-4223-a8a0-90cb34962de3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.package.configuration&id=1",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.package.configuration",
									"description": "Response will consist of an array of tenant package configuration."
								},
								{
									"key": "id",
									"value": "1",
									"type": "text"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Listing Tenant Packages",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aa43e431-4792-4df9-9d8a-100cd0fc3e38",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"",
									"        // Iterate through the keys (IDs) in the response",
									"        for (var id in responseBody) {",
									"            var packageName = responseBody[id];",
									"",
									"            // Validate specific properties for each package",
									"            pm.expect(packageName).to.be.a('string');",
									"        }",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3f05f2d7-792e-479e-8835-2eabba9e5cb1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.package.list",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.package.list",
									"description": "Response will consist of an array of tenants with array key being the Tenant Package ID."
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Adding Tenant Packages",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a264ce0c-6a32-4268-8837-f5001820ab8c",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('number');",
									"",
									"        // Print the success message and ID",
									"        console.log('Success:', responseBody.success);",
									"        console.log('Package ID:', responseBody.id);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5f3904e0-3c1d-466b-98d5-3f02fa6cb96b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.package.add&name={{TenantPackageName}}&restrict_splans=0&allowed_service_plans=1&call_recordings=1&monitoring=1&call_screening=1&extensions=100&voicemails=100&queues=100&cfs=100&rgroups=100&hot_desking=100&ivrs=100",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.package.add"
								},
								{
									"key": "name",
									"value": "{{TenantPackageName}}",
									"description": "Tenant Package Name (Required)"
								},
								{
									"key": "restrict_splans",
									"value": "0",
									"description": "Restrict Service Plans (This field is required if billing is turned on in license). (Regex: /^(1|0)$/)"
								},
								{
									"key": "allowed_service_plans",
									"value": "1",
									"description": "Allowed Service Plans (Required if restrict service plan is set to yes ( 1 )). (Regex: /^\\\\d{1,9}+(,\\\\d{1,9}+)*$/)"
								},
								{
									"key": "service_plan",
									"value": "",
									"description": "Default Service Plan. (Regex: /^\\\\d{1,9}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "call_recordings",
									"value": "1",
									"description": "Country ID (Required). (Regex: /^(1|0)$/)"
								},
								{
									"key": "monitoring",
									"value": "1",
									"description": "Area Code (Required). (Regex: /^(1|0)$/)"
								},
								{
									"key": "call_screening",
									"value": "1",
									"description": "National Code (Required). (Regex: /^(1|0)$/)"
								},
								{
									"key": "extensions",
									"value": "100",
									"description": "Extensions (Required). (Regex: /^\\\\d{1,4}$/)"
								},
								{
									"key": "voicemails",
									"value": "100",
									"description": "Voicemails (Required). (Regex: /^\\\\d{1,4}$/)"
								},
								{
									"key": "queues",
									"value": "100",
									"description": "Queues (Required). (Regex: /^\\\\d{1,4}$/)"
								},
								{
									"key": "cfs",
									"value": "100",
									"description": "Conferences (Required). (Regex: /^\\\\d{1,4}$/)"
								},
								{
									"key": "rgroups",
									"value": "100",
									"description": "Ring Groups (Required). (Regex: /^\\\\d{1,4}$/)"
								},
								{
									"key": "hot_desking",
									"value": "100",
									"description": "Hot Desking (Required). (Regex: /^\\\\d{1,4}$/)"
								},
								{
									"key": "ivrs",
									"value": "100",
									"description": "IVRs (Required). (Regex: /^\\\\d{1,4}$/)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Editing Tenant Packages",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a264ce0c-6a32-4268-8837-f5001820ab8c",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('string');",
									"",
									"        // Print the success message and ID",
									"        console.log('Success:', responseBody.success);",
									"        console.log('Package ID:', responseBody.id);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e3e3b0d5-86a5-4608-bb79-f9362c7deace",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.package.edit&server={{Srv/Tenant-ID}}&id={{TenantPackageID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.package.edit",
									"description": "Arguments are identical to the ones in Adding Tenant Packages section. All of them are optional, except:"
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Server ID which must be set to 1. (Required)"
								},
								{
									"key": "id",
									"value": "{{TenantPackageID}}",
									"description": "Tenant Package ID."
								},
								{
									"key": "name",
									"value": "",
									"description": "Tenant Package Name",
									"disabled": true
								},
								{
									"key": "restrict_splans",
									"value": "",
									"description": "Restrict Service Plans (This field is required if billing is turned on in license). (Regex: /^(1|0)$/)",
									"disabled": true
								},
								{
									"key": "allowed_service_plans",
									"value": "",
									"description": "Allowed Service Plans (Required if restrict service plan is set to yes ( 1 )). (Regex: /^\\\\d{1,9}+(,\\\\d{1,9}+)*$/)",
									"disabled": true
								},
								{
									"key": "service_plan",
									"value": "",
									"description": "Default Service Plan. (Regex: /^\\\\d{1,9}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "call_recordings",
									"value": "",
									"description": "Country ID. (Regex: /^(1|0)$/)",
									"disabled": true
								},
								{
									"key": "monitoring",
									"value": "",
									"description": "Area Code. (Regex: /^(1|0)$/)",
									"disabled": true
								},
								{
									"key": "call_screening",
									"value": "",
									"description": "National Code. (Regex: /^(1|0)$/)",
									"disabled": true
								},
								{
									"key": "extensions",
									"value": "",
									"description": "Extensions. (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								},
								{
									"key": "voicemails",
									"value": "",
									"description": "Voicemails. (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								},
								{
									"key": "queues",
									"value": "",
									"description": "Queues. (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								},
								{
									"key": "cfs",
									"value": "",
									"description": "Conferences. (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								},
								{
									"key": "rgroups",
									"value": "",
									"description": "Ring Groups. (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								},
								{
									"key": "hot_desking",
									"value": "",
									"description": "Hot Desking. (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								},
								{
									"key": "ivrs",
									"value": "",
									"description": "IVRs. (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Deleting Tenant Packages",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "370f756e-3d59-4fc1-8299-64fce1659b50",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('string');",
									"",
									"        // Print the success message and ID",
									"        console.log('Success:', responseBody.success);",
									"        console.log('Package ID:', responseBody.id);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7fd0cd88-2977-42a3-826c-f5606a16396e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.package.delete&server={{Srv/Tenant-ID}}&id={{TenantPackageID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.package.delete"
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Server ID which must be set to 1"
								},
								{
									"key": "id",
									"value": "{{TenantPackageID}}",
									"description": "Tenant Package ID"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "ec5cd1b4-a19f-4afa-a359-97bf509e526b",
			"description": "Supported Methods\n\n`configuration`\n\nTenant Package Configuration\n\n`list`\n\nList Tenant Packages\n\n`add`\n\nAdd new Tenant Package\n\n`edit`\n\nEdit existing Tenant Package\n\n`delete`\n\nDelete existing Tenant Package"
		},
		{
			"name": "Tenants",
			"item": [
				{
					"name": "Tenant Configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "139d7fb7-6cd9-4490-99ce-dd1d09aedaed",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        // Check if the response is an object",
									"        pm.expect(responseBody).to.be.an('object');",
									"",
									"        // Validate specific properties",
									"        pm.expect(responseBody).to.have.property('server_name').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('tenantcode').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('package_id').that.is.a('string');",
									"        pm.expect(responseBody.glocom_dns_srv_lookup).to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('glocomproxy').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('absolutetimeout').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('cdrvoicemail').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('faxformat').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('faxfiletype').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('status').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('default_location').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('recordbeep').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('recordformat').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('ringtonelocal').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('didsaveupdatecid').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('enabletcalls').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('tenantcid').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('tenant_faxcid').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('recordlimit').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('country').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('area_code').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('national').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('international').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('es_ambulance').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('es_fire').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('es_police').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('es_notification_email').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('emergency_callerid_tenant').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('audiolang').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('apusername').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('appassword').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('incominglimit').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('outgoinglimit').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('conch').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('quech').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('ergch').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('aach').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('zapch').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('notifyemail').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('cpark_timeout').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('cpark_dial').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('cpark_goto').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('hdlockext').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('hdlockdevice').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('hdlogoutinactive').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('custompresencetime').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('dialed_num_minimum_length').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('announcetrunks').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('recordglobal').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('recordsilent').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('hidecallerid').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('allowescallerid').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('enablecnamlookup').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('setcidforgrouphunt').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('cidmatchdid').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('dropanonymous').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('forceunknown').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('hideextnodir').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('usedynfeatures').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('nobillingfwd').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('cf_call_rating_disable').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('allowextipauth').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('voiceskippin').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('usedefaultcid').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('usedidcid').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('finde164').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('showdirosc').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('leavenational').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('limitsound').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('limitemail').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('pstn_mode').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('hdcheck').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody).to.have.property('hdautologout').to.be.oneOf(['string', null]);",
									"        pm.expect(responseBody.local_codecs).to.be.an('array');",
									"        pm.expect(responseBody.remote_codecs).to.be.an('array');",
									"        pm.expect(responseBody.network_codecs).to.be.an('array');",
									"",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2d3a7e84-7573-47e8-b69d-05084885e8e9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.tenant.configuration&id={{Srv/Tenant-ID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.tenant.configuration",
									"description": "Response will consist of an array of tenant configuration."
								},
								{
									"key": "id",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Tenant ID. (Regex: /^\\\\d+$/)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Listing Tenants",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e924a586-a8f4-4b6c-854e-bf2a64fccb5d",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the response body is an empty array",
									"    if (Array.isArray(responseBody) && responseBody.length === 0) {",
									"        console.error(\"Test Failed: There is no Tenant created on this system!\");",
									"        pm.test('Empty Response', function () {",
									"            pm.expect.fail(\"There is no Tenant created on this system!\");",
									"        });",
									"    } else {",
									"        // Validate the response structure",
									"        pm.test('Response Validation', function () {",
									"            // Iterate through each object in the response",
									"            for (var key in responseBody) {",
									"                if (responseBody.hasOwnProperty(key)) {",
									"                    var tenant = responseBody[key];",
									"",
									"                    pm.test('Tenant ' + tenant.name + ' Validation', function () {",
									"                        pm.expect(tenant).to.be.an('object');",
									"                        pm.expect(tenant).to.have.property('name').that.is.a('string');",
									"                        pm.expect(tenant).to.have.property('tenantcode').that.is.a('string');",
									"                        pm.expect(tenant).to.have.property('package_id').that.is.a('number');",
									"                        pm.expect(tenant).to.have.property('package').that.is.a('string');",
									"                        pm.expect(tenant).to.have.property('ext_length').that.is.a('number');",
									"                        pm.expect(tenant).to.have.property('country_id').that.is.a('number');",
									"                        pm.expect(tenant).to.have.property('country_code').that.is.a('number');",
									"                    });",
									"                }",
									"            }",
									"        });",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "9d84ad83-fd5e-481f-9d7b-0fe44a158b6e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.tenant.list",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.tenant.list",
									"description": "Response will consist of an array of tenants with array key being the Tenant ID."
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Adding Tenants",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c4ee453d-e406-4035-9fae-237612251689",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('number');",
									"",
									"        // Print the success message and ID",
									"        console.log('Success:', responseBody.success);",
									"        console.log('Package ID:', responseBody.id);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2a6eb921-b394-436f-9674-ae0b465d0443",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.tenant.add&tenant_name={{tenant_name}}&tenant_code={{tenant_code}}&package={{TenantPackageID}}&ext_length={{ExtLength}}&country={{Country}}&national={{NationalCode}}&international={{InternationalCode}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.tenant.add"
								},
								{
									"key": "tenant_name",
									"value": "{{tenant_name}}",
									"description": "Tenant Name (Required). Should be a valid FQDN (Fully Qualified Domain Name). (Regex: /^.+$/)"
								},
								{
									"key": "tenant_code",
									"value": "{{tenant_code}}",
									"description": "Unique 3-digit Tenant Code (Required). (Regex: /^\\\\d{3}$/)"
								},
								{
									"key": "package",
									"value": "{{TenantPackageID}}",
									"description": "Tenant Package ID (Required). Can be obtained with package object. (Regex: /^\\\\d+$/)"
								},
								{
									"key": "ext_length",
									"value": "{{ExtLength}}",
									"description": "Extensions length (Required). Can be in range 2-16 ONLY. (Regex: /^([2-9]|(1[0-6]))$/)"
								},
								{
									"key": "country",
									"value": "{{Country}}",
									"description": "Country ID (Required).Can be obtained with route object. (Regex: /^\\\\d{1,10}$/)"
								},
								{
									"key": "area_code",
									"value": "",
									"description": "Area Code. (Regex: /^\\\\d{1,50}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "national",
									"value": "{{NationalCode}}",
									"description": "National Code (Required). (Regex: /^\\\\d{1,10}$/)"
								},
								{
									"key": "international",
									"value": "{{InternationalCode}}",
									"description": "International Code (Required). (Regex: /^\\\\d{1,10}$/)"
								},
								{
									"key": "glocom_dns_srv_lookup",
									"value": "",
									"description": "gloCOM Use DNS SRV Lookup. (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "glocomproxy",
									"value": "",
									"description": "gloCOM SIP Proxy. (Regex: /^.+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "apusername",
									"value": "",
									"description": "HTTP username. (Regex: /^.+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "appassword",
									"value": "",
									"description": "HTTP password. (Regex: /^\\\\S.+\\\\S$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "defaultserver",
									"value": "",
									"description": "Default Server. (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "announcetrunks",
									"value": "",
									"description": "Announce Trunks. (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "absolutetimeout",
									"value": "",
									"description": "Absolute Timeout in sec. (Regex: /^\\\\d{1,5}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "cdrvoicemail",
									"value": "",
									"description": "Voicemail in CDRs\n2: As Voicemail\n1: As Not Answered calls\n0: As Answered calls\n(Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "faxformat",
									"value": "",
									"description": "FAX page format\n-letter\n-legal\n-A4\n-auto",
									"type": "text",
									"disabled": true
								},
								{
									"key": "faxfiletype",
									"value": "",
									"description": "FAX file type\n1: Both PDF and TIFF\n2: Only PDF\n3: Only TIFF",
									"type": "text",
									"disabled": true
								},
								{
									"key": "default_location",
									"value": "",
									"description": "Default Extension Location (Local=1, Remote=2)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "enabletcalls",
									"value": "",
									"description": "Enable Tenant to Tenant calls. (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "disabletcid",
									"value": "",
									"description": "Disable CallerID rewrite for tenant to tenant calls. (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "tenantcid",
									"value": "",
									"description": "Default CallerID. (Regex: /^.+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "tenant_faxcid",
									"value": "",
									"description": "Default Fax CallerID. (Regex: /^.+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "usedefaultcid",
									"value": "",
									"description": "Use Default CallerID for tenant to tenant calls. (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "usedidcid",
									"value": "",
									"description": "Use DIDs as CallerID for tenant to tenant calls. (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "finde164",
									"value": "",
									"description": "Find E.164 numbers in DIDs. (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "recordlimit",
									"value": "",
									"description": "Number of objects per page (Default: 10). (Regex: /^\\\\d{1,3}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "showdirosc",
									"value": "",
									"description": "Show Directory in OSC. (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "recordglobal",
									"value": "",
									"description": "Record calls by default. (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "recordsilent",
									"value": "",
									"description": "Silent recording by default. (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "mp3_auto_conv",
									"value": "",
									"description": "Convert recordings to mp3 on generation. (Regex: /^(yes|keep|no)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "recordbeep",
									"value": "",
									"description": "Play Periodic Beep in sec. (Regex: /^\\\\d{1,3}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "recordformat",
									"value": "",
									"description": "Recordings format\n-gsm: GSM\n-wav: WAV\n-wav49: WAV49\n-g729: G729 native â†’ GSM\n-ogg: OGG",
									"type": "text",
									"disabled": true
								},
								{
									"key": "audiolang",
									"value": "",
									"description": "Audio Language. (Regex: /^.+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "cpark_timeout",
									"value": "",
									"description": "Enhanced Call Parking Timeout (sec). (Regex: /^\\\\d{1,3}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "cpark_dial",
									"value": "",
									"description": "Enhanced Call Parking Announce Extension. (Regex: /^\\\\d{3}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "cpark_goto",
									"value": "",
									"description": "Enhanced Call Parking Timeout Extension. (Regex: /^\\\\d{3}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "limitsound",
									"value": "",
									"description": "Play Sound. (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "limitemail",
									"value": "",
									"description": "Enable send email option. (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "notifyemail",
									"value": "",
									"description": "Notification email. (Regex: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "leavenational",
									"value": "",
									"description": "Leave National Code. (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "currency",
									"value": "",
									"description": "Currency symbol/ISO code. (Regex: /^.{1,3}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "currencypos",
									"value": "",
									"description": "Currency writing convention\nleft: Symbol before amount\nright: Symbol after amount.\n(Regex: /^(left|right)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "dialed_num_minimum_length",
									"value": "",
									"description": "Dialed number minimum length. (Regex: /^\\\\d{1,4}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "pstn_mode",
									"value": "",
									"description": "PSTN numbering mode. (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "callgroups",
									"value": "",
									"description": "Call groups/Pickup Groups (comma separated). (Regex: /^[0-9]+(,[0-9]+)*$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "localcodecs",
									"value": "",
									"description": "Local Codecs. (Regex: /^(:|ulaw|alaw|g722|opus|g723.1|g726|g726aal2|g729|gsm|ilbc|speex|speex16|speex32|lpc10|h261|h263|h263p|h264)+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "remotecodecs",
									"value": "",
									"description": "Remote Codecs. (Regex: /^(:|ulaw|alaw|g722|opus|g723.1|g726|g726aal2|g729|gsm|ilbc|speex|speex16|speex32|lpc10|h261|h263|h263p|h264)+$/).\"",
									"disabled": true
								},
								{
									"key": "networkcodecs",
									"value": "",
									"description": "Network Codecs. (Regex: /^(:|ulaw|alaw|g722|opus|g723.1|g726|g726aal2|g729|gsm|ilbc|speex|speex16|speex32|lpc10|h261|h263|h263p|h264)+$/).\"",
									"type": "text",
									"disabled": true
								},
								{
									"key": "hdcheck",
									"value": "",
									"description": "Login Attempts Check. (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "hdlockext",
									"value": "",
									"description": "Lock Extension After X Failed Attempts.  (Regex: /^\\\\d{1}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "hdlockdevice",
									"value": "",
									"description": "Lock Phone After X Locked Extensions.  (Regex: /^\\\\d{1}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "hdautologout",
									"value": "",
									"description": "Automatic Log Out. (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "hdlogoutinactive",
									"value": "",
									"description": "Log Out After X Hours of Inactivity. (Regex: /^\\\\d{1}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "ringtonelocal",
									"value": "",
									"description": "Ringtone for Local calls. (Regex: /^.+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "hidecallerid",
									"value": "",
									"description": "Hide CallerID in OSC. (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "allowescallerid",
									"value": "",
									"description": "Allow ES CallerID\" for Call Forwarding. (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "enablecnamlookup",
									"value": "",
									"description": "Enable CallerID CNAM lookup. (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "setcidforgrouphunt",
									"value": "",
									"description": "Set CallerID for Group Hunt calls. (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "cidmatchdid",
									"value": "",
									"description": "Only Allow Trunk CallerID within DID range. (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "dropanonymous",
									"value": "",
									"description": "Drop Anonymous calls. (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "didsaveupdatecid",
									"value": "",
									"description": "On DID save update ES/CID/Trunks. (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "forceunknown",
									"value": "",
									"description": "Do not allow users sending any CallerID. (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "hideextnodir",
									"value": "",
									"description": "Hide Extensions with no department (gloCOM). (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "custompresencetime",
									"value": "",
									"description": "gloCOM presence offline delay (min). (Regex: /^\\\\d{1,4}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "usedynfeatures",
									"value": "",
									"description": "Use Dynamic Features. (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "nobillingfwd",
									"value": "",
									"description": "Disable Billing for Call Forwarding. (deprecated and will be soon replaced with cf_call_rating_disable). (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "cf_call_rating_disable",
									"value": "",
									"description": "Disable Call Rating for Call Forwarding. (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "jbimpl",
									"value": "",
									"description": "Jitter Buffer (inherit, disabled, fixed, adaptive)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "jbmaxsize",
									"value": "",
									"description": "Max length (ms). (Regex: /^\\\\d{1,4}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "jbresyncthreshold",
									"value": "",
									"description": "Re-sync threshold. (Regex: /^\\\\d{1,5}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "jbtargetextra",
									"value": "",
									"description": "Target extra. (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								},
								{
									"key": "allowextipauth",
									"value": "",
									"description": "Allow IP Address Authentication for Extensions (Yes=1, No=0). (Regex: /^(1|0|2)$/).",
									"type": "text",
									"disabled": true
								},
								{
									"key": "voiceskippin",
									"value": "",
									"description": "Skip Voicemail PIN Prompt (Yes=1, No=0)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "email_from",
									"value": "",
									"description": "From E-mail. (Regex: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "vm_email_from",
									"value": "",
									"description": "Voicemail From E-mail. (Regex: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "local_channels",
									"value": "",
									"description": "Local Channels. (Regex: /^\\\\d{1,5}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "remote_channels",
									"value": "",
									"description": "Remote Channels. (Regex: /^\\\\d{1,5}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "conferences",
									"value": "",
									"description": "Conferences. (Regex: /^\\\\d{1,5}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "queues",
									"value": "",
									"description": "Queues. (Regex: /^\\\\d{1,5}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "auto_attendants",
									"value": "",
									"description": "Auto Attendants. (Regex: /^\\\\d{1,5}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "dahdi",
									"value": "",
									"description": "DAHDI. (Regex: /^\\\\d{1,5}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "dids_notify_email",
									"value": "",
									"description": "Notification E-mail. (Regex: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "dids_notify_order",
									"value": "",
									"description": "Order By. (Regex: /^(did|date)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "es_ambulance",
									"value": "",
									"description": "Ambulance. (Regex: /^\\\\d{3,16}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "es_fire",
									"value": "",
									"description": "Fire. (Regex: /^\\\\d{3,16}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "es_police",
									"value": "",
									"description": "Police. (Regex: /^\\\\d{3,16}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "es_notification_email",
									"value": "",
									"description": "Notification E-mail. (Regex: /^([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,30};?)+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "ldap_enabled",
									"value": "",
									"description": "Enable LDAP (Yes=1, No=0)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "ldap_local_exts",
									"value": "",
									"description": "Include System Extensions:(Yes=1, No=0, Not set='')",
									"type": "text",
									"disabled": true
								},
								{
									"key": "ldap_hotdesking",
									"value": "",
									"description": "Enable LDAP For Hot Desking Devices:(Yes=1, No=0, Not set='')",
									"type": "text",
									"disabled": true
								},
								{
									"key": "ldap_password",
									"value": "",
									"description": "LDAP password. (Regex: /^.+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "appasword",
									"value": null,
									"description": "(Regex: /^\\\\S.+\\\\S$/)",
									"type": "text",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Editing Tenants",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c4ee453d-e406-4035-9fae-237612251689",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('string');",
									"",
									"        // Print the success message and ID",
									"        console.log('Success:', responseBody.success);",
									"        console.log('Package ID:', responseBody.id);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e1922da7-689a-41b7-9143-a7855a4a86b4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.tenant.edit&server=1&id={{tenantID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.tenant.edit"
								},
								{
									"key": "server",
									"value": "1",
									"description": "Server ID which must be set to 1"
								},
								{
									"key": "id",
									"value": "{{tenantID}}",
									"description": "Tenant ID. For editing more tenants use CSV filr Add&Edit-Tenants.csv"
								},
								{
									"key": "status",
									"value": "{{TenantStatus}}",
									"description": "Status (Not Active=0, Active=1, Suspended=2)",
									"disabled": true
								},
								{
									"key": "tenant_name",
									"value": "{{tenant_name}}",
									"description": "Tenant Name (Required). Should be a valid FQDN (Fully Qualified Domain Name). (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "tenant_code",
									"value": "{{tenant_code}}",
									"description": "Unique 3-digit Tenant Code (Required). (Regex: /^\\\\d{3}$/)",
									"disabled": true
								},
								{
									"key": "package",
									"value": "{{TenantPackageID}}",
									"description": "Tenant Package ID (Required). Can be obtained with package object. (Regex: /^\\\\d+$/)",
									"disabled": true
								},
								{
									"key": "ext_length",
									"value": "{{ExtLength}}",
									"description": "Extensions length (Required). Can be in range 2-16 ONLY. (Regex: /^([2-9]|(1[0-6]))$/)",
									"disabled": true
								},
								{
									"key": "country",
									"value": "{{Country}}",
									"description": "Country ID (Required).Can be obtained with route object. (Regex: /^\\\\d{1,10}$/)",
									"disabled": true
								},
								{
									"key": "area_code",
									"value": "",
									"description": "Area Code. (Regex: /^\\\\d{1,50}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "national",
									"value": "{{NationalCode}}",
									"description": "National Code (Required). (Regex: /^\\\\d{1,10}$/)",
									"disabled": true
								},
								{
									"key": "international",
									"value": "{{InternationalCode}}",
									"description": "International Code (Required). (Regex: /^\\\\d{1,10}$/)",
									"disabled": true
								},
								{
									"key": "glocom_dns_srv_lookup",
									"value": "",
									"description": "gloCOM Use DNS SRV Lookup. (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "glocomproxy",
									"value": "",
									"description": "gloCOM SIP Proxy. (Regex: /^.+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "apusername",
									"value": "",
									"description": "HTTP username. (Regex: /^.+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "appassword",
									"value": "",
									"description": "HTTP password. (Regex: /^\\\\S.+\\\\S$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "defaultserver",
									"value": "",
									"description": "Default Server. (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "announcetrunks",
									"value": "",
									"description": "Announce Trunks. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "absolutetimeout",
									"value": "",
									"description": "Absolute Timeout in sec. (Regex: /^\\\\d{1,5}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "cdrvoicemail",
									"value": "",
									"description": "Voicemail in CDRs\n2: As Voicemail\n1: As Not Answered calls\n0: As Answered calls\n(Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "faxformat",
									"value": "",
									"description": "FAX page format\n-letter\n-legal\n-A4\n-auto",
									"type": "text",
									"disabled": true
								},
								{
									"key": "faxfiletype",
									"value": "",
									"description": "FAX file type\n1: Both PDF and TIFF\n2: Only PDF\n3: Only TIFF",
									"type": "text",
									"disabled": true
								},
								{
									"key": "default_location",
									"value": "",
									"description": "Default Extension Location (Local=1, Remote=2)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "enabletcalls",
									"value": "",
									"description": "Enable Tenant to Tenant calls. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "disabletcid",
									"value": "",
									"description": "Disable CallerID rewrite for tenant to tenant calls. (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "tenantcid",
									"value": "",
									"description": "Default CallerID. (Regex: /^.+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "tenant_faxcid",
									"value": "",
									"description": "Default Fax CallerID. (Regex: /^.+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "usedefaultcid",
									"value": "",
									"description": "Use Default CallerID for tenant to tenant calls. (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "usedidcid",
									"value": "",
									"description": "Use DIDs as CallerID for tenant to tenant calls. (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "finde164",
									"value": "",
									"description": "Find E.164 numbers in DIDs. (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "recordlimit",
									"value": "",
									"description": "Number of objects per page (Default: 10). (Regex: /^\\\\d{1,3}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "showdirosc",
									"value": "",
									"description": "Show Directory in OSC. (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "recordglobal",
									"value": "",
									"description": "Record calls by default. (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "recordsilent",
									"value": "",
									"description": "Silent recording by default. (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "mp3_auto_conv",
									"value": "",
									"description": "Convert recordings to mp3 on generation. (Regex: /^(yes|keep|no)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "recordbeep",
									"value": "",
									"description": "Play Periodic Beep in sec. (Regex: /^\\\\d{1,3}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "recordformat",
									"value": "",
									"description": "Recordings format\n-gsm: GSM\n-wav: WAV\n-wav49: WAV49\n-g729: G729 native â†’ GSM\n-ogg: OGG",
									"disabled": true
								},
								{
									"key": "audiolang",
									"value": "",
									"description": "Audio Language. (Regex: /^.+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "cpark_timeout",
									"value": "",
									"description": "Enhanced Call Parking Timeout (sec). (Regex: /^\\\\d{1,3}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "cpark_dial",
									"value": "",
									"description": "Enhanced Call Parking Announce Extension. (Regex: /^\\\\d{3}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "cpark_goto",
									"value": "",
									"description": "Enhanced Call Parking Timeout Extension. (Regex: /^\\\\d{3}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "limitsound",
									"value": "",
									"description": "Play Sound. (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "limitemail",
									"value": "",
									"description": "Enable send email option. (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "notifyemail",
									"value": "",
									"description": "Notification email. (Regex: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "leavenational",
									"value": "",
									"description": "Leave National Code. (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "currency",
									"value": "",
									"description": "Currency symbol/ISO code. (Regex: /^.{1,3}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "currencypos",
									"value": "",
									"description": "Currency writing convention\nleft: Symbol before amount\nright: Symbol after amount.\n(Regex: /^(left|right)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "dialed_num_minimum_length",
									"value": "",
									"description": "Dialed number minimum length. (Regex: /^\\\\d{1,4}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "pstn_mode",
									"value": "",
									"description": "PSTN numbering mode. (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "callgroups",
									"value": "",
									"description": "Call groups/Pickup Groups (comma separated). (Regex: /^[0-9]+(,[0-9]+)*$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "localcodecs",
									"value": "",
									"description": "Local Codecs. (Regex: /^(:|ulaw|alaw|g722|opus|g723.1|g726|g726aal2|g729|gsm|ilbc|speex|speex16|speex32|lpc10|h261|h263|h263p|h264)+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "remotecodecs",
									"value": "",
									"description": "Remote Codecs. (Regex: /^(:|ulaw|alaw|g722|opus|g723.1|g726|g726aal2|g729|gsm|ilbc|speex|speex16|speex32|lpc10|h261|h263|h263p|h264)+$/).\"",
									"disabled": true
								},
								{
									"key": "networkcodecs",
									"value": "",
									"description": "Network Codecs. (Regex: /^(:|ulaw|alaw|g722|opus|g723.1|g726|g726aal2|g729|gsm|ilbc|speex|speex16|speex32|lpc10|h261|h263|h263p|h264)+$/).\"",
									"type": "text",
									"disabled": true
								},
								{
									"key": "hdcheck",
									"value": "",
									"description": "Login Attempts Check. (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "hdlockext",
									"value": "",
									"description": "Lock Extension After X Failed Attempts.  (Regex: /^\\\\d{1}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "hdlockdevice",
									"value": "",
									"description": "Lock Phone After X Locked Extensions.  (Regex: /^\\\\d{1}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "hdautologout",
									"value": "",
									"description": "Automatic Log Out. (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "hdlogoutinactive",
									"value": "",
									"description": "Log Out After X Hours of Inactivity. (Regex: /^\\\\d{1}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "ringtonelocal",
									"value": "",
									"description": "Ringtone for Local calls. (Regex: /^.+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "hidecallerid",
									"value": "",
									"description": "Hide CallerID in OSC. (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "allowescallerid",
									"value": "",
									"description": "Allow ES CallerID\" for Call Forwarding. (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "enablecnamlookup",
									"value": "",
									"description": "Enable CallerID CNAM lookup. (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "setcidforgrouphunt",
									"value": "",
									"description": "Set CallerID for Group Hunt calls. (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "cidmatchdid",
									"value": "",
									"description": "Only Allow Trunk CallerID within DID range. (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "dropanonymous",
									"value": "",
									"description": "Drop Anonymous calls. (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "didsaveupdatecid",
									"value": "",
									"description": "On DID save update ES/CID/Trunks. (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "forceunknown",
									"value": "",
									"description": "Do not allow users sending any CallerID. (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "hideextnodir",
									"value": "",
									"description": "Hide Extensions with no department (gloCOM). (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "custompresencetime",
									"value": "",
									"description": "gloCOM presence offline delay (min). (Regex: /^\\\\d{1,4}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "usedynfeatures",
									"value": "",
									"description": "Use Dynamic Features. (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "nobillingfwd",
									"value": "",
									"description": "Disable Billing for Call Forwarding. (deprecated and will be soon replaced with cf_call_rating_disable). (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "cf_call_rating_disable",
									"value": "",
									"description": "Disable Call Rating for Call Forwarding. (Regex: /^(1|0|2)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "jbimpl",
									"value": "",
									"description": "Jitter Buffer (inherit, disabled, fixed, adaptive)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "jbmaxsize",
									"value": "",
									"description": "Max length (ms). (Regex: /^\\\\d{1,4}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "jbresyncthreshold",
									"value": "",
									"description": "Re-sync threshold. (Regex: /^\\\\d{1,5}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "jbtargetextra",
									"value": "",
									"description": "Target extra. (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								},
								{
									"key": "allowextipauth",
									"value": "",
									"description": "Allow IP Address Authentication for Extensions (Yes=1, No=0). (Regex: /^(1|0|2)$/).",
									"type": "text",
									"disabled": true
								},
								{
									"key": "voiceskippin",
									"value": "",
									"description": "Skip Voicemail PIN Prompt (Yes=1, No=0)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "email_from",
									"value": "",
									"description": "From E-mail. (Regex: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "vm_email_from",
									"value": "",
									"description": "Voicemail From E-mail. (Regex: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "local_channels",
									"value": "",
									"description": "Local Channels. (Regex: /^\\\\d{1,5}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "remote_channels",
									"value": "",
									"description": "Remote Channels. (Regex: /^\\\\d{1,5}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "conferences",
									"value": "",
									"description": "Conferences. (Regex: /^\\\\d{1,5}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "queues",
									"value": "",
									"description": "Queues. (Regex: /^\\\\d{1,5}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "auto_attendants",
									"value": "",
									"description": "Auto Attendants. (Regex: /^\\\\d{1,5}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "dahdi",
									"value": "",
									"description": "DAHDI. (Regex: /^\\\\d{1,5}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "dids_notify_email",
									"value": "",
									"description": "Notification E-mail. (Regex: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "dids_notify_order",
									"value": "",
									"description": "Order By. (Regex: /^(did|date)$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "es_ambulance",
									"value": "",
									"description": "Ambulance. (Regex: /^\\\\d{3,16}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "es_fire",
									"value": "",
									"description": "Fire. (Regex: /^\\\\d{3,16}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "es_police",
									"value": "",
									"description": "Police. (Regex: /^\\\\d{3,16}$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "es_notification_email",
									"value": "",
									"description": "Notification E-mail. (Regex: /^([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,30};?)+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "ldap_enabled",
									"value": "",
									"description": "Enable LDAP (Yes=1, No=0)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "ldap_local_exts",
									"value": "",
									"description": "Include System Extensions:(Yes=1, No=0, Not set='')",
									"type": "text",
									"disabled": true
								},
								{
									"key": "ldap_hotdesking",
									"value": "",
									"description": "Enable LDAP For Hot Desking Devices:(Yes=1, No=0, Not set='')",
									"type": "text",
									"disabled": true
								},
								{
									"key": "ldap_password",
									"value": "",
									"description": "LDAP password. (Regex: /^.+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "appasword",
									"value": "",
									"description": "(Regex: /^\\\\S.+\\\\S$/)",
									"type": "text",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Deleting Tenants",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "985cef8c-78dc-4a7f-b663-5daae5263948",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"",
									"        // Print the success message",
									"        //console.log('Success:', responseBody.success);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "42a6779d-cd92-47ca-8096-40e2d1bc4b52",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.tenant.delete&server=1&id={{tenantID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.tenant.delete"
								},
								{
									"key": "server",
									"value": "1",
									"description": "Server ID which must be set to 1"
								},
								{
									"key": "id",
									"value": "{{tenantID}}",
									"description": "Tenant ID. For deletenig more tenants use Add&Edit-Tenant.csv"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Listing Trunks&Tenants",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "267ed84e-c53a-4837-895a-a649119e2f42",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseData = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseData) {",
									"    console.error(\"Test Failed: \" + responseData.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseData.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseData).to.be.an('object');",
									"        pm.expect(responseData).to.have.property('primary_trunk').that.is.a('string');",
									"        pm.expect(responseData).to.have.property('secondary_trunk').that.is.a('string');",
									"        pm.expect(responseData).to.have.property('tertiary_trunk').that.is.a('string');",
									"        pm.expect(responseData).to.have.property('trunks').that.is.a('string');",
									"        pm.expect(responseData).to.have.property('primary_emerg_trunk').that.is.a('string');",
									"        pm.expect(responseData).to.have.property('secondary_emerg_trunk').that.is.a('string');",
									"        pm.expect(responseData).to.have.property('tertiary_emerg_trunk').that.is.a('string');",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "817be1e4-b127-472e-abc7-3c03eb3a7e41",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.tenant.trunks.list&tenant={{Srv/Tenant-ID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.tenant.trunks.list"
								},
								{
									"key": "tenant",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Tenant ID"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Setting Trunks&Tenants",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ae3a3ae7-ad3f-4cc1-ae87-432044e0d265",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the success message",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2d735ed4-e693-4fc6-87ce-5bb743d0b158",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.tenant.trunks.set&tenant={{Srv/Tenant-ID}}&trunks={{TrunkIDs}}&primary_trunk={{Primary}}&primary_emerg_trunk={{PrimaryEm}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.tenant.trunks.set",
									"description": "For setting more tenants with same trunks use Setting-Trunks&Tenants.csv file"
								},
								{
									"key": "tenant",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Tenant ID"
								},
								{
									"key": "trunks",
									"value": "{{TrunkIDs}}",
									"description": "List of trunk IDâ€™s (comma separated). (Regex: /^[0-9,]+$/)"
								},
								{
									"key": "primary_trunk",
									"value": "{{Primary}}",
									"description": "Primary trunk. (Regex: /^\\\\d{1,10}$/)"
								},
								{
									"key": "secondary_trunk",
									"value": "{{Secondary}}",
									"description": "Secondary trunk. (Regex: /^\\\\d{1,10}$/)",
									"disabled": true
								},
								{
									"key": "tertiary_trunk",
									"value": "{{Tertiary}}",
									"description": "Tertiary trunk. (Regex: /^\\\\d{1,10}$/)",
									"disabled": true
								},
								{
									"key": "primary_emerg_trunk",
									"value": "{{PrimaryEm}}",
									"description": "Primary emergency trunk. (Regex: /^\\\\d{1,10}$/)"
								},
								{
									"key": "secondary_emerg_trunk",
									"value": "{{SecondaryEm}}",
									"description": "Secondary emergency trunk. (Regex: /^\\\\d{1,10}$/)",
									"disabled": true
								},
								{
									"key": "tertiary_emerg_trunk",
									"value": "{{TertiaryEm}}",
									"description": "Tertiary emergency trunk. (Regex: /^\\\\d{1,10}$/)",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Adding CLI Routing",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6ae0cdae-bba3-413a-a509-47b694d7be8d",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the success message",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4f98d172-e4ef-422a-8e34-de9d70395edb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.tenant.clirouting.add&tenant={{Srv/Tenant-ID}}&callerid={{CallerID}}&dest_type={{DestType}}&destination={{Destination}}&matchexplicitly={{MatchEx}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.tenant.clirouting.add",
									"description": "If need to add multiple CLI Routings on multiple Tenants, you can use Add/Edit/Delete-CLI_Routing.csv file."
								},
								{
									"key": "tenant",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Tenant ID (Required).If PBXware is not running in Tenant Mode, Tenant ID should be set to 1. (Regex: /^\\\\d+$/)"
								},
								{
									"key": "callerid",
									"value": "{{CallerID}}",
									"description": "Caller ID (Required). (Regex: /^\\\\d+$/)."
								},
								{
									"key": "dest_type",
									"value": "{{DestType}}",
									"description": "Destination type (Required)\n0: Extension\n1: Multi User\n2: Ring Group\n3: IVR\n4: Queues\n5: Voicemail\n6: Remote Access\n7: Conferences\n8: Trunk\n9: Fax to E-mail\n10: Deny Access (No value)\n11: CRM Routing\n"
								},
								{
									"key": "destination",
									"value": "{{Destination}}",
									"description": "Destination value (Required)\nIf Destination type is Trunk, enter ID of Trunk for Destination value\nIf Destination type is CRM Routing, enter ID of CRM Routing rule for Destination value"
								},
								{
									"key": "matchexplicitly",
									"value": "{{MatchEx}}",
									"description": "Match explicitly (0 or 1) (Required)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Editing CLI Routing",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6ae0cdae-bba3-413a-a509-47b694d7be8d",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the success message",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "215c25e2-81cd-4875-904c-08a64a3f91eb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.tenant.clirouting.edit&tenant={{Srv/Tenant-ID}}&cliroutingid={{CLIRoutingID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.tenant.clirouting.edit",
									"description": "Editing CLI Routing. Arguments are identical to the ones in Adding CLI Routing section. If need to edit multiple CLI Routings on multiple Tenants, you can use Add/Edit/Delete-CLI_Routing.csv file."
								},
								{
									"key": "tenant",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Tenant ID. (Required). If PBXware is not running in Tenant Mode, Tenant ID should be set to 1. (Regex: /^\\\\d+$/)"
								},
								{
									"key": "cliroutingid",
									"value": "{{CLIRoutingID}}",
									"description": "CLI Routing ID. (Regex: /^\\\\d+$/)"
								},
								{
									"key": "callerid",
									"value": "{{CallerID}}",
									"description": "Caller ID. (Regex: /^\\\\d+$/).",
									"disabled": true
								},
								{
									"key": "dest_type",
									"value": "{{DestType}}",
									"description": "Destination type\n0: Extension\n1: Multi User\n2: Ring Group\n3: IVR\n4: Queues\n5: Voicemail\n6: Remote Access\n7: Conferences\n8: Trunk\n9: Fax to E-mail\n10: Deny Access (No value)\n11: CRM Routing\n",
									"disabled": true
								},
								{
									"key": "destination",
									"value": "{{Destination}}",
									"description": "Destination value\nIf Destination type is Trunk, enter ID of Trunk for Destination value\nIf Destination type is CRM Routing, enter ID of CRM Routing rule for Destination value",
									"disabled": true
								},
								{
									"key": "matchexplicitly",
									"value": "{{MatchEx}}",
									"description": "Match explicitly (0 or 1)",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Listing CLI Routing",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9b25246-885d-48b1-bc75-12b93a48387f",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if \"success\" field is an empty array",
									"if (Array.isArray(responseBody.success) && responseBody.success.length === 0) {",
									"    console.error(\"Test Failed: There is no CLI routing created for selected Tenant!\");",
									"    pm.test('No CLI Routing Found', function () {",
									"        pm.expect.fail(\"There is no CLI routing created for selected Tenant!\");",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"",
									"        // Iterate through each CLI routing entry",
									"        for (var cliroutingId in responseBody.success) {",
									"            var clirouting = responseBody.success[cliroutingId];",
									"            pm.expect(clirouting).to.be.an('object');",
									"",
									"            pm.test(`CLI Routing ${cliroutingId} Validation`, function () {",
									"                pm.expect(clirouting).to.have.property('callerid').that.is.a('string');",
									"                pm.expect(clirouting).to.have.property('ext').that.is.a('string');",
									"                pm.expect(clirouting).to.have.property('type').that.is.a('string');",
									"                pm.expect(clirouting).to.have.property('matchtype').that.is.a('string');",
									"            });",
									"        }",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c45d1bce-0ecc-476c-b178-bf4064564b01",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.tenant.clirouting.list&tenant={{Srv/Tenant-ID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.tenant.clirouting.list"
								},
								{
									"key": "tenant",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Tenant ID (Required). If PBXware is not running in Tenant Mode, Tenant ID should be set to 1."
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletenig CLI Routing",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "09e9e3c4-9f81-45e0-af76-8dd633c8cc89",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the success message",
									"    pm.test('CLI Routing Deletion Success', function () {",
									"        pm.expect(responseBody.success).to.be.a('string');",
									"        pm.expect(responseBody.success).to.include('CLI Routing successfully deleted!');",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "cde78169-0473-4d24-a069-0d88de4015f6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.tenant.clirouting.delete&tenant={{Srv/Tenant-ID}}&cliroutingid={{CLIRoutingID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.tenant.clirouting.delete",
									"description": "If need to delete more CLI routings from multiple Tenants, you can use Add/Edit/Delete-CLI_Routing.csv file."
								},
								{
									"key": "tenant",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Tenant ID (Required). If PBXware is not running in Tenant Mode, Tenant ID should be set to 1."
								},
								{
									"key": "cliroutingid",
									"value": "{{CLIRoutingID}}",
									"description": "CLI Routing ID (Required)"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "aa038999-840d-491d-8c20-721dd4dd86a0",
			"description": "Supported Methods\n\n`configuration`\n\nTenant Configuration\n\n`list`\n\nList Tenants\n\n`add`\n\nAdd new Tenant\n\n`edit`\n\nEdit existing Tenant\n\n`delete`\n\nDelete existing Tenant\n\n`trunks.list`\n\nList Trunks & Tenants\n\n`trunks.set`\n\nSet Trunks & Tenants\n\n`clirouting.add`\n\nAdd CLI routing\n\n`clirouting.edit`\n\nEdit CLI routing\n\n`clirouting.list`\n\nList CLI routing\n\n`clirouting.delete`\n\nDelete CLI routing"
		},
		{
			"name": "Servers",
			"item": [
				{
					"name": "Server Configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9c14f987-3521-4851-a4f4-3bca49cea794",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"",
									"        // Validate specific fields in the response",
									"        pm.expect(responseBody).to.have.property('server_name').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('domainname').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('absolutetimeout').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('cdrvoicemail').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('faxformat').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('faxfiletype').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('mp3_auto_conv').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('recordformat').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('didmode').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('rpsexpiry').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('show_advanced_opts').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('setcidforgrouphunt').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('tenant_calls_enabled').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('show_dir_osc').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('nodidresponse').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('erg_abandoned_check_interval').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('country').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('zaptel_zone').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('indications').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('area_code').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('national').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('international').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('currency_writing_convention').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('agi_port').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('email_from').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('ap_lan').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('ap_wan').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('ap_req_num').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('enable_tftp').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('incominglimit').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('outgoinglimit').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('conch').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('quech').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('ergch').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('aach').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('zapch').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('e2faxch').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('pbd_pin_length').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('mint').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('rltype').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('rtype').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('emailto').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('limit_notify_email').that.is.a('string');",
									"",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b092a620-14a2-4119-998c-02842671cfc8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.server.configuration",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.server.configuration"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "f156e8d1-c550-4b89-aa9f-58e59b2679c1",
			"description": "Supported Methods\n\n`configuration`\n\nServer Configuration"
		},
		{
			"name": "Service Plans",
			"item": [
				{
					"name": "Listing Service Plans",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "26409718-1192-4e64-b7ca-ba679f198753",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the response is an empty array",
									"    if (Array.isArray(responseBody) && responseBody.length === 0) {",
									"        console.error(\"Test Failed: There is no service plan created on Server!\");",
									"        pm.test('Empty Response', function () {",
									"            pm.expect.fail(\"There is no service plan created on this Server!\");",
									"        });",
									"    } else {",
									"        // Validate the response structure",
									"        pm.test('Response Validation', function () {",
									"            pm.expect(responseBody).to.be.an('object');",
									"",
									"            // Iterate through each Service Plan",
									"            for (var key in responseBody) {",
									"                if (responseBody.hasOwnProperty(key)) {",
									"                    var servicePlan = responseBody[key];",
									"",
									"                    pm.test('Service Plan ' + servicePlan.name + ' Validation', function () {",
									"                        pm.expect(servicePlan).to.be.an('object');",
									"                        pm.expect(servicePlan).to.have.property('name').that.is.a('string');",
									"                        pm.expect(servicePlan).to.have.property('tbd').that.is.a('string');",
									"                        pm.expect(servicePlan).to.have.property('min_charge').that.is.a('string');",
									"                        pm.expect(servicePlan).to.have.property('connection_charge').that.is.a('string');",
									"                        pm.expect(servicePlan).to.have.property('inclusive').that.is.a('string');",
									"                        pm.expect(servicePlan).to.have.property('grace_period').that.is.a('string');",
									"                        pm.expect(servicePlan).to.have.property('billing').that.is.a('string');",
									"                        pm.expect(servicePlan).to.have.property('call_rating').that.is.a('string');",
									"                    });",
									"                }",
									"            }",
									"        });",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b2d37ad2-6080-4119-ac49-c7d7261297a1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.splan.list",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.splan.list"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Service Plans Rates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "83c2dda8-13f2-4171-9755-e3cba5096111",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Define a flag to check if the element exists",
									"    var elementExists = false;",
									"",
									"    // Loop through the response and find the element with numeric keys",
									"    for (var key in responseBody) {",
									"        if (typeof responseBody[key] === 'object') {",
									"            for (var innerKey in responseBody[key]) {",
									"                if (!isNaN(innerKey)) {",
									"                    elementExists = true;",
									"                    validateFields(responseBody[key][innerKey], key);",
									"                    break;",
									"                }",
									"            }",
									"        }",
									"    }",
									"",
									"    // If the element doesn't exist, perform checks for all routes",
									"    if (!elementExists) {",
									"        for (var route in responseBody) {",
									"            if (typeof responseBody[route] === 'object') {",
									"                validateFields(responseBody[route], route);",
									"            }",
									"        }",
									"    }",
									"}",
									"",
									"// Function to perform field validations with notes",
									"function validateFields(element, route) {",
									"    // Function to validate whether a value is null or a string",
									"    function validateNullOrString(value) {",
									"        pm.expect(value === null || typeof value === 'string').to.be.true;",
									"    }",
									"",
									"    pm.test(`Inbound Rate Validation for rate ${route}`, function () {",
									"        validateNullOrString(element.inbound);",
									"    });",
									"",
									"    pm.test(`Outbound Rate Validation for rate ${route}`, function () {",
									"        validateNullOrString(element.outbound);",
									"    });",
									"",
									"    pm.test(`Inclusives Rate Validation for rate ${route}`, function () {",
									"        validateNullOrString(element.inclusives);",
									"    });",
									"",
									"    pm.test(`Billing Rate Validation for rate ${route}`, function () {",
									"        validateNullOrString(element.billing);",
									"    });",
									"",
									"    pm.test(`Call Rating Rate Validation for rate ${route}`, function () {",
									"        validateNullOrString(element.call_rating);",
									"    });",
									"",
									"    pm.test(`Minimum Charge Rate Validation for rate ${route}`, function () {",
									"        validateNullOrString(element.min_charge);",
									"    });",
									"",
									"    pm.test(`Connection Charge Rate Validation for rate ${route}`, function () {",
									"        validateNullOrString(element.connection_charge);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "48ed5b24-ac4c-4652-8832-0f8863e3e3aa",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.splan.rates&id={{SP-ID}}&route={{RouteID}}&dgroup={{DestGrID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.splan.rates",
									"description": "Use ServicePlansRates.csv file for multiple list of SPs."
								},
								{
									"key": "id",
									"value": "{{SP-ID}}",
									"description": "Service Plan ID (Required). (Regex: /^\\\\d+$/)"
								},
								{
									"key": "route",
									"value": "{{RouteID}}",
									"description": "Route ID. (Regex: /^\\\\d+$/)",
									"type": "text"
								},
								{
									"key": "dgroup",
									"value": "{{DestGrID}}",
									"description": "Destination Group ID. Note: Only if route is supplied. (Regex: /^\\\\d+$/)",
									"type": "text"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "c4b1d9c8-fae0-4b5c-b981-8c9e7d704dcf",
			"description": "Supported Methods\n\n`list`\n\nList Service Plans\n\n`rates`\n\nList Service Plan Rates"
		},
		{
			"name": "Destinations",
			"item": [
				{
					"name": "Listing Destinations",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "41426812-0894-4190-8030-563b4ab27c1c",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the response body is an empty array",
									"    if (Array.isArray(responseBody) && responseBody.length === 0) {",
									"        console.error(\"Test Failed: There are no destinations created.\");",
									"        pm.test('Empty Response', function () {",
									"            pm.expect.fail(\"There are no destinations created.\");",
									"        });",
									"    } else {",
									"        // Validate the response structure",
									"        pm.test('Response Validation', function () {",
									"            pm.expect(responseBody).to.be.an('object');",
									"",
									"            // Iterate through each destination in the response",
									"            for (var key in responseBody) {",
									"                if (responseBody.hasOwnProperty(key)) {",
									"                    var destination = responseBody[key];",
									"",
									"                    pm.test('Destination ' + destination.destination + ' Validation', function () {",
									"                        pm.expect(destination).to.be.an('object');",
									"                        pm.expect(destination).to.have.property('route').that.is.a('string');",
									"                        pm.expect(destination).to.have.property('destination').that.is.a('string');",
									"                        pm.expect(destination).to.have.property('destination_group').that.is.a('string');",
									"",
									"                        // Check if \"codes\" is an array",
									"                        pm.expect(destination).to.have.property('codes').that.is.an('array');",
									"",
									"                        // If \"codes\" is an array, validate its structure",
									"                        if (Array.isArray(destination.codes)) {",
									"                            destination.codes.forEach(function (code) {",
									"                                pm.test('Code Validation', function () {",
									"                                    pm.expect(code).to.be.an('object');",
									"                                    pm.expect(code).to.have.property('code1').that.is.a('string');",
									"                                    pm.expect(code).to.have.property('code2').that.is.a('string');",
									"                                });",
									"                            });",
									"                        }",
									"                    });",
									"                }",
									"            }",
									"        });",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f05218f1-2de7-40b1-992a-58fd7f99150e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.destination.list",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.destination.list"
								},
								{
									"key": "route",
									"value": "",
									"description": "Route ID. (Regex: /^\\\\d+$/)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "dgroup",
									"value": "",
									"description": "Destination Group ID. Note: Only if route is supplied.(Regex: /^\\\\d+$/)",
									"type": "text",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Destinations Groups",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7c3511bd-e9cd-47ac-a167-a9388bd2c572",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Validate the response structure",
									"pm.test('Response Validation', function () {",
									"    pm.expect(responseBody).to.be.an('object');",
									"",
									"    // Iterate through each destination group in the response",
									"    for (var key in responseBody) {",
									"        if (responseBody.hasOwnProperty(key)) {",
									"            var destinationGroupId = key;",
									"            var destinationGroupName = responseBody[key];",
									"",
									"            pm.test('Destination Group ' + destinationGroupName + ' Validation', function () {",
									"                pm.expect(destinationGroupId).to.be.a('string');",
									"                pm.expect(destinationGroupName).to.be.a('string');",
									"            });",
									"        }",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "61fab209-d471-4b90-afe2-77d3914997bc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.destination.groups",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.destination.groups"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "148a8859-0b79-4292-ad65-7780b5b3344a",
			"description": "Supported Methods\n\n`list`\n\nList Destinations\n\n`groups`\n\nList Destinations Groups"
		},
		{
			"name": "UADs",
			"item": [
				{
					"name": "Listing UADs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d1698a5a-a492-45c3-a193-dfd8d556261c",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"",
									"        // Iterate through each UAD in the response",
									"        for (var uadId in responseBody) {",
									"            if (responseBody.hasOwnProperty(uadId)) {",
									"                var uad = responseBody[uadId];",
									"",
									"                pm.test('UAD ' + uadId + ' Validation', function () {",
									"                    pm.expect(uad).to.be.an('object');",
									"                    pm.expect(uad).to.have.property('name').that.is.a('string');",
									"                    pm.expect(uad).to.have.property('fullname').that.is.a('string');",
									"                    pm.expect(uad).to.have.property('enabled').that.is.a('boolean');",
									"                });",
									"            }",
									"        }",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c1685c93-d276-415d-b3fd-116593d3aa24",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.uads.list&server={{Srv/Tenant-ID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.uads.list"
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Tenant ID. (Regex: /^\\\\d+$/)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Activating UADs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "12ee9ae3-fdd7-4fff-b86e-0c1e8e3ed3db",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('string');",
									"",
									"        // Print the success message and ID",
									"        console.log('Success:', responseBody.success);",
									"        console.log('UAD ID:', responseBody.id);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d79e27ca-ddf3-47ca-8f65-019218ca58f9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.uads.activate&server={{Srv/Tenant-ID}}&id={{UADsID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.uads.activate"
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Server/Tenant ID. (Regex: /^\\\\d+$/"
								},
								{
									"key": "id",
									"value": "{{UADsID}}",
									"description": "UAD ID. (Regex: /^\\\\d+$/"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Deactivating UADs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "12ee9ae3-fdd7-4fff-b86e-0c1e8e3ed3db",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('string');",
									"",
									"        // Print the success message and ID",
									"        console.log('Success:', responseBody.success);",
									"        console.log('UAD ID:', responseBody.id);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4f055e31-afe1-42a4-a21d-92966f791da7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.uads.deactivate&server={{Srv/Tenant-ID}}&id={{UADsID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.uads.deactivate"
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Server/Tenant ID. (Regex: /^\\\\d+$/"
								},
								{
									"key": "id",
									"value": "{{UADsID}}",
									"description": "UAD ID. (Regex: /^\\\\d+$/"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "5413d04f-8b13-42b4-beb6-b6eb1ed478f7",
			"description": "Supported Methods\n\n`list`\n\nList UADs\n\n`activate`\n\nActivate UAD\n\n`deactivate`\n\nDeactivate UAD"
		},
		{
			"name": "Apps",
			"item": [
				{
					"name": "Listing Apps",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3d049048-0504-485c-b025-6f8e70f90393",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"",
									"        // Iterate through each edition/module in the response",
									"        for (var editionName in responseBody) {",
									"            if (responseBody.hasOwnProperty(editionName)) {",
									"                var edition = responseBody[editionName];",
									"",
									"                pm.test(editionName + ' Validation', function () {",
									"                    pm.expect(edition).to.be.an('object');",
									"                    pm.expect(edition).to.have.property('total').that.is.a('number');",
									"                    pm.expect(edition).to.have.property('in_use').that.is.a('number');",
									"                    pm.expect(edition).to.have.property('extensions').that.is.an('array');",
									"",
									"                    // Validate extensions",
									"                    pm.expect(edition.extensions).to.be.an('array');",
									"                    pm.expect(edition.extensions).to.have.lengthOf(edition.in_use);",
									"",
									"                    // Print edition/module details",
									"                    console.log(editionName + ' Total:', edition.total);",
									"                    console.log(editionName + ' In Use:', edition.in_use);",
									"                    console.log(editionName + ' Extensions:', edition.extensions);",
									"                });",
									"            }",
									"        }",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c32f4635-77b0-4470-a622-c01be4a13754",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.apps.list&server={{Srv/Tenant-ID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.apps.list"
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Filter DID list by Tenant ID.\nIf PBXware is running in Tenant Mode this is a required field and must contain a valid Tenant ID.\nID 1 is always assigned to Master tenant and cannot be used."
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "bf4259f7-ff91-4659-90c5-1e2eb4517376",
			"description": "Supported Methods\n\n`list`\n\nList Apps"
		},
		{
			"name": "License",
			"item": [
				{
					"name": "License Refresh",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "451b9bca-0f40-4e67-a725-750e36324589",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('status').that.is.a('string');",
									"        console.log('License Refresh Status:', responseBody.status);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7824b82a-7fb9-4048-ac95-9bcf27441dc4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.license.refresh",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.license.refresh"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "License Last Refreshed",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "451b9bca-0f40-4e67-a725-750e36324589",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('last_refreshed').that.is.a('string');",
									"        console.log('Last Refreshed Timestamp:', responseBody.last_refreshed);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "973b91b4-5e60-4b38-b068-4d49dfc14323",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.license.last_refreshed",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.license.last_refreshed"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "License Information",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "451b9bca-0f40-4e67-a725-750e36324589",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('Edition').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('Version').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('Channels').that.is.a('string');",
									"",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6107c152-d324-4fac-9c44-2c776c404120",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.license.info",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.license.info"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "c8d798bb-646d-43da-91f9-0e512b1e39b4",
			"description": "Supported Methods\n\n`refresh`\n\nRefresh license\n\n`last_refreshed`\n\nLast time license file was modified\n\n`info`\n\nLicense information"
		},
		{
			"name": "Monitor",
			"item": [
				{
					"name": "List Monitor Extensions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "785b9b11-ff9d-4849-9040-3c8b0144668b",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check for error in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"",
									"        // Iterate through the keys of the response object",
									"        for (var key in responseBody) {",
									"            if (responseBody.hasOwnProperty(key)) {",
									"                var item = responseBody[key];",
									"                pm.expect(item).to.be.an('object');",
									"",
									"                // Add checks for specific fields within each item",
									"                pm.expect(item).to.have.property('name');",
									"                pm.expect(item.name).to.be.a('string');",
									"",
									"                pm.expect(item).to.have.property('ext');",
									"                pm.expect(item.ext).to.be.a('string');",
									"",
									"                pm.expect(item).to.have.property('ip');",
									"                pm.expect(item.ip).to.be.a('string');",
									"",
									"                pm.expect(item).to.have.property('status');",
									"                pm.expect(item.status).to.be.a('string');",
									"",
									"                pm.expect(item).to.have.property('ua');",
									"                pm.expect(item.ua).to.be.a('string');",
									"",
									"                pm.expect(item).to.have.property('dnd');",
									"                pm.expect(item.dnd).to.satisfy(function (value) {",
									"                    return value === '' || value === true || value === false;",
									"                });",
									"",
									"                pm.expect(item).to.have.property('on_call');",
									"                pm.expect(item.on_call).to.satisfy(function (value) {",
									"                    return value === '' || value === true || value === false;",
									"                });",
									"            }",
									"        }",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "9e07cda4-bc42-4acd-a175-91f8a6a7cf1e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.monitor.list&server={{Srv/Tenant-ID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.monitor.list",
									"description": "Show Monitor extensions"
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Filter extensions by tenant/server."
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Live Calls",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "785b9b11-ff9d-4849-9040-3c8b0144668b",
								"exec": [
									"// If the message is not found, proceed with checking the JSON structure",
									"    pm.test('Status code is 200 OK', function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"// Check if the response contains the \"Live Calls: 0\" message",
									"if (pm.response.text().includes(\"Live Calls: 0\")) {",
									"    // If the message is found, mark the test as failed",
									"    pm.test('Response Validation', function () {",
									"        pm.expect.fail(\"There is no active calls on selected Server/Tenant!\");",
									"    });",
									"} else {",
									"    const responseData = pm.response.json();",
									"",
									"    // Continue with the checks for the JSON structure",
									"    for (let callId in responseData) {",
									"        const call = responseData[callId];",
									"        pm.test(`From Field Check`, function () {",
									"            pm.expect(call).to.have.property('from').to.be.a('string');",
									"        });",
									"",
									"        pm.test(`To Field Check`, function () {",
									"            pm.expect(call).to.have.property('to').to.be.a('string');",
									"        });",
									"",
									"        pm.test(`Check timestamp field`, function () {",
									"            pm.expect(call).to.have.property('timestamp').to.be.a('number');",
									"        });",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "583fc2d9-10b6-4864-bbcf-6decc8fe2103",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.monitor.live_calls&server={{Srv/Tenant-ID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.monitor.live_calls",
									"description": "Show Live calls"
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Filter extensions by tenant/server."
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "0e85a03f-e3e2-4977-ad30-1528b030d2b5",
			"description": "Supported Methods\n\n`list`\n\nList Monitor extensions\n\n`live_calls`\n\nList Live calls"
		},
		{
			"name": "Departments",
			"item": [
				{
					"name": "Listing Departments",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9d1fb48f-0f33-449d-b209-e1b7da55164a",
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"",
									"        // Check if the response contains at least one department",
									"        pm.expect(Object.keys(responseBody).length).to.be.above(0);",
									"",
									"        // Loop through each department and validate its properties",
									"        for (var departmentId in responseBody) {",
									"            if (responseBody.hasOwnProperty(departmentId)) {",
									"                pm.test('Department ' + departmentId + ' Validation', function () {",
									"                    var department = responseBody[departmentId];",
									"                    pm.expect(department).to.be.an('object');",
									"                    pm.expect(department).to.have.property('name').that.is.a('string');",
									"                });",
									"            }",
									"        }",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6897b75c-350e-4a81-9e64-730e58fac929",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.department.list&server={{Srv/Tenant-ID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.department.list"
								},
								{
									"key": "server",
									"value": "{{Srv/Tenant-ID}}",
									"description": "Filter departments by tenant/server"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "614e896d-dd5f-4835-946e-a83435e0d362",
			"description": "Supported Methods\n\n`list`\n\nList Destinations"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "5c2ba6a6-d08d-4e86-bf40-18513d929b67",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "f0546def-0d09-48ba-919a-2f900c4fcf4e",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "96dccf01-2737-4a37-a0ce-94ccbc585a87",
			"key": "API_Key",
			"value": "Test123456789",
			"type": "string"
		},
		{
			"id": "3db66f7e-aac7-48de-b131-1985b5473ce4",
			"key": "IP",
			"value": "",
			"type": "string"
		},
		{
			"id": "05a09093-68ba-4c8b-bf14-6a2ba5956d41",
			"key": "Srv/Tenant-ID",
			"value": "",
			"type": "string"
		},
		{
			"id": "289a93c5-05dd-4e31-b8fc-1c087b5e0e7a",
			"key": "tenant_name",
			"value": "",
			"type": "string"
		},
		{
			"id": "287aa363-95d8-49da-882a-6f6fb681ac58",
			"key": "tenant_code",
			"value": "",
			"type": "string"
		},
		{
			"id": "22e720cc-dc3a-4fc2-85b4-89c381b3abbd",
			"key": "tenantPackageId",
			"value": "",
			"type": "string"
		},
		{
			"id": "eca0e9e5-6c22-47db-9e44-d360b1388e16",
			"key": "tenantID",
			"value": "",
			"type": "string"
		},
		{
			"id": "8cdc5a91-4d9f-4cbd-8708-bd2bcbf4def7",
			"key": "name",
			"value": "",
			"type": "string"
		},
		{
			"id": "efd4635b-c0af-4b1d-a9eb-dfe13c981643",
			"key": "email",
			"value": "",
			"type": "string"
		},
		{
			"id": "75003254-fa9d-4c23-b7a4-6909ce62d151",
			"key": "extension",
			"value": "",
			"type": "string"
		},
		{
			"id": "daad7cf0-cb7b-459f-91da-d3b911861c3e",
			"key": "secret",
			"value": "",
			"type": "string"
		},
		{
			"id": "115fe67b-728b-4a41-95e8-c076b697cfe2",
			"key": "pin",
			"value": "",
			"type": "string"
		},
		{
			"id": "13e2f20e-6f90-498f-8edd-773394c1e88e",
			"key": "trunkID",
			"value": "",
			"type": "string"
		},
		{
			"id": "38ccdb39-1c8f-46ea-ab6b-ee43b67e139b",
			"key": "did",
			"value": "",
			"type": "string"
		},
		{
			"id": "fe1b393e-6247-4211-b675-de8183d1ed57",
			"key": "ext",
			"value": "",
			"type": "string"
		},
		{
			"id": "1298ef90-90a3-476f-9ba7-20a1e191e505",
			"key": "ExtensionID",
			"value": "",
			"type": "string"
		},
		{
			"id": "cbe9faee-193c-48d8-8891-357fc64cb90d",
			"key": "ExtensionIDs",
			"value": ""
		},
		{
			"id": "595f6ca8-957c-4ad1-8261-b3c40d01a32b",
			"key": "DateStart",
			"value": "",
			"type": "string"
		},
		{
			"id": "d9d5cc2b-bed7-4c22-9a15-1474f47bb0f4",
			"key": "DateEnd",
			"value": "",
			"type": "string"
		},
		{
			"id": "5cc89759-de6e-4ca2-8b11-f852b7e953f7",
			"key": "StartTime",
			"value": "",
			"type": "string"
		},
		{
			"id": "f8900ef1-3cf9-44d6-b089-414193fed57c",
			"key": "EndTime",
			"value": "",
			"type": "string"
		},
		{
			"id": "a8ede037-f9ab-4c30-94d7-ce2d27666d6e",
			"key": "TrunkIDs",
			"value": ""
		},
		{
			"id": "811158f9-b70f-48ff-b9cf-46865febb496",
			"key": "TrunkName",
			"value": "",
			"type": "string"
		},
		{
			"id": "dda73c23-6557-4a8d-b9dd-35066df1d94d",
			"key": "ProviderID",
			"value": "",
			"type": "string"
		},
		{
			"id": "48330f56-0a7a-4c6c-9f1f-2c079ca20404",
			"key": "TrunkType",
			"value": "",
			"type": "string"
		},
		{
			"id": "00e5c7b0-5409-4275-b5d8-2a536b79c664",
			"key": "TrunkDTMFmode",
			"value": "",
			"type": "string"
		},
		{
			"id": "59dfc298-a397-473d-9b91-72304fc1122d",
			"key": "TrunkStatus",
			"value": "",
			"type": "string"
		},
		{
			"id": "ee43f1b2-2f33-4bf7-adb9-d7173bda0f72",
			"key": "Country",
			"value": "",
			"type": "string"
		},
		{
			"id": "925b5c5e-54c7-47c3-8a43-bfb3498663a6",
			"key": "NationalCode",
			"value": "",
			"type": "string"
		},
		{
			"id": "a4e79c6e-4e62-4928-91f8-5a26263c2b8b",
			"key": "InternationalCode",
			"value": "",
			"type": "string"
		},
		{
			"id": "eaa21668-820c-4fed-9889-b542ef945bd8",
			"key": "EmergTrunk",
			"value": "",
			"type": "string"
		},
		{
			"id": "46b5b30f-7522-4b04-8bf6-7f1cff690b2b",
			"key": "TrunkHost",
			"value": "",
			"type": "string"
		},
		{
			"id": "aa55f967-224b-4225-9a72-d1ca5f02b717",
			"key": "TrunkUserName",
			"value": "",
			"type": "string"
		},
		{
			"id": "dac16ab6-eb4e-4ea2-9e47-387619b3daa8",
			"key": "TrunkSecret",
			"value": "",
			"type": "string"
		},
		{
			"id": "b4b488d3-984a-4a0f-be3a-f2bbc8e23dd4",
			"key": "TrunkPeerHost",
			"value": "",
			"type": "string"
		},
		{
			"id": "35a5410f-1159-46e7-94b0-fafbfd586c28",
			"key": "TrunkPeerUserName",
			"value": "",
			"type": "string"
		},
		{
			"id": "a0a7d940-3c16-4b52-a928-a32f65940d0c",
			"key": "TrunkPeerSecret",
			"value": "",
			"type": "string"
		},
		{
			"id": "c4cd79cd-c55f-4c2e-bffd-18723c3afbff",
			"key": "TrunkInsecure",
			"value": "",
			"type": "string"
		},
		{
			"id": "b28044aa-ae1f-47d3-8b1c-d5206f8474cf",
			"key": "TrunkLooseRouting",
			"value": "",
			"type": "string"
		},
		{
			"id": "0f2bc0b1-20b7-4103-b673-d04f52382909",
			"key": "TrunkIncomingLimit",
			"value": "",
			"type": "string"
		},
		{
			"id": "d8687da8-58a7-4836-b702-e50301d478fe",
			"key": "TrunkOutgoingLimit",
			"value": "",
			"type": "string"
		},
		{
			"id": "47ef0ef5-333b-41c8-972e-b774d85cd16d",
			"key": "TrunkBusyLevel",
			"value": "",
			"type": "string"
		},
		{
			"id": "82532f67-fcd0-4244-a82f-3eb1af1bc655",
			"key": "TrunkCodecs",
			"value": "",
			"type": "string"
		},
		{
			"id": "073ad7b3-e0dd-4777-aff9-499bd92fdc67",
			"key": "TrunkCodecsPrimeTime",
			"value": "",
			"type": "string"
		},
		{
			"id": "57e22b56-207e-44eb-a410-ed4c8055de35",
			"key": "SMSTrunkIDs",
			"value": "",
			"type": "string"
		},
		{
			"id": "e6c82f90-aecf-45f0-b487-0aa9fee8a02a",
			"key": "SMSTrunkEnabled",
			"value": "",
			"type": "string"
		},
		{
			"id": "eea48326-6b5f-4775-8428-71bda223cdf8",
			"key": "SMSTrunkName",
			"value": "",
			"type": "string"
		},
		{
			"id": "63da3c7c-99d8-4a67-af92-7a3661101be8",
			"key": "SMSTrunkProvider",
			"value": "",
			"type": "string"
		},
		{
			"id": "e8dde6c3-3ea7-4e6b-a45c-4fbcd9c674cb",
			"key": "TelnyxAPI",
			"value": "",
			"type": "string"
		},
		{
			"id": "fe2dcd2d-ec85-4b79-a8c7-3f3fcfd0d53e",
			"key": "TelnyxPublicKey",
			"value": "",
			"type": "string"
		},
		{
			"id": "f754b327-38f1-4562-853c-b51f080ff1f0",
			"key": "TelnyxProfileID",
			"value": "",
			"type": "string"
		},
		{
			"id": "148b7c01-5060-4d1c-b267-b18c8a10c0fb",
			"key": "BandwithUserName",
			"value": "",
			"type": "string"
		},
		{
			"id": "c5c72b22-ac4e-40f5-9f24-ae040dcdc408",
			"key": "BandwithPassword",
			"value": "",
			"type": "string"
		},
		{
			"id": "ed341094-75e5-4b4b-9200-3b0fd383ac47",
			"key": "BandwithUserID",
			"value": "",
			"type": "string"
		},
		{
			"id": "8a6b86da-c358-41b9-999b-e26fc8e0289a",
			"key": "BandwithAppID",
			"value": "",
			"type": "string"
		},
		{
			"id": "2acd4405-7a2d-4731-a89d-8054555d0d82",
			"key": "TwilioAccSID",
			"value": "",
			"type": "string"
		},
		{
			"id": "bbc2158a-cfc5-4377-b871-36177912bfb5",
			"key": "TwilioAuthToken",
			"value": "",
			"type": "string"
		},
		{
			"id": "c08481d5-41a8-4d70-aa22-51a152dc2659",
			"key": "VoipSecret",
			"value": "",
			"type": "string"
		},
		{
			"id": "9fc7c3d5-b070-40c8-b35e-9fbc17140122",
			"key": "VoipLogin",
			"value": "",
			"type": "string"
		},
		{
			"id": "e2ccf30e-22ba-4113-af48-86739d123b74",
			"key": "OzAPI",
			"value": "",
			"type": "string"
		},
		{
			"id": "1309a3b9-37e1-4d89-a035-7d1da874848d",
			"key": "OzUserName",
			"value": "",
			"type": "string"
		},
		{
			"id": "1d70171f-5775-489e-a9f7-4b166c0f21d7",
			"key": "DID",
			"value": "",
			"type": "string"
		},
		{
			"id": "412fee63-a764-4e75-94c3-3efc5b678a75",
			"key": "Destination",
			"value": "",
			"type": "string"
		},
		{
			"id": "494a7704-7e85-43a3-b31a-a2afeda7301b",
			"key": "DestType",
			"value": "",
			"type": "string"
		},
		{
			"id": "01f4d2d3-d173-45ff-8d32-6eb429e62c5e",
			"key": "DID-Disabled",
			"value": "",
			"type": "string"
		},
		{
			"id": "55c78e72-66d7-4fb7-b4d7-fc6f3a12eb19",
			"key": "DID-IDs",
			"value": ""
		},
		{
			"id": "7c998c7e-6d8f-4b37-959f-c1f9bf2abc9e",
			"key": "DIDGroupName",
			"value": "",
			"type": "string"
		},
		{
			"id": "e1ffbbd1-f919-4411-8f4e-1a8d89c56658",
			"key": "DIDMin",
			"value": "",
			"type": "string"
		},
		{
			"id": "bcdef159-9265-4eb5-8cb2-6b776d75d3b5",
			"key": "DIDMax",
			"value": "",
			"type": "string"
		},
		{
			"id": "ade89eb1-59a2-4692-8181-f0df08d8e077",
			"key": "DIDGroupID",
			"value": "",
			"type": "string"
		},
		{
			"id": "cdc4efd7-937f-4d35-895f-379548a508f9",
			"key": "IVRName",
			"value": "",
			"type": "string"
		},
		{
			"id": "477ae382-6ba0-4cdc-8462-4f40000630fd",
			"key": "IVRNum",
			"value": "",
			"type": "string"
		},
		{
			"id": "913fc5eb-cb0f-46f5-9fd7-e60451efb644",
			"key": "IVRGreet",
			"value": "",
			"type": "string"
		},
		{
			"id": "83486d93-747b-47ac-9fee-b09d1ec6e37a",
			"key": "IVRKeyMap",
			"value": "",
			"type": "string"
		},
		{
			"id": "a6d9220c-f1aa-430a-9611-fb1107208821",
			"key": "IVRStatus",
			"value": "",
			"type": "string"
		},
		{
			"id": "1b0a97ec-86d8-41e7-9fe5-7ee8f06ddf5b",
			"key": "IVRsID",
			"value": "",
			"type": "string"
		},
		{
			"id": "f1bd6a74-16f7-491b-bdcc-1a66c394ad66",
			"key": "Key0Type",
			"value": "",
			"type": "string"
		},
		{
			"id": "83d1668c-5d57-4ad7-b2ec-21fcd2a63183",
			"key": "Key0Dest",
			"value": "",
			"type": "string"
		},
		{
			"id": "3ff6ed88-6799-4fc1-b071-1d9d754569da",
			"key": "Key1Type",
			"value": "",
			"type": "string"
		},
		{
			"id": "b5d88245-624a-432d-9957-dc96ec1c185a",
			"key": "Key1Dest",
			"value": "",
			"type": "string"
		},
		{
			"id": "7a87304c-fcce-46d5-8498-ddf38f96116c",
			"key": "Key2Type",
			"value": "",
			"type": "string"
		},
		{
			"id": "c29f8641-f7f2-4391-8c9f-535a9e1ea933",
			"key": "Key2Dest",
			"value": "",
			"type": "string"
		},
		{
			"id": "16547a6e-1df4-432b-8199-33623dd648e3",
			"key": "Key3Type",
			"value": "",
			"type": "string"
		},
		{
			"id": "0bd5af25-a5d5-4f75-9082-0874ca737fbf",
			"key": "Key3Dest",
			"value": "",
			"type": "string"
		},
		{
			"id": "660e55f7-3d82-46e6-bdc3-143d0a5fff5c",
			"key": "Key4Type",
			"value": "",
			"type": "string"
		},
		{
			"id": "102eaac1-34c4-4d66-a0f1-89eb4bb163db",
			"key": "Key4Dest",
			"value": "",
			"type": "string"
		},
		{
			"id": "e1222450-22a6-425f-8f0f-625cdea782f1",
			"key": "Key5Type",
			"value": "",
			"type": "string"
		},
		{
			"id": "17c1f4ca-cedc-4658-8d12-c6e95f099ce4",
			"key": "Key5Dest",
			"value": "",
			"type": "string"
		},
		{
			"id": "fe1771e6-bdf4-4164-9a96-97e7a77f9b5c",
			"key": "Key6Type",
			"value": "",
			"type": "string"
		},
		{
			"id": "4dcfe1af-c2d1-42f1-a1ed-6c53e88a4032",
			"key": "Key6Dest",
			"value": "",
			"type": "string"
		},
		{
			"id": "c640c8e0-bb0a-47e9-8865-256754f823aa",
			"key": "Key7Type",
			"value": "",
			"type": "string"
		},
		{
			"id": "cab7665e-b73d-48fe-9657-6699c09eade6",
			"key": "Key7Dest",
			"value": "",
			"type": "string"
		},
		{
			"id": "c71b6f89-0061-40df-ac49-1b19daa1e47f",
			"key": "Key8Type",
			"value": "",
			"type": "string"
		},
		{
			"id": "6b19ea37-a7ef-4fbf-bd5f-6a860e7b1bbe",
			"key": "Key8Dest",
			"value": "",
			"type": "string"
		},
		{
			"id": "a584e4cf-5323-49e4-89e8-860e37fe4dda",
			"key": "Key9Type",
			"value": "",
			"type": "string"
		},
		{
			"id": "17a51f13-de2c-428c-9fa0-3a11e7dbf175",
			"key": "Key9Dest",
			"value": "",
			"type": "string"
		},
		{
			"id": "7f13d3d8-c159-4461-a0e6-b85b39f369a5",
			"key": "Key*Type",
			"value": "",
			"type": "string"
		},
		{
			"id": "a9c9c6e3-bd05-4328-b4e4-34a6ef9b2e32",
			"key": "Key*Dest",
			"value": "",
			"type": "string"
		},
		{
			"id": "e1679f5b-1cea-4e46-af6b-d4559c622750",
			"key": "RGsID",
			"value": "",
			"type": "string"
		},
		{
			"id": "d27c361d-b2cd-4e4c-ab81-c0e154f77673",
			"key": "RGName",
			"value": "",
			"type": "string"
		},
		{
			"id": "f1f20b92-6f0d-4aec-bacd-6dee40817417",
			"key": "RGNum",
			"value": "",
			"type": "string"
		},
		{
			"id": "292f45cd-1676-44f6-a373-95f72dddd226",
			"key": "RGExt",
			"value": "",
			"type": "string"
		},
		{
			"id": "fc0ac8e5-6dc1-44a1-98b0-c355b0cc3c4d",
			"key": "ERGsID",
			"value": "",
			"type": "string"
		},
		{
			"id": "048d0c66-677f-4c88-8cbd-af57535d22f3",
			"key": "ERGPenal",
			"value": "",
			"type": "string"
		},
		{
			"id": "12c5a6e5-3316-4c49-b6ec-6ecdfa7d941a",
			"key": "OperationTimesID",
			"value": ""
		},
		{
			"id": "d619f8ed-f3f4-4887-afa4-08d65ddf6aa3",
			"key": "TenantPackageName",
			"value": "",
			"type": "string"
		},
		{
			"id": "f5ff6972-15e4-46ac-95d0-f138908210aa",
			"key": "TenantPackageID",
			"value": "",
			"type": "string"
		},
		{
			"id": "defb6f91-8790-4af1-813c-56f69688748f",
			"key": "ExtLength",
			"value": "",
			"type": "string"
		},
		{
			"id": "498db53e-7ca0-47c5-9f4a-531432ce8762",
			"key": "TenantStatus",
			"value": "",
			"type": "string"
		},
		{
			"id": "0998b672-b529-4a42-83ef-fee8996087d4",
			"key": "UADsID",
			"value": "",
			"type": "string"
		},
		{
			"id": "cc02c770-21b7-4af4-992d-37a04e35e49d",
			"key": "Primary",
			"value": "",
			"type": "string"
		},
		{
			"id": "bfc97234-63b4-45bc-b21c-f6f374b436ff",
			"key": "Secondary",
			"value": "",
			"type": "string"
		},
		{
			"id": "93b5afb0-6b45-4b11-9122-6238d4491673",
			"key": "Tertiary",
			"value": "",
			"type": "string"
		},
		{
			"id": "329f7535-f558-4d9e-b257-25178b4fdfc0",
			"key": "PrimaryEm",
			"value": "",
			"type": "string"
		},
		{
			"id": "3530830c-65c4-4d41-b9d7-ae15219e7af5",
			"key": "SecondaryEm",
			"value": "",
			"type": "string"
		},
		{
			"id": "c66b6a38-6f59-466f-9efc-94c7e6b5e594",
			"key": "TertiaryEm",
			"value": "",
			"type": "string"
		},
		{
			"id": "3daf6dec-7a20-4d2e-8679-11714de94d9c",
			"key": "CallerID",
			"value": "",
			"type": "string"
		},
		{
			"id": "12badf8e-307f-4163-b831-9ebfbed8e2e1",
			"key": "MatchEx",
			"value": "",
			"type": "string"
		},
		{
			"id": "3490b0bb-927c-461c-a041-25a891e484e7",
			"key": "CLIRoutingID",
			"value": "",
			"type": "string"
		},
		{
			"id": "4da99f15-8f41-4962-a6d7-247d896b941c",
			"key": "SP-ID",
			"value": "",
			"type": "string"
		},
		{
			"id": "c7a0ba06-c0b0-4661-820d-8a578e384e51",
			"key": "RouteID",
			"value": "",
			"type": "string"
		},
		{
			"id": "35705bbe-572e-4d06-b38b-4689021f8ab9",
			"key": "DestGrID",
			"value": "",
			"type": "string"
		}
	]
}